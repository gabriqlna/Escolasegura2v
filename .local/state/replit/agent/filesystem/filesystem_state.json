{"file_contents":{"design_guidelines.md":{"content":"# School Safety Management System - Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from utility-focused applications like Notion, Asana, and Linear for the administrative interfaces, while incorporating visual elements from safety-focused platforms. This balances functionality with the serious nature of school safety management.\n\n## Core Design Principles\n- **Trust and Reliability**: Clean, professional interface that instills confidence\n- **Role-Based Visual Hierarchy**: Clear differentiation between student, staff, and admin interfaces\n- **Accessibility First**: High contrast, clear typography, and intuitive navigation\n- **Emergency-Ready**: Critical actions (emergency button) prominently displayed\n\n## Color Palette\n\n### Primary Colors\n- **Primary Blue**: 217 91% 60% (trustworthy, professional)\n- **Safety Red**: 0 84% 60% (emergency actions, alerts)\n- **Success Green**: 142 76% 36% (completed actions, safe status)\n\n### Supporting Colors\n- **Warning Orange**: 38 92% 50% (caution, pending items)\n- **Background Gray**: 220 14% 96% (light mode background)\n- **Text Dark**: 220 9% 20% (primary text)\n- **Text Medium**: 220 9% 46% (secondary text)\n\n### Dark Mode\n- **Background Dark**: 220 13% 18%\n- **Surface Dark**: 220 13% 24%\n- **Primary Blue Dark**: 217 91% 65%\n\n## Typography\n**Primary Font**: Inter (Google Fonts) - excellent readability for safety-critical information\n**Secondary Font**: Roboto (Google Fonts) - for data tables and forms\n- **Headings**: Inter, 600 weight\n- **Body**: Inter, 400 weight\n- **Critical Actions**: Inter, 500 weight\n\n## Layout System\n**Tailwind Spacing Units**: Consistent use of 2, 4, 8, 12, 16 units\n- **Component Spacing**: p-4, m-8\n- **Section Spacing**: py-12, px-4\n- **Grid Gaps**: gap-4 for cards, gap-8 for sections\n\n## Component Library\n\n### Navigation\n- **Role-Based Sidebar**: Different menu items based on user permissions\n- **Emergency Button**: Always visible, fixed position (top-right)\n- **Notification Badge**: Real-time updates for urgent alerts\n\n### Cards and Containers\n- **Report Cards**: Subtle shadow, rounded corners (8px), color-coded by urgency\n- **Dashboard Widgets**: Clean white/dark containers with clear headers\n- **Alert Banners**: Prominent positioning for urgent notices\n\n### Forms\n- **Incident Reporting**: Progressive disclosure, anonymous option toggle\n- **User Management**: Table-based with action buttons\n- **Visitor Log**: Time-stamped entries with status indicators\n\n### Data Display\n- **Surveillance Grid**: 2x2 camera feed simulation with status indicators\n- **Safety Checklist**: Progress bars and checkbox interactions\n- **Calendar View**: Clean month/week views for drills and events\n\n## Role-Based Interface Variations\n\n### Student Interface\n- **Simplified Navigation**: Essential features only\n- **Large Action Buttons**: Easy access to report incidents and emergency\n- **Educational Content**: Prominent campaigns and safety information\n\n### Staff Interface\n- **Extended Functionality**: Additional visitor and occurrence management\n- **Quick Actions**: Streamlined workflows for daily tasks\n- **Status Indicators**: Clear visual feedback for completed actions\n\n### Admin Interface\n- **Comprehensive Dashboard**: Overview of all system activity\n- **Management Tools**: User administration and system configuration\n- **Analytics Views**: Reports and trend visualization\n\n## Critical Interactions\n\n### Emergency Button\n- **Position**: Fixed top-right, always visible\n- **Design**: Large, red, with icon and text\n- **Animation**: Subtle pulse when inactive, immediate feedback when pressed\n\n### Anonymous Reporting\n- **Visual Cue**: Lock icon and \"Anonymous\" badge\n- **Form Design**: Simplified, non-intimidating interface\n- **Confirmation**: Clear feedback without revealing identity\n\n### Push Notifications\n- **In-App**: Toast notifications with role-appropriate styling\n- **Visual Priority**: Color-coded by urgency level\n\n## Accessibility Features\n- **High Contrast**: Meets WCAG AA standards\n- **Keyboard Navigation**: All functions accessible via keyboard\n- **Screen Reader Support**: Proper ARIA labels and semantic HTML\n- **Font Scaling**: Responsive typography that scales appropriately\n\n## Images\nNo large hero images required. Focus on:\n- **Icon Library**: Heroicons for consistent iconography\n- **Camera Placeholders**: Subtle surveillance feed mockups\n- **Safety Illustrations**: Simple, clear diagrams for evacuation plans\n\nThis design system prioritizes functionality and trust while maintaining visual appeal appropriate for a safety-critical application.","size_bytes":4608},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# School Safety Management System\n\n## Overview\n\nThis is a comprehensive school safety management system designed to handle incident reporting, emergency management, visitor tracking, and role-based administrative functions. The system prioritizes safety-critical information with an emergency-ready interface that builds trust and reliability among users. It serves students, staff, and administrators with role-specific features and clear visual hierarchy.\n\nThe application focuses on incident reporting (including anonymous bullying reports), visitor management, emergency notifications, and administrative oversight through a clean, professional interface inspired by utility-focused applications like Notion and Asana.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Library**: Radix UI primitives with shadcn/ui components for consistent, accessible interface elements\n- **Styling**: Tailwind CSS with custom design system implementing safety-focused color palette (trust blue, safety red, success green)\n- **State Management**: React Context for authentication state, TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL (configured but using Neon serverless)\n- **Session Management**: Connect-pg-simple for PostgreSQL session storage\n- **Development**: Hot module replacement with Vite integration\n\n### Authentication & Authorization\n- **Provider**: Firebase Authentication for user management\n- **Strategy**: Role-based access control with three tiers (student, staff, admin)\n- **Session Handling**: Firebase auth state management with context provider\n- **Permission System**: Hierarchical role permissions with utility functions\n\n### Data Architecture\n- **Schema Design**: Comprehensive schema covering users, reports, notices, visitors, and occurrences\n- **Database Strategy**: PostgreSQL with Drizzle ORM migrations\n- **Type Safety**: Shared schema types between frontend and backend using Zod validation\n- **Role-based Data Access**: Different data visibility based on user roles\n\n### Design System\n- **Component Library**: Custom design system based on shadcn/ui with safety-focused modifications\n- **Typography**: Inter font family for excellent readability in safety-critical contexts\n- **Color System**: Professional palette with semantic colors (primary blue for trust, safety red for emergencies, success green for completed actions)\n- **Responsive Design**: Mobile-first approach with consistent spacing using Tailwind units\n- **Accessibility**: High contrast ratios and clear visual hierarchy for emergency situations\n\n### Security Considerations\n- **Input Validation**: Zod schemas for runtime type checking and validation\n- **Authentication**: Firebase security rules and session-based authorization\n- **Anonymous Reporting**: Support for anonymous incident reporting while maintaining data integrity\n- **Role Enforcement**: Server-side permission checks for sensitive operations\n\n## External Dependencies\n\n### Authentication & Database\n- **Firebase**: Authentication provider with user management and real-time capabilities\n- **Neon Database**: Serverless PostgreSQL hosting for production deployment\n- **PostgreSQL**: Primary database with session storage via connect-pg-simple\n\n### UI & Styling\n- **Radix UI**: Accessible component primitives for dialogs, dropdowns, navigation\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Google Fonts**: Inter and additional fonts for optimal readability\n- **Lucide React**: Icon library for consistent iconography\n\n### Development & Build Tools\n- **Vite**: Fast build tool with HMR and TypeScript support\n- **ESBuild**: Fast bundling for production builds\n- **TypeScript**: Type safety across the entire application stack\n- **Replit Integration**: Development environment with runtime error handling\n\n### Data & State Management\n- **TanStack Query**: Server state management with caching and synchronization\n- **Drizzle Kit**: Database migration and schema management tools\n- **Date-fns**: Date manipulation and formatting utilities\n- **React Hook Form**: Form state management with validation integration","size_bytes":4597},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema, insertReportSchema, insertNoticeSchema, insertVisitorSchema,\n  insertOccurrenceSchema, insertChecklistItemSchema, insertDrillSchema, \n  insertCampaignSchema, insertEmergencyAlertSchema,\n  updateUserSchema, updateNoticeSchema, updateCampaignSchema, \n  updateChecklistItemSchema, reportStatusSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Helper function for error handling\n  const handleAsync = (fn: Function) => (req: any, res: any, next: any) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n\n  // Helper function for validation\n  const validateBody = (schema: any) => (req: any, res: any, next: any) => {\n    try {\n      req.validatedBody = schema.parse(req.body);\n      next();\n    } catch (error: any) {\n      res.status(400).json({ error: \"Validation failed\", details: error.errors });\n    }\n  };\n\n  // Authentication middleware\n  const requireAuth = () => (req: any, res: any, next: any) => {\n    const userId = req.headers['x-user-id'];\n    if (!userId) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    req.userId = userId;\n    next();\n  };\n\n  // Helper to verify user exists\n  const verifyUser = async (userId: string) => {\n    const user = await storage.getUser(userId);\n    if (!user || !user.isActive) {\n      return null;\n    }\n    return user;\n  };\n\n  // Role-based authorization middleware\n  const requireRole = (allowedRoles: string[]) => (req: any, res: any, next: any) => {\n    if (!req.user || !allowedRoles.includes(req.user.role)) {\n      return res.status(403).json({ error: \"Forbidden: insufficient permissions\" });\n    }\n    next();\n  };\n\n  // Users API\n  app.get(\"/api/users\", handleAsync(async (req: any, res: any) => {\n    const users = await storage.getAllUsers();\n    res.json(users);\n  }));\n\n  app.get(\"/api/users/:id\", handleAsync(async (req: any, res: any) => {\n    const user = await storage.getUser(req.params.id);\n    if (!user) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n    res.json(user);\n  }));\n\n  app.post(\"/api/users\", validateBody(insertUserSchema), handleAsync(async (req: any, res: any) => {\n    const user = await storage.createUser(req.validatedBody);\n    res.status(201).json(user);\n  }));\n\n  app.patch(\"/api/users/:id\", requireAuth(), validateBody(updateUserSchema), handleAsync(async (req: any, res: any) => {\n    const user = await verifyUser(req.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid user\" });\n    }\n    \n    // Users can only update their own profile, or admin can update anyone\n    if (req.params.id !== req.userId && user.role !== 'admin') {\n      return res.status(403).json({ error: \"Forbidden: can only update own profile\" });\n    }\n    \n    // Prevent role escalation - only admin can change roles\n    if (req.validatedBody.role && user.role !== 'admin') {\n      return res.status(403).json({ error: \"Forbidden: cannot change role\" });\n    }\n    \n    const updatedUser = await storage.updateUser(req.params.id, req.validatedBody);\n    if (!updatedUser) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n    res.json(updatedUser);\n  }));\n\n  // Reports API\n  app.get(\"/api/reports\", handleAsync(async (req: any, res: any) => {\n    const reports = await storage.getReports();\n    res.json(reports);\n  }));\n\n  app.post(\"/api/reports\", validateBody(insertReportSchema), handleAsync(async (req: any, res: any) => {\n    // Get user ID from Firebase token or session (simplified for now)\n    const reporterId = req.headers['x-user-id'] || undefined;\n    const report = await storage.createReport({\n      ...req.validatedBody,\n      reporterId: req.validatedBody.isAnonymous ? undefined : reporterId\n    });\n    res.status(201).json(report);\n  }));\n\n  app.patch(\"/api/reports/:id/status\", requireAuth(), validateBody(reportStatusSchema), handleAsync(async (req: any, res: any) => {\n    const user = await verifyUser(req.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid user\" });\n    }\n    \n    // Only staff and admin can update report status\n    if (user.role === 'student') {\n      return res.status(403).json({ error: \"Forbidden: insufficient permissions\" });\n    }\n    \n    const report = await storage.updateReportStatus(req.params.id, req.validatedBody.status);\n    if (!report) {\n      return res.status(404).json({ error: \"Report not found\" });\n    }\n    res.json(report);\n  }));\n\n  // Notices API\n  app.get(\"/api/notices\", handleAsync(async (req: any, res: any) => {\n    const notices = await storage.getActiveNotices();\n    res.json(notices);\n  }));\n\n  app.post(\"/api/notices\", requireAuth(), validateBody(insertNoticeSchema), handleAsync(async (req: any, res: any) => {\n    const user = await verifyUser(req.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid user\" });\n    }\n    const notice = await storage.createNotice({\n      ...req.validatedBody,\n      createdBy: req.userId\n    });\n    res.status(201).json(notice);\n  }));\n\n  app.patch(\"/api/notices/:id\", requireAuth(), validateBody(updateNoticeSchema), handleAsync(async (req: any, res: any) => {\n    const user = await verifyUser(req.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid user\" });\n    }\n    \n    // Only staff and admin can update notices\n    if (user.role === 'student') {\n      return res.status(403).json({ error: \"Forbidden: insufficient permissions\" });\n    }\n    \n    const notice = await storage.updateNotice(req.params.id, req.validatedBody);\n    if (!notice) {\n      return res.status(404).json({ error: \"Notice not found\" });\n    }\n    res.json(notice);\n  }));\n\n  // Visitors API\n  app.get(\"/api/visitors\", handleAsync(async (req: any, res: any) => {\n    const visitors = await storage.getVisitors();\n    res.json(visitors);\n  }));\n\n  app.get(\"/api/visitors/active\", handleAsync(async (req: any, res: any) => {\n    const visitors = await storage.getActiveVisitors();\n    res.json(visitors);\n  }));\n\n  app.post(\"/api/visitors\", requireAuth(), validateBody(insertVisitorSchema), handleAsync(async (req: any, res: any) => {\n    const user = await verifyUser(req.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid user\" });\n    }\n    const visitor = await storage.createVisitor({\n      ...req.validatedBody,\n      registeredBy: req.userId\n    });\n    res.status(201).json(visitor);\n  }));\n\n  app.patch(\"/api/visitors/:id/checkout\", requireAuth(), handleAsync(async (req: any, res: any) => {\n    const user = await verifyUser(req.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid user\" });\n    }\n    \n    const visitor = await storage.checkOutVisitor(req.params.id);\n    if (!visitor) {\n      return res.status(404).json({ error: \"Visitor not found\" });\n    }\n    res.json(visitor);\n  }));\n\n  // Occurrences API\n  app.get(\"/api/occurrences\", handleAsync(async (req: any, res: any) => {\n    const occurrences = await storage.getOccurrences();\n    res.json(occurrences);\n  }));\n\n  app.post(\"/api/occurrences\", requireAuth(), validateBody(insertOccurrenceSchema), handleAsync(async (req: any, res: any) => {\n    const user = await verifyUser(req.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid user\" });\n    }\n    const occurrence = await storage.createOccurrence({\n      ...req.validatedBody,\n      createdBy: req.userId\n    });\n    res.status(201).json(occurrence);\n  }));\n\n  // Checklist Items API\n  app.get(\"/api/checklist\", handleAsync(async (req: any, res: any) => {\n    const items = await storage.getChecklistItems();\n    res.json(items);\n  }));\n\n  app.post(\"/api/checklist\", requireAuth(), validateBody(insertChecklistItemSchema), handleAsync(async (req: any, res: any) => {\n    const user = await verifyUser(req.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid user\" });\n    }\n    \n    // Only staff and admin can create checklist items\n    if (user.role === 'student') {\n      return res.status(403).json({ error: \"Forbidden: insufficient permissions\" });\n    }\n    \n    const item = await storage.createChecklistItem(req.validatedBody);\n    res.status(201).json(item);\n  }));\n\n  app.patch(\"/api/checklist/:id\", validateBody(updateChecklistItemSchema), handleAsync(async (req: any, res: any) => {\n    let updates = { ...req.validatedBody };\n    \n    if (req.validatedBody.isCompleted !== undefined) {\n      const userId = req.headers['x-user-id'];\n      if (!userId) {\n        return res.status(401).json({ error: \"Authentication required to complete items\" });\n      }\n      \n      const user = await verifyUser(userId);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid user\" });\n      }\n      \n      if (req.validatedBody.isCompleted) {\n        updates = {\n          ...updates,\n          completedBy: userId,\n          completedAt: new Date()\n        };\n      } else {\n        updates = {\n          ...updates,\n          completedBy: null,\n          completedAt: null\n        };\n      }\n    }\n    \n    const item = await storage.updateChecklistItem(req.params.id, updates);\n    if (!item) {\n      return res.status(404).json({ error: \"Checklist item not found\" });\n    }\n    res.json(item);\n  }));\n\n  // Drills API\n  app.get(\"/api/drills\", handleAsync(async (req: any, res: any) => {\n    const drills = await storage.getDrills();\n    res.json(drills);\n  }));\n\n  app.get(\"/api/drills/upcoming\", handleAsync(async (req: any, res: any) => {\n    const drills = await storage.getUpcomingDrills();\n    res.json(drills);\n  }));\n\n  app.post(\"/api/drills\", requireAuth(), validateBody(insertDrillSchema), handleAsync(async (req: any, res: any) => {\n    const user = await verifyUser(req.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid user\" });\n    }\n    const drill = await storage.createDrill({\n      ...req.validatedBody,\n      createdBy: req.userId\n    });\n    res.status(201).json(drill);\n  }));\n\n  // Campaigns API\n  app.get(\"/api/campaigns\", handleAsync(async (req: any, res: any) => {\n    const campaigns = await storage.getActiveCampaigns();\n    res.json(campaigns);\n  }));\n\n  app.post(\"/api/campaigns\", requireAuth(), validateBody(insertCampaignSchema), handleAsync(async (req: any, res: any) => {\n    const user = await verifyUser(req.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid user\" });\n    }\n    const campaign = await storage.createCampaign({\n      ...req.validatedBody,\n      createdBy: req.userId\n    });\n    res.status(201).json(campaign);\n  }));\n\n  app.patch(\"/api/campaigns/:id\", requireAuth(), validateBody(updateCampaignSchema), handleAsync(async (req: any, res: any) => {\n    const user = await verifyUser(req.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid user\" });\n    }\n    \n    // Only staff and admin can update campaigns\n    if (user.role === 'student') {\n      return res.status(403).json({ error: \"Forbidden: insufficient permissions\" });\n    }\n    \n    const campaign = await storage.updateCampaign(req.params.id, req.validatedBody);\n    if (!campaign) {\n      return res.status(404).json({ error: \"Campaign not found\" });\n    }\n    res.json(campaign);\n  }));\n\n  // Emergency Alerts API\n  app.get(\"/api/emergency-alerts\", handleAsync(async (req: any, res: any) => {\n    const alerts = await storage.getActiveEmergencyAlerts();\n    res.json(alerts);\n  }));\n\n  app.post(\"/api/emergency-alerts\", requireAuth(), validateBody(insertEmergencyAlertSchema), handleAsync(async (req: any, res: any) => {\n    const user = await verifyUser(req.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid user\" });\n    }\n    const alert = await storage.createEmergencyAlert({\n      ...req.validatedBody,\n      triggeredBy: req.userId\n    });\n    res.status(201).json(alert);\n  }));\n\n  app.patch(\"/api/emergency-alerts/:id/resolve\", requireAuth(), handleAsync(async (req: any, res: any) => {\n    const user = await verifyUser(req.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid user\" });\n    }\n    const alert = await storage.resolveEmergencyAlert(req.params.id, req.userId);\n    if (!alert) {\n      return res.status(404).json({ error: \"Emergency alert not found\" });\n    }\n    res.json(alert);\n  }));\n\n  // Dashboard stats API\n  app.get(\"/api/dashboard/stats\", handleAsync(async (req: any, res: any) => {\n    const [users, reports, activeVisitors, activeAlerts, upcomingDrills] = await Promise.all([\n      storage.getAllUsers(),\n      storage.getReports(),\n      storage.getActiveVisitors(),\n      storage.getActiveEmergencyAlerts(),\n      storage.getUpcomingDrills()\n    ]);\n\n    const stats = {\n      totalUsers: users.length,\n      pendingReports: reports.filter(r => r.status === 'pending').length,\n      activeVisitors: activeVisitors.length,\n      activeAlerts: activeAlerts.length,\n      upcomingDrills: upcomingDrills.length,\n      recentReports: reports.slice(-5).reverse()\n    };\n\n    res.json(stats);\n  }));\n\n  // Error handling middleware\n  app.use((error: any, req: any, res: any, next: any) => {\n    console.error('API Error:', error);\n    res.status(500).json({ \n      error: 'Internal server error',\n      message: error.message \n    });\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":13506},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, type Report, type InsertReport,\n  type Notice, type InsertNotice, type Visitor, type InsertVisitor,\n  type Occurrence, type InsertOccurrence, type ChecklistItem, type InsertChecklistItem,\n  type Drill, type InsertDrill, type Campaign, type InsertCampaign,\n  type EmergencyAlert, type InsertEmergencyAlert\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  \n  // Reports\n  createReport(report: InsertReport & { reporterId?: string }): Promise<Report>;\n  getReports(): Promise<Report[]>;\n  getReport(id: string): Promise<Report | undefined>;\n  updateReportStatus(id: string, status: string): Promise<Report | undefined>;\n  \n  // Notices\n  createNotice(notice: InsertNotice & { createdBy: string }): Promise<Notice>;\n  getActiveNotices(): Promise<Notice[]>;\n  updateNotice(id: string, updates: Partial<Notice>): Promise<Notice | undefined>;\n  \n  // Visitors\n  createVisitor(visitor: InsertVisitor & { registeredBy: string }): Promise<Visitor>;\n  getActiveVisitors(): Promise<Visitor[]>;\n  getVisitors(): Promise<Visitor[]>;\n  checkOutVisitor(id: string): Promise<Visitor | undefined>;\n  \n  // Occurrences\n  createOccurrence(occurrence: InsertOccurrence & { createdBy: string }): Promise<Occurrence>;\n  getOccurrences(): Promise<Occurrence[]>;\n  \n  // Checklist Items\n  createChecklistItem(item: InsertChecklistItem): Promise<ChecklistItem>;\n  getChecklistItems(): Promise<ChecklistItem[]>;\n  updateChecklistItem(id: string, updates: Partial<ChecklistItem>): Promise<ChecklistItem | undefined>;\n  \n  // Drills\n  createDrill(drill: InsertDrill & { createdBy: string }): Promise<Drill>;\n  getDrills(): Promise<Drill[]>;\n  getUpcomingDrills(): Promise<Drill[]>;\n  \n  // Campaigns\n  createCampaign(campaign: InsertCampaign & { createdBy: string }): Promise<Campaign>;\n  getActiveCampaigns(): Promise<Campaign[]>;\n  updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign | undefined>;\n  \n  // Emergency Alerts\n  createEmergencyAlert(alert: InsertEmergencyAlert & { triggeredBy: string }): Promise<EmergencyAlert>;\n  getActiveEmergencyAlerts(): Promise<EmergencyAlert[]>;\n  resolveEmergencyAlert(id: string, resolvedBy: string): Promise<EmergencyAlert | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private reports: Map<string, Report>;\n  private notices: Map<string, Notice>;\n  private visitors: Map<string, Visitor>;\n  private occurrences: Map<string, Occurrence>;\n  private checklistItems: Map<string, ChecklistItem>;\n  private drills: Map<string, Drill>;\n  private campaigns: Map<string, Campaign>;\n  private emergencyAlerts: Map<string, EmergencyAlert>;\n\n  constructor() {\n    this.users = new Map();\n    this.reports = new Map();\n    this.notices = new Map();\n    this.visitors = new Map();\n    this.occurrences = new Map();\n    this.checklistItems = new Map();\n    this.drills = new Map();\n    this.campaigns = new Map();\n    this.emergencyAlerts = new Map();\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.firebaseUid === firebaseUid);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      role: (insertUser.role as \"student\" | \"staff\" | \"admin\") ?? \"student\",\n      id, \n      isActive: true,\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  // Reports\n  async createReport(reportData: InsertReport & { reporterId?: string }): Promise<Report> {\n    const id = randomUUID();\n    const report: Report = {\n      ...reportData,\n      isAnonymous: reportData.isAnonymous ?? false,\n      id,\n      reporterId: reportData.reporterId || null,\n      status: \"pending\",\n      createdAt: new Date()\n    };\n    this.reports.set(id, report);\n    return report;\n  }\n\n  async getReports(): Promise<Report[]> {\n    return Array.from(this.reports.values());\n  }\n\n  async getReport(id: string): Promise<Report | undefined> {\n    return this.reports.get(id);\n  }\n\n  async updateReportStatus(id: string, status: string): Promise<Report | undefined> {\n    const report = this.reports.get(id);\n    if (!report) return undefined;\n    \n    const updatedReport = { ...report, status };\n    this.reports.set(id, updatedReport);\n    return updatedReport;\n  }\n\n  // Notices\n  async createNotice(noticeData: InsertNotice & { createdBy: string }): Promise<Notice> {\n    const id = randomUUID();\n    const notice: Notice = {\n      ...noticeData,\n      id,\n      isActive: true,\n      createdAt: new Date()\n    };\n    this.notices.set(id, notice);\n    return notice;\n  }\n\n  async getActiveNotices(): Promise<Notice[]> {\n    return Array.from(this.notices.values()).filter(notice => notice.isActive);\n  }\n\n  async updateNotice(id: string, updates: Partial<Notice>): Promise<Notice | undefined> {\n    const notice = this.notices.get(id);\n    if (!notice) return undefined;\n    \n    const updatedNotice = { ...notice, ...updates };\n    this.notices.set(id, updatedNotice);\n    return updatedNotice;\n  }\n\n  // Visitors\n  async createVisitor(visitorData: InsertVisitor & { registeredBy: string }): Promise<Visitor> {\n    const id = randomUUID();\n    const visitor: Visitor = {\n      ...visitorData,\n      id,\n      entryTime: new Date(),\n      exitTime: null\n    };\n    this.visitors.set(id, visitor);\n    return visitor;\n  }\n\n  async getActiveVisitors(): Promise<Visitor[]> {\n    return Array.from(this.visitors.values()).filter(visitor => !visitor.exitTime);\n  }\n\n  async getVisitors(): Promise<Visitor[]> {\n    return Array.from(this.visitors.values());\n  }\n\n  async checkOutVisitor(id: string): Promise<Visitor | undefined> {\n    const visitor = this.visitors.get(id);\n    if (!visitor) return undefined;\n    \n    const updatedVisitor = { ...visitor, exitTime: new Date() };\n    this.visitors.set(id, updatedVisitor);\n    return updatedVisitor;\n  }\n\n  // Occurrences\n  async createOccurrence(occurrenceData: InsertOccurrence & { createdBy: string }): Promise<Occurrence> {\n    const id = randomUUID();\n    const occurrence: Occurrence = {\n      ...occurrenceData,\n      severity: occurrenceData.severity ?? \"medium\",\n      id,\n      createdAt: new Date()\n    };\n    this.occurrences.set(id, occurrence);\n    return occurrence;\n  }\n\n  async getOccurrences(): Promise<Occurrence[]> {\n    return Array.from(this.occurrences.values());\n  }\n\n  // Checklist Items\n  async createChecklistItem(itemData: InsertChecklistItem): Promise<ChecklistItem> {\n    const id = randomUUID();\n    const item: ChecklistItem = {\n      ...itemData,\n      description: itemData.description ?? null,\n      id,\n      isCompleted: false,\n      completedBy: null,\n      completedAt: null,\n      createdAt: new Date()\n    };\n    this.checklistItems.set(id, item);\n    return item;\n  }\n\n  async getChecklistItems(): Promise<ChecklistItem[]> {\n    return Array.from(this.checklistItems.values());\n  }\n\n  async updateChecklistItem(id: string, updates: Partial<ChecklistItem>): Promise<ChecklistItem | undefined> {\n    const item = this.checklistItems.get(id);\n    if (!item) return undefined;\n    \n    const updatedItem = { ...item, ...updates };\n    this.checklistItems.set(id, updatedItem);\n    return updatedItem;\n  }\n\n  // Drills\n  async createDrill(drillData: InsertDrill & { createdBy: string }): Promise<Drill> {\n    const id = randomUUID();\n    const drill: Drill = {\n      ...drillData,\n      type: drillData.type ?? \"evacuation\",\n      description: drillData.description ?? null,\n      id,\n      createdAt: new Date()\n    };\n    this.drills.set(id, drill);\n    return drill;\n  }\n\n  async getDrills(): Promise<Drill[]> {\n    return Array.from(this.drills.values());\n  }\n\n  async getUpcomingDrills(): Promise<Drill[]> {\n    const now = new Date();\n    return Array.from(this.drills.values()).filter(drill => drill.scheduledDate > now);\n  }\n\n  // Campaigns\n  async createCampaign(campaignData: InsertCampaign & { createdBy: string }): Promise<Campaign> {\n    const id = randomUUID();\n    const campaign: Campaign = {\n      ...campaignData,\n      id,\n      isActive: true,\n      createdAt: new Date()\n    };\n    this.campaigns.set(id, campaign);\n    return campaign;\n  }\n\n  async getActiveCampaigns(): Promise<Campaign[]> {\n    return Array.from(this.campaigns.values()).filter(campaign => campaign.isActive);\n  }\n\n  async updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign | undefined> {\n    const campaign = this.campaigns.get(id);\n    if (!campaign) return undefined;\n    \n    const updatedCampaign = { ...campaign, ...updates };\n    this.campaigns.set(id, updatedCampaign);\n    return updatedCampaign;\n  }\n\n  // Emergency Alerts\n  async createEmergencyAlert(alertData: InsertEmergencyAlert & { triggeredBy: string }): Promise<EmergencyAlert> {\n    const id = randomUUID();\n    const alert: EmergencyAlert = {\n      ...alertData,\n      location: alertData.location ?? null,\n      id,\n      isResolved: false,\n      resolvedBy: null,\n      resolvedAt: null,\n      createdAt: new Date()\n    };\n    this.emergencyAlerts.set(id, alert);\n    return alert;\n  }\n\n  async getActiveEmergencyAlerts(): Promise<EmergencyAlert[]> {\n    return Array.from(this.emergencyAlerts.values()).filter(alert => !alert.isResolved);\n  }\n\n  async resolveEmergencyAlert(id: string, resolvedBy: string): Promise<EmergencyAlert | undefined> {\n    const alert = this.emergencyAlerts.get(id);\n    if (!alert) return undefined;\n    \n    const updatedAlert = { \n      ...alert, \n      isResolved: true, \n      resolvedBy, \n      resolvedAt: new Date() \n    };\n    this.emergencyAlerts.set(id, updatedAlert);\n    return updatedAlert;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":10769},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table with role-based access control\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  firebaseUid: text(\"firebase_uid\").notNull().unique(),\n  role: text(\"role\").$type<\"student\" | \"staff\" | \"admin\">().notNull().default(\"student\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Reports/Incidents table\nexport const reports = pgTable(\"reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // 'bullying', 'fight', 'theft', 'vandalism', 'other'\n  description: text(\"description\").notNull(),\n  isAnonymous: boolean(\"is_anonymous\").notNull().default(false),\n  reporterId: varchar(\"reporter_id\").references(() => users.id),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, reviewed, resolved\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Urgent notices table\nexport const notices = pgTable(\"notices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Visitors table\nexport const visitors = pgTable(\"visitors\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  document: text(\"document\").notNull(),\n  purpose: text(\"purpose\").notNull(),\n  entryTime: timestamp(\"entry_time\").defaultNow().notNull(),\n  exitTime: timestamp(\"exit_time\"),\n  registeredBy: varchar(\"registered_by\").references(() => users.id).notNull(),\n});\n\n// Occurrences table\nexport const occurrences = pgTable(\"occurrences\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  severity: text(\"severity\").notNull().default(\"medium\"), // low, medium, high\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Safety checklist items\nexport const checklistItems = pgTable(\"checklist_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  isCompleted: boolean(\"is_completed\").notNull().default(false),\n  completedBy: varchar(\"completed_by\").references(() => users.id),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Emergency drills calendar\nexport const drills = pgTable(\"drills\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  scheduledDate: timestamp(\"scheduled_date\").notNull(),\n  type: text(\"type\").notNull().default(\"evacuation\"), // evacuation, fire, earthquake, etc\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Educational campaigns\nexport const campaigns = pgTable(\"campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  category: text(\"category\").notNull(), // digital_safety, traffic_education, general\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Emergency alerts\nexport const emergencyAlerts = pgTable(\"emergency_alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  message: text(\"message\").notNull(),\n  location: text(\"location\"),\n  triggeredBy: varchar(\"triggered_by\").references(() => users.id).notNull(),\n  isResolved: boolean(\"is_resolved\").notNull().default(false),\n  resolvedBy: varchar(\"resolved_by\").references(() => users.id),\n  resolvedAt: timestamp(\"resolved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Zod schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  name: true,\n  email: true,\n  firebaseUid: true,\n  role: true,\n});\n\nexport const insertReportSchema = createInsertSchema(reports).pick({\n  type: true,\n  description: true,\n  isAnonymous: true,\n});\n\nexport const insertNoticeSchema = createInsertSchema(notices).pick({\n  title: true,\n  message: true,\n});\n\nexport const insertVisitorSchema = createInsertSchema(visitors).pick({\n  name: true,\n  document: true,\n  purpose: true,\n});\n\nexport const insertOccurrenceSchema = createInsertSchema(occurrences).pick({\n  title: true,\n  description: true,\n  severity: true,\n});\n\nexport const insertChecklistItemSchema = createInsertSchema(checklistItems).pick({\n  title: true,\n  description: true,\n});\n\nexport const insertDrillSchema = createInsertSchema(drills).pick({\n  title: true,\n  description: true,\n  scheduledDate: true,\n  type: true,\n}).extend({\n  scheduledDate: z.coerce.date(),\n});\n\nexport const insertCampaignSchema = createInsertSchema(campaigns).pick({\n  title: true,\n  content: true,\n  category: true,\n});\n\nexport const insertEmergencyAlertSchema = createInsertSchema(emergencyAlerts).pick({\n  message: true,\n  location: true,\n});\n\n// Update schemas for PATCH operations\nexport const updateUserSchema = insertUserSchema.partial();\nexport const updateNoticeSchema = insertNoticeSchema.partial();\nexport const updateCampaignSchema = insertCampaignSchema.partial();\nexport const updateChecklistItemSchema = insertChecklistItemSchema.partial().extend({\n  isCompleted: z.boolean().optional(),\n});\n\n// Report status update schema\nexport const reportStatusSchema = z.object({\n  status: z.enum([\"pending\", \"reviewed\", \"resolved\"]),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Report = typeof reports.$inferSelect;\nexport type InsertReport = z.infer<typeof insertReportSchema>;\nexport type Notice = typeof notices.$inferSelect;\nexport type InsertNotice = z.infer<typeof insertNoticeSchema>;\nexport type Visitor = typeof visitors.$inferSelect;\nexport type InsertVisitor = z.infer<typeof insertVisitorSchema>;\nexport type Occurrence = typeof occurrences.$inferSelect;\nexport type InsertOccurrence = z.infer<typeof insertOccurrenceSchema>;\nexport type ChecklistItem = typeof checklistItems.$inferSelect;\nexport type InsertChecklistItem = z.infer<typeof insertChecklistItemSchema>;\nexport type Drill = typeof drills.$inferSelect;\nexport type InsertDrill = z.infer<typeof insertDrillSchema>;\nexport type Campaign = typeof campaigns.$inferSelect;\nexport type InsertCampaign = z.infer<typeof insertCampaignSchema>;\nexport type EmergencyAlert = typeof emergencyAlerts.$inferSelect;\nexport type InsertEmergencyAlert = z.infer<typeof insertEmergencyAlertSchema>;\n\n// User roles enum\nexport const USER_ROLES = {\n  STUDENT: \"student\" as const,\n  STAFF: \"staff\" as const,\n  ADMIN: \"admin\" as const,\n} as const;\n\nexport type UserRole = typeof USER_ROLES[keyof typeof USER_ROLES];\n","size_bytes":7502},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/contexts/AuthContext\";\nimport DashboardLayout from \"@/components/dashboard/DashboardLayout\";\nimport AuthPage from \"@/pages/AuthPage\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport ReportsPage from \"@/pages/ReportsPage\";\nimport UsersPage from \"@/pages/UsersPage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, isLoading } = useAuth();\n  \n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Carregando...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  if (!isAuthenticated) {\n    return <AuthPage />;\n  }\n  \n  return <DashboardLayout>{children}</DashboardLayout>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={() => (\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      )} />\n      \n      <Route path=\"/reports\" component={() => (\n        <ProtectedRoute>\n          <ReportsPage />\n        </ProtectedRoute>\n      )} />\n      \n      <Route path=\"/users\" component={() => (\n        <ProtectedRoute>\n          <UsersPage />\n        </ProtectedRoute>\n      )} />\n      \n      {/* TODO: Add other protected routes */}\n      \n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2083},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 14% 96%;\n\n  --foreground: 220 9% 20%;\n\n  --border: 220 13% 88%;\n\n  --card: 220 14% 94%;\n\n  --card-foreground: 220 9% 20%;\n\n  --card-border: 220 13% 86%;\n\n  --sidebar: 220 14% 92%;\n\n  --sidebar-foreground: 220 9% 20%;\n\n  --sidebar-border: 220 13% 84%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 14% 88%;\n\n  --sidebar-accent-foreground: 220 9% 30%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 220 14% 90%;\n\n  --popover-foreground: 220 9% 20%;\n\n  --popover-border: 220 13% 82%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 14% 86%;\n\n  --secondary-foreground: 220 9% 25%;\n\n  --muted: 220 13% 88%;\n\n  --muted-foreground: 220 9% 46%;\n\n  --accent: 220 12% 90%;\n\n  --accent-foreground: 220 9% 25%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 13% 78%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 45%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 0 84% 50%;\n  --chart-5: 280 65% 55%;\n\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 13% 18% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 13% 18% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 13% 18% / 0.00), 0px 1px 2px -1px hsl(220 13% 18% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 13% 18% / 0.00), 0px 1px 2px -1px hsl(220 13% 18% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 13% 18% / 0.00), 0px 2px 4px -1px hsl(220 13% 18% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 13% 18% / 0.00), 0px 4px 6px -1px hsl(220 13% 18% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 13% 18% / 0.00), 0px 8px 10px -1px hsl(220 13% 18% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 13% 18% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 13% 18%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 220 13% 26%;\n\n  --card: 220 13% 20%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 220 13% 28%;\n\n  --sidebar: 220 13% 16%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 220 13% 24%;\n\n  --sidebar-primary: 217 91% 65%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 13% 22%;\n\n  --sidebar-accent-foreground: 0 0% 85%;\n\n  --sidebar-ring: 217 91% 65%;\n\n  --popover: 220 13% 24%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 220 13% 32%;\n\n  --primary: 217 91% 65%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 13% 28%;\n\n  --secondary-foreground: 0 0% 85%;\n\n  --muted: 220 13% 22%;\n\n  --muted-foreground: 0 0% 65%;\n\n  --accent: 220 12% 26%;\n\n  --accent-foreground: 0 0% 85%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 220 13% 35%;\n  --ring: 217 91% 65%;\n  --chart-1: 217 91% 70%;\n  --chart-2: 142 76% 60%;\n  --chart-3: 38 92% 65%;\n  --chart-4: 0 84% 70%;\n  --chart-5: 280 65% 75%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 13% 8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 13% 8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 13% 8% / 0.00), 0px 1px 2px -1px hsl(220 13% 8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 13% 8% / 0.00), 0px 1px 2px -1px hsl(220 13% 8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 13% 8% / 0.00), 0px 2px 4px -1px hsl(220 13% 8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 13% 8% / 0.00), 0px 4px 6px -1px hsl(220 13% 8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 13% 8% / 0.00), 0px 8px 10px -1px hsl(220 13% 8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 13% 8% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10000},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\nimport { User as FirebaseUser } from 'firebase/auth';\nimport { \n  onAuthStateChange, \n  getUserDocument, \n  createUserDocument,\n  requestNotificationPermission \n} from '@/lib/firebase';\nimport { USER_ROLES, type UserRole } from '@shared/schema';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: UserRole;\n  isActive: boolean;\n  firebaseUser: FirebaseUser;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  hasPermission: (requiredRole: UserRole | UserRole[]) => boolean;\n  initializeUser: (firebaseUser: FirebaseUser, userData: {\n    name: string;\n    role: UserRole;\n  }) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nconst ROLE_HIERARCHY: Record<UserRole, number> = {\n  [USER_ROLES.STUDENT]: 1,\n  [USER_ROLES.STAFF]: 2,\n  [USER_ROLES.ADMIN]: 3,\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChange(async (firebaseUser) => {\n      setIsLoading(true);\n      \n      if (firebaseUser) {\n        try {\n          const userDoc = await getUserDocument(firebaseUser.uid);\n          \n          if (userDoc && (userDoc as any).isActive) {\n            setUser({\n              id: firebaseUser.uid,\n              name: (userDoc as any).name,\n              email: (userDoc as any).email,\n              role: (userDoc as any).role,\n              isActive: (userDoc as any).isActive,\n              firebaseUser,\n            });\n            \n            // Request notification permission for authenticated users\n            await requestNotificationPermission();\n          } else if (userDoc && !(userDoc as any).isActive) {\n            // User is banned\n            console.warn('User account is deactivated');\n            setUser(null);\n          } else {\n            // User document doesn't exist - this shouldn't happen in normal flow\n            setUser(null);\n          }\n        } catch (error) {\n          console.error('Error fetching user document:', error);\n          setUser(null);\n        }\n      } else {\n        setUser(null);\n      }\n      \n      setIsLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const initializeUser = async (\n    firebaseUser: FirebaseUser, \n    userData: { name: string; role: UserRole }\n  ) => {\n    try {\n      // Security: Force all new users to be students\n      // Administrators can promote users later through admin panel\n      await createUserDocument(firebaseUser.uid, {\n        name: userData.name,\n        email: firebaseUser.email!,\n        role: 'student' as UserRole, // Always create as student\n        isActive: true,\n      });\n      \n      const userDoc = await getUserDocument(firebaseUser.uid);\n      if (userDoc) {\n        setUser({\n          id: firebaseUser.uid,\n          name: (userDoc as any).name,\n          email: (userDoc as any).email,\n          role: (userDoc as any).role,\n          isActive: (userDoc as any).isActive,\n          firebaseUser,\n        });\n      }\n    } catch (error) {\n      console.error('Error initializing user:', error);\n      throw error;\n    }\n  };\n\n  const hasPermission = (requiredRole: UserRole | UserRole[]): boolean => {\n    if (!user || !user.isActive) return false;\n    \n    const userRoleLevel = ROLE_HIERARCHY[user.role];\n    \n    if (Array.isArray(requiredRole)) {\n      return requiredRole.some(role => userRoleLevel >= ROLE_HIERARCHY[role]);\n    }\n    \n    return userRoleLevel >= ROLE_HIERARCHY[requiredRole];\n  };\n\n  const value: AuthContextType = {\n    user,\n    isLoading,\n    isAuthenticated: !!user && user.isActive,\n    hasPermission,\n    initializeUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};","size_bytes":4197},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useReports.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { getDocuments, updateDocument } from '@/lib/firebase';\n\nexport interface Report {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  priority: 'low' | 'medium' | 'high';\n  location?: string;\n  isAnonymous: boolean;\n  reporterId?: string;\n  status: 'pending' | 'reviewed' | 'resolved';\n  timestamp: any;\n  createdAt?: any;\n}\n\n// Hook to get user's reports\nexport const useUserReports = () => {\n  const { user } = useAuth();\n  \n  return useQuery({\n    queryKey: ['reports', 'user', user?.id],\n    queryFn: async () => {\n      if (!user) return [];\n      \n      const reports = await getDocuments('reports', [\n        { field: 'reporterId', operator: '==', value: user.id }\n      ], 'timestamp');\n      \n      return reports as Report[];\n    },\n    enabled: !!user,\n  });\n};\n\n// Hook to get all reports (admin only)\nexport const useAllReports = () => {\n  const { user, hasPermission } = useAuth();\n  \n  return useQuery({\n    queryKey: ['reports', 'all'],\n    queryFn: async () => {\n      const reports = await getDocuments('reports', undefined, 'timestamp');\n      return reports as Report[];\n    },\n    enabled: !!user && hasPermission('admin'),\n  });\n};\n\n// Hook to update report status\nexport const useUpdateReportStatus = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ reportId, status }: { reportId: string; status: string }) => {\n      await updateDocument('reports', reportId, { status });\n    },\n    onSuccess: () => {\n      // Invalidate reports queries to refresh data\n      queryClient.invalidateQueries({ queryKey: ['reports'] });\n    },\n  });\n};","size_bytes":1769},"client/src/lib/firebase.ts":{"content":"// Firebase configuration and initialization\n// Based on firebase_barebones_javascript integration\nimport { initializeApp, getApps, getApp } from \"firebase/app\";\nimport { \n  getAuth, \n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n  User as FirebaseUser,\n  updateProfile\n} from \"firebase/auth\";\nimport { \n  getFirestore,\n  doc,\n  setDoc,\n  getDoc,\n  collection,\n  query,\n  where,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  orderBy,\n  serverTimestamp\n} from \"firebase/firestore\";\n// import { getMessaging, getToken, onMessage } from \"firebase/messaging\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase with HMR-safe initialization\nconst app = getApps().length ? getApp() : initializeApp(firebaseConfig);\n\n// Initialize Firebase services\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\n// export const messaging = getMessaging(app); // TODO: Configure messaging later\n\n// Auth functions\nexport const signIn = async (email: string, password: string) => {\n  return await signInWithEmailAndPassword(auth, email, password);\n};\n\nexport const signUp = async (email: string, password: string, name: string) => {\n  const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n  await updateProfile(userCredential.user, { displayName: name });\n  return userCredential;\n};\n\nexport const logout = async () => {\n  return await signOut(auth);\n};\n\n// User data functions\nexport const createUserDocument = async (\n  uid: string, \n  userData: {\n    name: string;\n    email: string;\n    role: \"student\" | \"staff\" | \"admin\";\n    isActive?: boolean;\n  }\n) => {\n  const userDoc = {\n    ...userData,\n    isActive: userData.isActive ?? true,\n    createdAt: serverTimestamp(),\n  };\n  \n  await setDoc(doc(db, \"users\", uid), userDoc);\n  return userDoc;\n};\n\nexport const getUserDocument = async (uid: string) => {\n  const userDoc = await getDoc(doc(db, \"users\", uid));\n  return userDoc.exists() ? { id: userDoc.id, ...userDoc.data() } : null;\n};\n\nexport const updateUserDocument = async (uid: string, data: Partial<any>) => {\n  await updateDoc(doc(db, \"users\", uid), data);\n};\n\n// Auth state observer\nexport const onAuthStateChange = (callback: (user: FirebaseUser | null) => void) => {\n  return onAuthStateChanged(auth, callback);\n};\n\n// User management functions (admin only)\nexport const getAllUsers = async () => {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'users'));\n    const users: any[] = [];\n    querySnapshot.forEach((doc) => {\n      users.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    return users;\n  } catch (error) {\n    console.error('Error getting users:', error);\n    throw error;\n  }\n};\n\nexport const updateUserRole = async (userId: string, newRole: string) => {\n  try {\n    const userRef = doc(db, 'users', userId);\n    await updateDoc(userRef, {\n      role: newRole\n    });\n  } catch (error) {\n    console.error('Error updating user role:', error);\n    throw error;\n  }\n};\n\n// Push notifications - TODO: Implement after configuring Firebase Messaging\nexport const requestNotificationPermission = async () => {\n  console.log('Notification permission not yet configured');\n  return null;\n};\n\nexport const onNotificationMessage = (callback: (payload: any) => void) => {\n  console.log('Notification messaging not yet configured');\n  return () => {};\n};\n\n// Firestore collections helpers\nexport const collections = {\n  users: 'users',\n  reports: 'reports',\n  notices: 'notices',\n  visitors: 'visitors',\n  occurrences: 'occurrences',\n  checklistItems: 'checklistItems',\n  drills: 'drills',\n  campaigns: 'campaigns',\n  emergencyAlerts: 'emergencyAlerts',\n} as const;\n\n// Generic Firestore functions\nexport const addDocument = async (collectionName: string, data: any) => {\n  const docRef = await addDoc(collection(db, collectionName), {\n    ...data,\n    createdAt: serverTimestamp(),\n  });\n  return docRef.id;\n};\n\nexport const getDocuments = async (\n  collectionName: string, \n  conditions?: Array<{ field: string; operator: any; value: any }>,\n  orderByField?: string,\n  orderDirection: 'asc' | 'desc' = 'desc'\n) => {\n  let q = query(collection(db, collectionName));\n  \n  if (conditions) {\n    conditions.forEach(condition => {\n      q = query(q, where(condition.field, condition.operator, condition.value));\n    });\n  }\n  \n  if (orderByField) {\n    q = query(q, orderBy(orderByField, orderDirection));\n  }\n  \n  const querySnapshot = await getDocs(q);\n  const documents: any[] = [];\n  querySnapshot.forEach((doc) => {\n    documents.push({\n      id: doc.id,\n      ...doc.data()\n    });\n  });\n  return documents;\n};\n\nexport const updateDocument = async (collectionName: string, docId: string, data: any) => {\n  const docRef = doc(db, collectionName, docId);\n  await updateDoc(docRef, {\n    ...data,\n    updatedAt: serverTimestamp(),\n  });\n};\n\nexport const deleteDocument = async (collectionName: string, docId: string) => {\n  await deleteDoc(doc(db, collectionName, docId));\n};","size_bytes":5326},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  // Extract headers from data if present\n  const { headers: customHeaders, ...bodyData } = (data as any) || {};\n  \n  const headers: Record<string, string> = {\n    ...(Object.keys(bodyData || {}).length > 0 ? { \"Content-Type\": \"application/json\" } : {}),\n    ...customHeaders,\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: Object.keys(bodyData || {}).length > 0 ? JSON.stringify(bodyData) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1652},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AuthPage.tsx":{"content":"import { useState } from 'react';\nimport LoginForm from '@/components/auth/LoginForm';\nimport RegisterForm from '@/components/auth/RegisterForm';\n\nexport default function AuthPage() {\n  const [isLogin, setIsLogin] = useState(true);\n\n  const handleAuthSuccess = () => {\n    // Navigation will be handled by the auth context\n    console.log('Authentication successful');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/10 via-background to-secondary/10 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {isLogin ? (\n          <LoginForm\n            onSuccess={handleAuthSuccess}\n            onRegisterClick={() => setIsLogin(false)}\n          />\n        ) : (\n          <RegisterForm\n            onSuccess={handleAuthSuccess}\n            onLoginClick={() => setIsLogin(true)}\n          />\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":898},"client/src/pages/Dashboard.tsx":{"content":"import { useAuth } from '@/contexts/AuthContext';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { USER_ROLES } from '@shared/schema';\nimport { \n  AlertTriangle, \n  Shield, \n  Bell, \n  Users, \n  FileText, \n  CheckSquare,\n  Calendar,\n  TrendingUp,\n  Activity,\n  Eye,\n  Phone\n} from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function Dashboard() {\n  const { user, hasPermission } = useAuth();\n\n  // Mock data - TODO: replace with real data from API\n  const mockStats = {\n    totalReports: 12,\n    pendingReports: 3,\n    activeVisitors: 5,\n    completedChecklist: 8,\n    totalChecklistItems: 12,\n    upcomingDrills: 2,\n    activeNotices: 1,\n  };\n\n  const quickActions = [\n    {\n      title: 'Reportar Incidente',\n      description: 'Enviar nova denúncia',\n      icon: AlertTriangle,\n      href: '/reports',\n      variant: 'default' as const,\n      roles: ['student', 'staff', 'admin'],\n    },\n    {\n      title: 'Canal Anti-Bullying',\n      description: 'Relatar anonimamente',\n      icon: Shield,\n      href: '/bullying',\n      variant: 'secondary' as const,\n      roles: ['student', 'staff', 'admin'],\n    },\n    {\n      title: 'Registrar Visitante',\n      description: 'Novo check-in',\n      icon: Users,\n      href: '/visitors',\n      variant: 'outline' as const,\n      roles: ['staff', 'admin'],\n    },\n    {\n      title: 'Adicionar Ocorrência',\n      description: 'Registrar evento',\n      icon: FileText,\n      href: '/occurrences',\n      variant: 'outline' as const,\n      roles: ['staff', 'admin'],\n    },\n  ];\n\n  const filteredQuickActions = quickActions.filter(action =>\n    hasPermission(action.roles as any)\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Welcome Section */}\n      <div>\n        <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-welcome\">\n          Bem-vindo, {user?.name}\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Sistema de Segurança Escolar - {' '}\n          <Badge variant=\"secondary\" className=\"capitalize\">\n            {user?.role === USER_ROLES.ADMIN ? 'Direção' : \n             user?.role === USER_ROLES.STAFF ? 'Funcionário' : 'Aluno'}\n          </Badge>\n        </p>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card data-testid=\"card-total-reports\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total de Relatos</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{mockStats.totalReports}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {mockStats.pendingReports} pendentes\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-active-visitors\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Visitantes Ativos</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{mockStats.activeVisitors}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              no campus agora\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-checklist-progress\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Checklist Segurança</CardTitle>\n            <CheckSquare className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {mockStats.completedChecklist}/{mockStats.totalChecklistItems}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {Math.round((mockStats.completedChecklist / mockStats.totalChecklistItems) * 100)}% completo\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-upcoming-drills\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Próximos Simulados</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{mockStats.upcomingDrills}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              nesta semana\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card data-testid=\"card-quick-actions\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Activity className=\"h-5 w-5\" />\n            Ações Rápidas\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-3 md:grid-cols-2 lg:grid-cols-4\">\n            {filteredQuickActions.map((action) => (\n              <Link key={action.href} href={action.href}>\n                <Button\n                  variant={action.variant}\n                  className=\"h-auto p-4 flex flex-col items-center gap-2 w-full hover-elevate\"\n                  data-testid={`button-${action.title.toLowerCase().replace(/\\\\s+/g, '-')}`}\n                >\n                  <action.icon className=\"h-6 w-6\" />\n                  <div className=\"text-center\">\n                    <div className=\"font-medium text-sm\">{action.title}</div>\n                    <div className=\"text-xs opacity-80\">{action.description}</div>\n                  </div>\n                </Button>\n              </Link>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Activity & Notices */}\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {/* Active Notices */}\n        {mockStats.activeNotices > 0 && (\n          <Card className=\"border-orange-200 dark:border-orange-800\" data-testid=\"card-active-notices\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-orange-700 dark:text-orange-400\">\n                <Bell className=\"h-5 w-5\" />\n                Avisos Urgentes\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {/* Mock notice - TODO: replace with real data */}\n                <div className=\"p-3 bg-orange-50 dark:bg-orange-950/20 rounded-lg\">\n                  <p className=\"text-sm font-medium\">Simulado de evacuação</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Amanhã às 10h - Todos devem participar\n                  </p>\n                </div>\n                <Link href=\"/notices\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                    Ver todos os avisos\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* System Status */}\n        <Card data-testid=\"card-system-status\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Eye className=\"h-5 w-5\" />\n              Status do Sistema\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Câmeras de Vigilância</span>\n                <Badge variant=\"secondary\" className=\"bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200\">\n                  Online\n                </Badge>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Sistema de Notificações</span>\n                <Badge variant=\"secondary\" className=\"bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200\">\n                  Ativo\n                </Badge>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Conexões de Emergência</span>\n                <Badge variant=\"secondary\" className=\"bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200\">\n                  Disponível\n                </Badge>\n              </div>\n              <Link href=\"/contacts\">\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-3\">\n                  <Phone className=\"h-4 w-4 mr-2\" />\n                  Contatos de Emergência\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9035},"client/src/pages/ReportsPage.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useUserReports, useAllReports, useUpdateReportStatus } from '@/hooks/useReports';\nimport ReportForm from '@/components/reports/ReportForm';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowLeft, History, Plus, AlertTriangle, Clock, CheckCircle, XCircle, Lock } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function ReportsPage() {\n  const [activeTab, setActiveTab] = useState('new');\n  const { user, hasPermission } = useAuth();\n  \n  // Fetch reports data\n  const { data: userReports = [], isLoading: userReportsLoading } = useUserReports();\n  const { data: allReports = [], isLoading: allReportsLoading } = useAllReports();\n  const updateReportStatus = useUpdateReportStatus();\n\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"secondary\" className=\"gap-1\"><Clock className=\"h-3 w-3\" />Pendente</Badge>;\n      case 'reviewed':\n        return <Badge variant=\"outline\" className=\"gap-1\"><AlertTriangle className=\"h-3 w-3\" />Analisando</Badge>;\n      case 'resolved':\n        return <Badge variant=\"default\" className=\"gap-1 bg-green-600\"><CheckCircle className=\"h-3 w-3\" />Resolvido</Badge>;\n      default:\n        return <Badge variant=\"destructive\" className=\"gap-1\"><XCircle className=\"h-3 w-3\" />Indefinido</Badge>;\n    }\n  };\n\n  const getTypeLabel = (category: string) => {\n    const types: Record<string, string> = {\n      bullying: 'Bullying',\n      fight: 'Briga/Agressão',\n      theft: 'Furto/Roubo',\n      vandalism: 'Vandalismo',\n      drugs: 'Drogas',\n      weapons: 'Armas',\n      other: 'Outros',\n    };\n    return types[category] || category;\n  };\n\n  const formatDate = (timestamp: any) => {\n    if (!timestamp) return 'Data não disponível';\n    \n    // Handle Firestore timestamp\n    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);\n    \n    return new Intl.DateTimeFormat('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(date);\n  };\n\n  const handleReportSuccess = () => {\n    setActiveTab('history');\n  };\n  \n  const handleStatusUpdate = async (reportId: string, newStatus: string) => {\n    try {\n      await updateReportStatus.mutateAsync({ reportId, status: newStatus });\n    } catch (error) {\n      console.error('Error updating report status:', error);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Voltar\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold\">Sistema de Denúncias</h1>\n            <p className=\"text-muted-foreground\">\n              Reporte incidentes e acompanhe o status das suas denúncias\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"new\" className=\"gap-2\" data-testid=\"tab-new-report\">\n            <Plus className=\"h-4 w-4\" />\n            Nova Denúncia\n          </TabsTrigger>\n          <TabsTrigger value=\"history\" className=\"gap-2\" data-testid=\"tab-my-reports\">\n            <History className=\"h-4 w-4\" />\n            Minhas Denúncias\n          </TabsTrigger>\n          {hasPermission(['admin']) && (\n            <TabsTrigger value=\"all\" className=\"gap-2\" data-testid=\"tab-all-reports\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              Todas as Denúncias\n            </TabsTrigger>\n          )}\n        </TabsList>\n\n        <TabsContent value=\"new\" className=\"mt-6\">\n          <ReportForm onSuccess={handleReportSuccess} />\n        </TabsContent>\n\n        <TabsContent value=\"history\" className=\"mt-6\">\n          <Card data-testid=\"card-my-reports\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <History className=\"h-5 w-5\" />\n                Minhas Denúncias\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {userReportsLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                  <p>Carregando suas denúncias...</p>\n                </div>\n              ) : userReports.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <AlertTriangle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">Nenhuma denúncia encontrada</h3>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Você ainda não fez nenhuma denúncia.\n                  </p>\n                  <Button onClick={() => setActiveTab('new')} data-testid=\"button-create-first-report\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Fazer Primeira Denúncia\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {userReports.map((report) => (\n                    <div\n                      key={report.id}\n                      className=\"p-4 border rounded-lg hover-elevate\"\n                      data-testid={`report-item-${report.id}`}\n                    >\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex items-center gap-3\">\n                          <Badge variant=\"outline\">{getTypeLabel(report.category)}</Badge>\n                          {getStatusBadge(report.status)}\n                          {report.isAnonymous && (\n                            <Badge variant=\"secondary\" className=\"gap-1\">\n                              <Lock className=\"h-3 w-3\" />\n                              Anônimo\n                            </Badge>\n                          )}\n                        </div>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {formatDate(report.timestamp)}\n                        </span>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <h4 className=\"text-sm font-medium\">{report.title}</h4>\n                        <p className=\"text-sm text-muted-foreground line-clamp-2\">{report.description}</p>\n                        {report.location && (\n                          <p className=\"text-xs text-muted-foreground\">\n                            📍 {report.location}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {hasPermission(['admin']) && (\n          <TabsContent value=\"all\" className=\"mt-6\">\n            <Card data-testid=\"card-all-reports\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"h-5 w-5\" />\n                  Todas as Denúncias\n                  <Badge variant=\"secondary\">{allReports.length}</Badge>\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Painel administrativo para acompanhar todas as denúncias da escola\n                </p>\n              </CardHeader>\n              <CardContent>\n                {allReportsLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                    <p>Carregando todas as denúncias...</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {allReports.map((report) => (\n                    <div\n                      key={report.id}\n                      className=\"p-4 border rounded-lg hover-elevate\"\n                      data-testid={`admin-report-item-${report.id}`}\n                    >\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex items-center gap-3\">\n                          <Badge variant=\"outline\">{getTypeLabel(report.category)}</Badge>\n                          {getStatusBadge(report.status)}\n                          {report.isAnonymous && (\n                            <Badge variant=\"secondary\" className=\"gap-1\">\n                              <Lock className=\"h-3 w-3\" />\n                              Anônimo\n                            </Badge>\n                          )}\n                        </div>\n                        <div className=\"text-right text-xs text-muted-foreground\">\n                          <div>{formatDate(report.timestamp)}</div>\n                          <div className=\"mt-1\">\n                            {report.isAnonymous ? 'Anônimo' : 'Usuário identificado'}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <h4 className=\"text-sm font-medium\">{report.title}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{report.description}</p>\n                        {report.location && (\n                          <p className=\"text-xs text-muted-foreground\">\n                            📍 {report.location}\n                          </p>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex gap-2 mt-3\">\n                        <Button size=\"sm\" variant=\"outline\" data-testid={`button-view-${report.id}`}>\n                          Ver Detalhes\n                        </Button>\n                        {report.status === 'pending' && (\n                          <Button \n                            size=\"sm\" \n                            data-testid={`button-review-${report.id}`}\n                            onClick={() => handleStatusUpdate(report.id, 'reviewed')}\n                            disabled={updateReportStatus.isPending}\n                          >\n                            Marcar como Analisado\n                          </Button>\n                        )}\n                        {report.status === 'reviewed' && (\n                          <Button \n                            size=\"sm\" \n                            variant=\"default\" \n                            data-testid={`button-resolve-${report.id}`}\n                            onClick={() => handleStatusUpdate(report.id, 'resolved')}\n                            disabled={updateReportStatus.isPending}\n                          >\n                            Marcar como Resolvido\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        )}\n      </Tabs>\n    </div>\n  );\n}","size_bytes":11743},"client/src/pages/UsersPage.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { getAllUsers, updateUserRole } from '@/lib/firebase';\nimport { USER_ROLES, type UserRole } from '@shared/schema';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport { Users, Shield, UserCheck, UserX } from 'lucide-react';\n\ninterface UserData {\n  id: string;\n  name: string;\n  email: string;\n  role: UserRole;\n  isActive: boolean;\n}\n\nexport default function UsersPage() {\n  const { user, hasPermission } = useAuth();\n  const { toast } = useToast();\n  const [users, setUsers] = useState<UserData[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Check if user has admin permissions\n  if (!user || !hasPermission('admin')) {\n    return (\n      <div className=\"p-6\">\n        <Alert variant=\"destructive\">\n          <Shield className=\"h-4 w-4\" />\n          <AlertDescription>\n            Acesso negado. Apenas administradores podem ver esta página.\n          </AlertDescription>\n        </Alert>\n      </div>\n    );\n  }\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadUsers = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const usersData = await getAllUsers();\n      setUsers(usersData);\n    } catch (error) {\n      console.error('Error loading users:', error);\n      setError('Erro ao carregar usuários');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRoleChange = async (userId: string, newRole: UserRole) => {\n    try {\n      await updateUserRole(userId, newRole);\n      toast({\n        title: 'Sucesso',\n        description: 'Papel do usuário atualizado com sucesso.',\n      });\n      await loadUsers(); // Reload users\n    } catch (error) {\n      console.error('Error updating user role:', error);\n      toast({\n        title: 'Erro',\n        description: 'Erro ao atualizar papel do usuário.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleToggleActive = async (userId: string, isActive: boolean) => {\n    try {\n      // TODO: Implement toggle active status\n      console.log('Toggle active status for user:', userId, isActive);\n      toast({\n        title: 'Info',\n        description: 'Funcionalidade em desenvolvimento.',\n      });\n    } catch (error) {\n      console.error('Error toggling user active status:', error);\n      toast({\n        title: 'Erro',\n        description: 'Erro ao alterar status do usuário.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const getRoleBadgeVariant = (role: UserRole) => {\n    switch (role) {\n      case 'admin':\n        return 'destructive';\n      case 'staff':\n        return 'default';\n      case 'student':\n        return 'secondary';\n      default:\n        return 'secondary';\n    }\n  };\n\n  const getRoleLabel = (role: UserRole) => {\n    switch (role) {\n      case 'admin':\n        return 'Direção';\n      case 'staff':\n        return 'Funcionário';\n      case 'student':\n        return 'Aluno';\n      default:\n        return role;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center\">\n          <p>Carregando usuários...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center gap-3\">\n        <Users className=\"h-8 w-8 text-primary\" />\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"title-users\">\n            Gerenciamento de Usuários\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Gerencie papéis e permissões dos usuários do sistema\n          </p>\n        </div>\n      </div>\n\n      {error && (\n        <Alert variant=\"destructive\" data-testid=\"alert-error\">\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"grid gap-4\">\n        {users.map((userData) => (\n          <Card key={userData.id} data-testid={`card-user-${userData.id}`}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <h3 className=\"font-semibold\" data-testid={`text-name-${userData.id}`}>\n                        {userData.name}\n                      </h3>\n                      <Badge \n                        variant={getRoleBadgeVariant(userData.role)}\n                        data-testid={`badge-role-${userData.id}`}\n                      >\n                        {getRoleLabel(userData.role)}\n                      </Badge>\n                      {userData.isActive ? (\n                        <Badge variant=\"outline\" className=\"text-green-600\">\n                          <UserCheck className=\"h-3 w-3 mr-1\" />\n                          Ativo\n                        </Badge>\n                      ) : (\n                        <Badge variant=\"outline\" className=\"text-red-600\">\n                          <UserX className=\"h-3 w-3 mr-1\" />\n                          Inativo\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\" data-testid={`text-email-${userData.id}`}>\n                      {userData.email}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <label className=\"text-sm font-medium\">Papel:</label>\n                    <Select\n                      value={userData.role}\n                      onValueChange={(value) => handleRoleChange(userData.id, value as UserRole)}\n                      data-testid={`select-role-${userData.id}`}\n                    >\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"student\">Aluno</SelectItem>\n                        <SelectItem value=\"staff\">Funcionário</SelectItem>\n                        <SelectItem value=\"admin\">Direção</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Button\n                    variant={userData.isActive ? \"outline\" : \"default\"}\n                    size=\"sm\"\n                    onClick={() => handleToggleActive(userData.id, !userData.isActive)}\n                    data-testid={`button-toggle-active-${userData.id}`}\n                  >\n                    {userData.isActive ? (\n                      <>\n                        <UserX className=\"h-4 w-4 mr-2\" />\n                        Desativar\n                      </>\n                    ) : (\n                      <>\n                        <UserCheck className=\"h-4 w-4 mr-2\" />\n                        Ativar\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {users.length === 0 && !isLoading && (\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">Nenhum usuário encontrado.</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":7932},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/auth/LoginForm.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { signIn } from '@/lib/firebase';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Eye, EyeOff, Shield } from 'lucide-react';\n\nconst loginSchema = z.object({\n  email: z.string().email('Email inválido'),\n  password: z.string().min(6, 'Senha deve ter pelo menos 6 caracteres'),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\ninterface LoginFormProps {\n  onSuccess?: () => void;\n  onRegisterClick?: () => void;\n}\n\nexport default function LoginForm({ onSuccess, onRegisterClick }: LoginFormProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      await signIn(data.email, data.password);\n      onSuccess?.();\n    } catch (error: any) {\n      console.error('Login error:', error);\n      \n      // Handle specific Firebase auth errors\n      let errorMessage = 'Erro ao fazer login. Tente novamente.';\n      \n      if (error.code === 'auth/user-not-found') {\n        errorMessage = 'Usuário não encontrado.';\n      } else if (error.code === 'auth/wrong-password') {\n        errorMessage = 'Senha incorreta.';\n      } else if (error.code === 'auth/invalid-email') {\n        errorMessage = 'Email inválido.';\n      } else if (error.code === 'auth/too-many-requests') {\n        errorMessage = 'Muitas tentativas. Tente novamente mais tarde.';\n      }\n      \n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\" data-testid=\"card-login\">\n      <CardHeader className=\"space-y-1 text-center\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"p-3 bg-primary/10 rounded-full\">\n            <Shield className=\"h-8 w-8 text-primary\" />\n          </div>\n        </div>\n        <CardTitle className=\"text-2xl font-bold\">Escola Segura</CardTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          Entre na sua conta para acessar o sistema\n        </p>\n      </CardHeader>\n      \n      <CardContent>\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-4\" data-testid=\"alert-error\">\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        \n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"seu.email@escola.com\"\n              data-testid=\"input-email\"\n              {...register('email')}\n            />\n            {errors.email && (\n              <p className=\"text-sm text-destructive\" data-testid=\"error-email\">\n                {errors.email.message}\n              </p>\n            )}\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Senha</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                placeholder=\"••••••••\"\n                data-testid=\"input-password\"\n                {...register('password')}\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8\"\n                onClick={() => setShowPassword(!showPassword)}\n                data-testid=\"button-toggle-password\"\n              >\n                {showPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            {errors.password && (\n              <p className=\"text-sm text-destructive\" data-testid=\"error-password\">\n                {errors.password.message}\n              </p>\n            )}\n          </div>\n          \n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={isLoading}\n            data-testid=\"button-login\"\n          >\n            {isLoading ? 'Entrando...' : 'Entrar'}\n          </Button>\n        </form>\n        \n        {onRegisterClick && (\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Não tem conta?{' '}\n              <button\n                type=\"button\"\n                className=\"text-primary hover:underline font-normal\"\n                onClick={onRegisterClick}\n                data-testid=\"button-register-link\"\n              >\n                Cadastre-se aqui\n              </button>\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5453},"client/src/components/auth/RegisterForm.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { signUp } from '@/lib/firebase';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { USER_ROLES, type UserRole } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Eye, EyeOff, UserPlus } from 'lucide-react';\n\nconst registerSchema = z.object({\n  name: z.string().min(2, 'Nome deve ter pelo menos 2 caracteres'),\n  email: z.string().email('Email inválido'),\n  password: z.string().min(6, 'Senha deve ter pelo menos 6 caracteres'),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: 'Senhas não coincidem',\n  path: ['confirmPassword'],\n});\n\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\ninterface RegisterFormProps {\n  onSuccess?: () => void;\n  onLoginClick?: () => void;\n}\n\nexport default function RegisterForm({ onSuccess, onLoginClick }: RegisterFormProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const { initializeUser } = useAuth();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n  });\n\n\n  const onSubmit = async (data: RegisterFormData) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const userCredential = await signUp(data.email, data.password, data.name);\n      \n      // Initialize user document in Firestore with default student role\n      // Administrators can promote users later through admin panel\n      await initializeUser(userCredential.user, {\n        name: data.name,\n        role: 'student' as UserRole,\n      });\n      \n      onSuccess?.();\n    } catch (error: any) {\n      console.error('Register error:', error);\n      \n      // Handle specific Firebase auth errors\n      let errorMessage = 'Erro ao criar conta. Tente novamente.';\n      \n      if (error.code === 'auth/email-already-in-use') {\n        errorMessage = 'Este email já está em uso.';\n      } else if (error.code === 'auth/invalid-email') {\n        errorMessage = 'Email inválido.';\n      } else if (error.code === 'auth/weak-password') {\n        errorMessage = 'Senha muito fraca. Use pelo menos 6 caracteres.';\n      }\n      \n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getRoleDescription = (role: string) => {\n    switch (role) {\n      case 'student':\n        return 'Aluno - Pode reportar incidents e ver informações de segurança';\n      case 'staff':\n        return 'Funcionário - Acesso completo a registros e gerenciamento';\n      case 'admin':\n        return 'Direção - Acesso total incluindo administração de usuários';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\" data-testid=\"card-register\">\n      <CardHeader className=\"space-y-1 text-center\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"p-3 bg-primary/10 rounded-full\">\n            <UserPlus className=\"h-8 w-8 text-primary\" />\n          </div>\n        </div>\n        <CardTitle className=\"text-2xl font-bold\">Criar Conta</CardTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          Cadastre-se no sistema de segurança escolar\n        </p>\n      </CardHeader>\n      \n      <CardContent>\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-4\" data-testid=\"alert-error\">\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        \n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">Nome Completo</Label>\n            <Input\n              id=\"name\"\n              type=\"text\"\n              placeholder=\"Seu nome completo\"\n              data-testid=\"input-name\"\n              {...register('name')}\n            />\n            {errors.name && (\n              <p className=\"text-sm text-destructive\" data-testid=\"error-name\">\n                {errors.name.message}\n              </p>\n            )}\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"seu.email@escola.com\"\n              data-testid=\"input-email\"\n              {...register('email')}\n            />\n            {errors.email && (\n              <p className=\"text-sm text-destructive\" data-testid=\"error-email\">\n                {errors.email.message}\n              </p>\n            )}\n          </div>\n          \n          {/* Security Notice: All new users are registered as students by default.\n              Administrators can promote users through the admin panel. */}\n          <div className=\"p-3 bg-blue-50 dark:bg-blue-950/20 rounded-md border border-blue-200 dark:border-blue-800\">\n            <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n              <strong>Tipo de Usuário:</strong> Aluno<br />\n              <span className=\"text-xs\">Todos os novos usuários são registrados como alunos. Para acesso de funcionário ou administrador, entre em contato com a direção.</span>\n            </p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Senha</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                placeholder=\"••••••••\"\n                data-testid=\"input-password\"\n                {...register('password')}\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8\"\n                onClick={() => setShowPassword(!showPassword)}\n                data-testid=\"button-toggle-password\"\n              >\n                {showPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            {errors.password && (\n              <p className=\"text-sm text-destructive\" data-testid=\"error-password\">\n                {errors.password.message}\n              </p>\n            )}\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirmPassword\">Confirmar Senha</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"confirmPassword\"\n                type={showConfirmPassword ? 'text' : 'password'}\n                placeholder=\"••••••••\"\n                data-testid=\"input-confirm-password\"\n                {...register('confirmPassword')}\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                data-testid=\"button-toggle-confirm-password\"\n              >\n                {showConfirmPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            {errors.confirmPassword && (\n              <p className=\"text-sm text-destructive\" data-testid=\"error-confirm-password\">\n                {errors.confirmPassword.message}\n              </p>\n            )}\n          </div>\n          \n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={isLoading}\n            data-testid=\"button-register\"\n          >\n            {isLoading ? 'Criando conta...' : 'Criar Conta'}\n          </Button>\n        </form>\n        \n        {onLoginClick && (\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Já tem conta?{' '}\n              <button\n                type=\"button\"\n                className=\"text-primary hover:underline font-normal\"\n                onClick={onLoginClick}\n                data-testid=\"button-login-link\"\n              >\n                Entre aqui\n              </button>\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9068},"client/src/components/dashboard/DashboardLayout.tsx":{"content":"import { useAuth } from '@/contexts/AuthContext';\nimport { logout } from '@/lib/firebase';\nimport { Button } from '@/components/ui/button';\nimport { Sidebar, SidebarContent, SidebarGroup, SidebarGroupContent, SidebarGroupLabel, SidebarMenu, SidebarMenuButton, SidebarMenuItem, SidebarHeader, SidebarFooter } from '@/components/ui/sidebar';\nimport { SidebarProvider, SidebarTrigger } from '@/components/ui/sidebar';\nimport { USER_ROLES } from '@shared/schema';\nimport { \n  Home,\n  AlertTriangle,\n  Shield,\n  Map,\n  Camera,\n  Bell,\n  Phone,\n  Users,\n  FileText,\n  CheckSquare,\n  Calendar,\n  BookOpen,\n  Settings,\n  LogOut,\n  AlertCircle\n} from 'lucide-react';\nimport { Link, useLocation } from 'wouter';\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  const { user, hasPermission } = useAuth();\n  const [location] = useLocation();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  const navigationItems = [\n    {\n      title: 'Principal',\n      items: [\n        { title: 'Dashboard', url: '/', icon: Home, roles: ['student', 'staff', 'admin'] },\n        { title: 'Denunciar', url: '/reports', icon: AlertTriangle, roles: ['student', 'staff', 'admin'] },\n        { title: 'Anti-Bullying', url: '/bullying', icon: Shield, roles: ['student', 'staff', 'admin'] },\n        { title: 'Emergência', url: '/emergency', icon: AlertCircle, roles: ['student', 'staff', 'admin'] },\n      ]\n    },\n    {\n      title: 'Informações',\n      items: [\n        { title: 'Avisos Urgentes', url: '/notices', icon: Bell, roles: ['student', 'staff', 'admin'] },\n        { title: 'Plano Evacuação', url: '/evacuation', icon: Map, roles: ['student', 'staff', 'admin'] },\n        { title: 'Campanhas', url: '/campaigns', icon: BookOpen, roles: ['student', 'staff', 'admin'] },\n        { title: 'Contatos Úteis', url: '/contacts', icon: Phone, roles: ['student', 'staff', 'admin'] },\n      ]\n    },\n    {\n      title: 'Gestão',\n      items: [\n        { title: 'Visitantes', url: '/visitors', icon: Users, roles: ['staff', 'admin'] },\n        { title: 'Ocorrências', url: '/occurrences', icon: FileText, roles: ['staff', 'admin'] },\n        { title: 'Vigilância', url: '/surveillance', icon: Camera, roles: ['staff', 'admin'] },\n        { title: 'Checklist', url: '/checklist', icon: CheckSquare, roles: ['staff', 'admin'] },\n        { title: 'Simulados', url: '/drills', icon: Calendar, roles: ['staff', 'admin'] },\n      ]\n    },\n    {\n      title: 'Administração',\n      items: [\n        { title: 'Gerenciar Usuários', url: '/users', icon: Users, roles: ['admin'] },\n        { title: 'Relatórios', url: '/admin/reports', icon: FileText, roles: ['admin'] },\n      ]\n    },\n  ];\n\n  const filteredNavigation = navigationItems.map(section => ({\n    ...section,\n    items: section.items.filter(item => \n      hasPermission(item.roles as any)\n    )\n  })).filter(section => section.items.length > 0);\n\n  const sidebarStyle = {\n    '--sidebar-width': '16rem',\n    '--sidebar-width-icon': '3rem',\n  };\n\n  return (\n    <SidebarProvider style={sidebarStyle as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <Sidebar className=\"border-r\">\n          <SidebarHeader className=\"border-b p-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"p-2 bg-primary/10 rounded-lg\">\n                <Shield className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div>\n                <h2 className=\"text-lg font-semibold\">Escola Segura</h2>\n                <p className=\"text-xs text-muted-foreground capitalize\">\n                  {user?.role === USER_ROLES.ADMIN ? 'Direção' : \n                   user?.role === USER_ROLES.STAFF ? 'Funcionário' : 'Aluno'}\n                </p>\n              </div>\n            </div>\n          </SidebarHeader>\n          \n          <SidebarContent className=\"flex-1 overflow-auto\">\n            {filteredNavigation.map((section) => (\n              <SidebarGroup key={section.title}>\n                <SidebarGroupLabel>{section.title}</SidebarGroupLabel>\n                <SidebarGroupContent>\n                  <SidebarMenu>\n                    {section.items.map((item) => (\n                      <SidebarMenuItem key={item.url}>\n                        <SidebarMenuButton asChild isActive={location === item.url}>\n                          <Link href={item.url} data-testid={`nav-${item.title.toLowerCase().replace(/\\\\s+/g, '-')}`}>\n                            <item.icon className=\"h-4 w-4\" />\n                            <span>{item.title}</span>\n                          </Link>\n                        </SidebarMenuButton>\n                      </SidebarMenuItem>\n                    ))}\n                  </SidebarMenu>\n                </SidebarGroupContent>\n              </SidebarGroup>\n            ))}\n          </SidebarContent>\n          \n          <SidebarFooter className=\"border-t p-4\">\n            <div className=\"space-y-2\">\n              <div className=\"text-sm\">\n                <p className=\"font-medium\">{user?.name}</p>\n                <p className=\"text-xs text-muted-foreground\">{user?.email}</p>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleLogout}\n                className=\"w-full justify-start\"\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Sair\n              </Button>\n            </div>\n          </SidebarFooter>\n        </Sidebar>\n        \n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between p-4 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            \n            <div className=\"flex items-center gap-4\">\n              {/* Emergency button - always visible */}\n              <Link href=\"/emergency\">\n                <Button \n                  variant=\"destructive\" \n                  size=\"sm\"\n                  className=\"gap-2\"\n                  data-testid=\"button-emergency-header\"\n                >\n                  <AlertCircle className=\"h-4 w-4\" />\n                  Emergência\n                </Button>\n              </Link>\n            </div>\n          </header>\n          \n          <main className=\"flex-1 overflow-auto p-6\">\n            {children}\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":6685},"client/src/components/reports/ReportForm.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { addDocument } from '@/lib/firebase';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { AlertTriangle, Send, Lock } from 'lucide-react';\n\nconst reportSchema = z.object({\n  type: z.enum(['bullying', 'fight', 'theft', 'vandalism', 'other'], {\n    required_error: 'Selecione o tipo de ocorrência',\n  }),\n  description: z.string().min(10, 'Descrição deve ter pelo menos 10 caracteres'),\n  location: z.string().optional(),\n  isAnonymous: z.boolean().default(false),\n});\n\ntype ReportFormData = z.infer<typeof reportSchema>;\n\ninterface ReportFormProps {\n  onSuccess?: () => void;\n}\n\nexport default function ReportForm({ onSuccess }: ReportFormProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n  const { user } = useAuth();\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    watch,\n    reset,\n    formState: { errors },\n  } = useForm<ReportFormData>({\n    resolver: zodResolver(reportSchema),\n    defaultValues: {\n      isAnonymous: false,\n    },\n  });\n\n  const watchedType = watch('type');\n  const watchedIsAnonymous = watch('isAnonymous');\n\n  const reportTypes = {\n    bullying: 'Bullying',\n    fight: 'Briga/Agressão',\n    theft: 'Furto/Roubo',\n    vandalism: 'Vandalismo',\n    other: 'Outros',\n  };\n\n  const onSubmit = async (data: ReportFormData) => {\n    if (!user) return;\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const reportData = {\n        type: data.type,\n        description: data.description,\n        location: data.location || '',\n        isAnonymous: data.isAnonymous,\n        reporterId: data.isAnonymous ? null : user.id,\n        status: 'pending',\n      };\n\n      await addDocument('reports', reportData);\n      \n      setSuccess(true);\n      reset();\n      \n      setTimeout(() => {\n        setSuccess(false);\n        onSuccess?.();\n      }, 2000);\n      \n    } catch (error: any) {\n      console.error('Error submitting report:', error);\n      setError('Erro ao enviar denúncia. Tente novamente.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getTypeDescription = (type: string) => {\n    switch (type) {\n      case 'bullying':\n        return 'Intimidação, humilhação ou agressão psicológica';\n      case 'fight':\n        return 'Confronto físico ou agressão entre pessoas';\n      case 'theft':\n        return 'Subtração de objetos ou pertences';\n      case 'vandalism':\n        return 'Danos ao patrimônio ou instalações';\n      case 'other':\n        return 'Outras situações que comprometem a segurança';\n      default:\n        return '';\n    }\n  };\n\n  if (success) {\n    return (\n      <Card className=\"w-full max-w-2xl mx-auto\" data-testid=\"card-report-success\">\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center space-y-4\">\n            <div className=\"p-3 bg-green-100 dark:bg-green-900/20 rounded-full w-fit mx-auto\">\n              <Send className=\"h-8 w-8 text-green-600 dark:text-green-400\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-green-800 dark:text-green-200\">\n                Denúncia Enviada com Sucesso!\n              </h3>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                {watchedIsAnonymous \n                  ? 'Sua denúncia anônima foi registrada e será analisada pela direção.'\n                  : 'Sua denúncia foi registrada e você pode acompanhar o status no histórico.'\n                }\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto\" data-testid=\"card-report-form\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <AlertTriangle className=\"h-5 w-5 text-orange-600\" />\n          Reportar Incidente\n        </CardTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          Use este formulário para reportar qualquer situação que comprometa a segurança na escola.\n          Sua denúncia será tratada com seriedade e confidencialidade.\n        </p>\n      </CardHeader>\n      \n      <CardContent>\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-6\" data-testid=\"alert-error\">\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        \n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Anonymous Toggle */}\n          <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n            <div className=\"flex items-center gap-3\">\n              <Lock className=\"h-5 w-5 text-muted-foreground\" />\n              <div>\n                <Label htmlFor=\"anonymous\" className=\"text-sm font-medium\">\n                  Denúncia Anônima\n                </Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Sua identidade será mantida em sigilo\n                </p>\n              </div>\n            </div>\n            <Switch\n              id=\"anonymous\"\n              checked={watchedIsAnonymous}\n              onCheckedChange={(checked) => setValue('isAnonymous', checked)}\n              data-testid=\"switch-anonymous\"\n            />\n          </div>\n\n          {/* Report Type */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"type\">Tipo de Ocorrência *</Label>\n            <Select onValueChange={(value) => setValue('type', value as any)}>\n              <SelectTrigger data-testid=\"select-type\">\n                <SelectValue placeholder=\"Selecione o tipo de ocorrência\" />\n              </SelectTrigger>\n              <SelectContent>\n                {Object.entries(reportTypes).map(([value, label]) => (\n                  <SelectItem key={value} value={value}>\n                    {label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {watchedType && (\n              <p className=\"text-xs text-muted-foreground\">\n                {getTypeDescription(watchedType)}\n              </p>\n            )}\n            {errors.type && (\n              <p className=\"text-sm text-destructive\" data-testid=\"error-type\">\n                {errors.type.message}\n              </p>\n            )}\n          </div>\n\n          {/* Location */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"location\">Local (Opcional)</Label>\n            <Input\n              id=\"location\"\n              type=\"text\"\n              placeholder=\"Ex: Pátio, Sala 12, Corredor do 2º andar...\"\n              data-testid=\"input-location\"\n              {...register('location')}\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              Informe onde ocorreu o incidente para facilitar a investigação\n            </p>\n          </div>\n\n          {/* Description */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Descrição Detalhada *</Label>\n            <Textarea\n              id=\"description\"\n              placeholder=\"Descreva detalhadamente o que aconteceu, quando, quem estava envolvido...\"\n              className=\"min-h-[120px]\"\n              data-testid=\"textarea-description\"\n              {...register('description')}\n            />\n            {errors.description && (\n              <p className=\"text-sm text-destructive\" data-testid=\"error-description\">\n                {errors.description.message}\n              </p>\n            )}\n            <p className=\"text-xs text-muted-foreground\">\n              Quanto mais detalhes você fornecer, melhor poderemos investigar e resolver a situação\n            </p>\n          </div>\n\n          {/* Privacy Notice */}\n          <div className=\"p-4 bg-blue-50 dark:bg-blue-950/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n            <h4 className=\"text-sm font-medium text-blue-800 dark:text-blue-200 mb-2\">\n              {watchedIsAnonymous ? 'Proteção de Anonimato' : 'Proteção de Dados'}\n            </h4>\n            <p className=\"text-xs text-blue-700 dark:text-blue-300\">\n              {watchedIsAnonymous \n                ? 'Sua identidade será completamente protegida. Nenhuma informação pessoal será associada a esta denúncia.'\n                : 'Suas informações pessoais serão mantidas em sigilo e usadas apenas para investigação e contato se necessário.'\n              }\n            </p>\n          </div>\n\n          {/* Submit Button */}\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={isLoading}\n            data-testid=\"button-submit-report\"\n          >\n            {isLoading ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2\"></div>\n                Enviando...\n              </>\n            ) : (\n              <>\n                <Send className=\"h-4 w-4 mr-2\" />\n                {watchedIsAnonymous ? 'Enviar Anonimamente' : 'Enviar Denúncia'}\n              </>\n            )}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9846},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/CampaignsPage.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCampaignSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { Plus, BookOpen, Users, Eye, EyeOff } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\n\ntype Campaign = {\n  id: string;\n  title: string;\n  content: string;\n  category: string;\n  isActive: boolean;\n  createdBy: string;\n  createdAt: Date;\n};\n\nexport default function CampaignsPage() {\n  const { user, hasPermission } = useAuth();\n  const { toast } = useToast();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedCampaign, setSelectedCampaign] = useState<Campaign | null>(null);\n\n  const form = useForm<z.infer<typeof insertCampaignSchema>>({\n    resolver: zodResolver(insertCampaignSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      category: \"general\",\n    },\n  });\n\n  const { data: campaigns = [], isLoading } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  const createCampaignMutation = useMutation({\n    mutationFn: (data: z.infer<typeof insertCampaignSchema>) =>\n      apiRequest(\"POST\", \"/api/campaigns\", {\n        ...data,\n        headers: { \"x-user-id\": user?.id || \"\" }\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Campanha criada\",\n        description: \"A campanha educativa foi criada com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao criar campanha.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleCampaignMutation = useMutation({\n    mutationFn: ({ id, isActive }: { id: string; isActive: boolean }) =>\n      apiRequest(\"PATCH\", `/api/campaigns/${id}`, {\n        isActive,\n        headers: { \"x-user-id\": user?.id || \"\" }\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      toast({\n        title: \"Campanha atualizada\",\n        description: \"O status da campanha foi alterado.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof insertCampaignSchema>) => {\n    createCampaignMutation.mutate(data);\n  };\n\n  const getCategoryLabel = (category: string) => {\n    switch (category) {\n      case \"digital_safety\":\n        return \"Segurança Digital\";\n      case \"traffic_education\":\n        return \"Educação no Trânsito\";\n      case \"general\":\n        return \"Geral\";\n      default:\n        return \"Outro\";\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"digital_safety\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"traffic_education\":\n        return \"bg-green-100 text-green-800\";\n      case \"general\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-purple-100 text-purple-800\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Campanhas Educativas</h1>\n        <p className=\"text-muted-foreground\">\n          Conteúdo educativo sobre segurança, cidadania e bem-estar para a comunidade escolar.\n        </p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Campanhas Ativas</CardTitle>\n            <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {campaigns.filter((c: Campaign) => c.isActive).length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Em exibição\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{campaigns.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Campanhas criadas\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-xl font-semibold\">Campanhas</h2>\n        {hasPermission([\"staff\", \"admin\"]) && (\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-create-campaign\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Nova Campanha\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[600px]\">\n              <DialogHeader>\n                <DialogTitle>Criar Nova Campanha Educativa</DialogTitle>\n                <DialogDescription>\n                  Crie conteúdo educativo para informar e conscientizar a comunidade escolar.\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Título da Campanha</FormLabel>\n                        <FormControl>\n                          <Input \n                            data-testid=\"input-campaign-title\"\n                            placeholder=\"Ex: Uso Responsável da Internet\" \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Categoria</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-campaign-category\">\n                              <SelectValue placeholder=\"Selecione a categoria\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"general\">Geral</SelectItem>\n                            <SelectItem value=\"digital_safety\">Segurança Digital</SelectItem>\n                            <SelectItem value=\"traffic_education\">Educação no Trânsito</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"content\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Conteúdo</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            data-testid=\"input-campaign-content\"\n                            placeholder=\"Descreva o conteúdo da campanha educativa\"\n                            className=\"min-h-[120px]\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Texto informativo e educativo sobre o tema escolhido\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex gap-2\">\n                    <Button \n                      type=\"submit\" \n                      data-testid=\"button-submit-campaign\"\n                      disabled={createCampaignMutation.isPending}\n                    >\n                      {createCampaignMutation.isPending ? \"Criando...\" : \"Criar Campanha\"}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => setIsCreateDialogOpen(false)}\n                    >\n                      Cancelar\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        {campaigns.map((campaign: Campaign) => (\n          <Card key={campaign.id} className={campaign.isActive ? \"border-green-200\" : \"border-gray-200\"}>\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Badge \n                      className={getCategoryColor(campaign.category)}\n                      data-testid={`category-${campaign.id}`}\n                    >\n                      {getCategoryLabel(campaign.category)}\n                    </Badge>\n                    <Badge \n                      variant={campaign.isActive ? \"default\" : \"secondary\"}\n                      data-testid={`status-${campaign.id}`}\n                    >\n                      {campaign.isActive ? \"Ativa\" : \"Inativa\"}\n                    </Badge>\n                  </div>\n                  <CardTitle className=\"text-lg\">{campaign.title}</CardTitle>\n                  <CardDescription>\n                    Criada em {format(new Date(campaign.createdAt), \"dd/MM/yyyy\")}\n                  </CardDescription>\n                </div>\n                {hasPermission([\"staff\", \"admin\"]) && (\n                  <div className=\"flex gap-1\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      data-testid={`button-toggle-${campaign.id}`}\n                      onClick={() => toggleCampaignMutation.mutate({\n                        id: campaign.id,\n                        isActive: !campaign.isActive\n                      })}\n                      disabled={toggleCampaignMutation.isPending}\n                    >\n                      {campaign.isActive ? (\n                        <EyeOff className=\"h-4 w-4\" />\n                      ) : (\n                        <Eye className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground line-clamp-4\">\n                {campaign.content}\n              </p>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"mt-3 p-0 h-auto font-normal\"\n                onClick={() => setSelectedCampaign(campaign)}\n                data-testid={`button-view-${campaign.id}`}\n              >\n                Ler mais →\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {campaigns.length === 0 && (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <BookOpen className=\"h-16 w-16 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">\n              Nenhuma campanha criada\n            </h3>\n            <p className=\"text-muted-foreground text-center\">\n              Crie campanhas educativas para informar e conscientizar a comunidade escolar.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Modal de visualização detalhada */}\n      <Dialog open={!!selectedCampaign} onOpenChange={() => setSelectedCampaign(null)}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Badge className={getCategoryColor(selectedCampaign?.category || \"\")}>\n                {getCategoryLabel(selectedCampaign?.category || \"\")}\n              </Badge>\n              <Badge variant={selectedCampaign?.isActive ? \"default\" : \"secondary\"}>\n                {selectedCampaign?.isActive ? \"Ativa\" : \"Inativa\"}\n              </Badge>\n            </div>\n            <DialogTitle>{selectedCampaign?.title}</DialogTitle>\n            <DialogDescription>\n              Criada em {selectedCampaign && format(new Date(selectedCampaign.createdAt), \"dd/MM/yyyy\")}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"mt-4\">\n            <p className=\"text-sm leading-relaxed whitespace-pre-line\">\n              {selectedCampaign?.content}\n            </p>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":14445},"client/src/pages/ChecklistPage.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertChecklistItemSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { Plus, CheckCircle, Circle, Clock, Shield } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\n\ntype ChecklistItem = {\n  id: string;\n  title: string;\n  description: string | null;\n  isCompleted: boolean;\n  completedBy: string | null;\n  completedAt: Date | null;\n  createdAt: Date;\n};\n\nexport default function ChecklistPage() {\n  const { user, hasPermission } = useAuth();\n  const { toast } = useToast();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  const form = useForm<z.infer<typeof insertChecklistItemSchema>>({\n    resolver: zodResolver(insertChecklistItemSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n    },\n  });\n\n  const { data: checklistItems = [], isLoading } = useQuery<ChecklistItem[]>({\n    queryKey: [\"/api/checklist\"],\n  });\n\n  const createItemMutation = useMutation({\n    mutationFn: (data: z.infer<typeof insertChecklistItemSchema>) =>\n      apiRequest(\"POST\", \"/api/checklist\", {\n        ...data,\n        headers: { \"x-user-id\": user?.id || \"\" }\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/checklist\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Item adicionado\",\n        description: \"Item de checklist criado com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao criar item de checklist.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleItemMutation = useMutation({\n    mutationFn: ({ id, isCompleted }: { id: string; isCompleted: boolean }) =>\n      apiRequest(\"PATCH\", `/api/checklist/${id}`, {\n        isCompleted,\n        headers: { \"x-user-id\": user?.id || \"\" }\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/checklist\"] });\n      toast({\n        title: \"Item atualizado\",\n        description: \"Status do item foi alterado.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof insertChecklistItemSchema>) => {\n    createItemMutation.mutate(data);\n  };\n\n  const handleToggleItem = (item: ChecklistItem) => {\n    toggleItemMutation.mutate({\n      id: item.id,\n      isCompleted: !item.isCompleted\n    });\n  };\n\n  const completedItems = checklistItems.filter((item: ChecklistItem) => item.isCompleted);\n  const pendingItems = checklistItems.filter((item: ChecklistItem) => !item.isCompleted);\n  const completionRate = checklistItems.length > 0 \n    ? Math.round((completedItems.length / checklistItems.length) * 100) \n    : 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Checklist de Segurança</h1>\n        <p className=\"text-muted-foreground\">\n          Lista de verificação para garantir que todos os protocolos de segurança estejam sendo seguidos.\n        </p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Conclusão</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{completionRate}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Itens completados\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Completados</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{completedItems.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              De {checklistItems.length} itens\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pendentes</CardTitle>\n            <Clock className=\"h-4 w-4 text-orange-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">{pendingItems.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Aguardando verificação\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total</CardTitle>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{checklistItems.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Itens de segurança\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-xl font-semibold\">Itens de Verificação</h2>\n        {hasPermission([\"staff\", \"admin\"]) && (\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-create-checklist-item\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Novo Item\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[425px]\">\n              <DialogHeader>\n                <DialogTitle>Adicionar Item ao Checklist</DialogTitle>\n                <DialogDescription>\n                  Crie um novo item de verificação de segurança.\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Título do Item</FormLabel>\n                        <FormControl>\n                          <Input \n                            data-testid=\"input-checklist-title\"\n                            placeholder=\"Ex: Verificar extintores de incêndio\" \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Descrição (Opcional)</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            data-testid=\"input-checklist-description\"\n                            placeholder=\"Descreva detalhes sobre a verificação\"\n                            {...field}\n                            value={field.value || \"\"}\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Instruções detalhadas sobre como realizar a verificação\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex gap-2\">\n                    <Button \n                      type=\"submit\" \n                      data-testid=\"button-submit-checklist-item\"\n                      disabled={createItemMutation.isPending}\n                    >\n                      {createItemMutation.isPending ? \"Adicionando...\" : \"Adicionar\"}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => setIsCreateDialogOpen(false)}\n                    >\n                      Cancelar\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n\n      {checklistItems.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Shield className=\"h-16 w-16 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">\n              Nenhum item de checklist\n            </h3>\n            <p className=\"text-muted-foreground text-center\">\n              Adicione itens de verificação para garantir a segurança da escola.\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-6\">\n          {pendingItems.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"h-5 w-5 text-orange-500\" />\n                  Itens Pendentes\n                </CardTitle>\n                <CardDescription>\n                  Itens que ainda precisam ser verificados\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {pendingItems.map((item: ChecklistItem) => (\n                    <div \n                      key={item.id} \n                      className=\"flex items-start space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors\"\n                    >\n                      <Checkbox\n                        checked={item.isCompleted}\n                        onCheckedChange={() => handleToggleItem(item)}\n                        disabled={toggleItemMutation.isPending}\n                        data-testid={`checkbox-${item.id}`}\n                      />\n                      <div className=\"flex-1 space-y-1\">\n                        <h4 className=\"font-medium\">{item.title}</h4>\n                        {item.description && (\n                          <p className=\"text-sm text-muted-foreground\">\n                            {item.description}\n                          </p>\n                        )}\n                        <p className=\"text-xs text-muted-foreground\">\n                          Criado em {format(new Date(item.createdAt), \"dd/MM/yyyy\")}\n                        </p>\n                      </div>\n                      <Badge variant=\"outline\" data-testid={`status-${item.id}`}>\n                        Pendente\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {completedItems.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  Itens Completados\n                </CardTitle>\n                <CardDescription>\n                  Itens que já foram verificados e aprovados\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {completedItems.map((item: ChecklistItem) => (\n                    <div \n                      key={item.id} \n                      className=\"flex items-start space-x-3 p-3 border rounded-lg bg-green-50 border-green-200\"\n                    >\n                      <Checkbox\n                        checked={item.isCompleted}\n                        onCheckedChange={() => handleToggleItem(item)}\n                        disabled={toggleItemMutation.isPending}\n                        data-testid={`checkbox-${item.id}`}\n                      />\n                      <div className=\"flex-1 space-y-1\">\n                        <h4 className=\"font-medium line-through text-green-700\">\n                          {item.title}\n                        </h4>\n                        {item.description && (\n                          <p className=\"text-sm text-green-600 line-through\">\n                            {item.description}\n                          </p>\n                        )}\n                        <div className=\"text-xs text-green-600\">\n                          <p>Criado em {format(new Date(item.createdAt), \"dd/MM/yyyy\")}</p>\n                          {item.completedAt && (\n                            <p>Completado em {format(new Date(item.completedAt), \"dd/MM/yyyy 'às' HH:mm\")}</p>\n                          )}\n                        </div>\n                      </div>\n                      <Badge variant=\"default\" className=\"bg-green-100 text-green-800\" data-testid={`status-${item.id}`}>\n                        Completado\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":14487},"client/src/pages/DrillsPage.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertDrillSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { CalendarIcon, Plus, AlertTriangle, Clock, CheckCircle } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ntype Drill = {\n  id: string;\n  title: string;\n  description: string | null;\n  scheduledDate: Date;\n  type: string;\n  createdBy: string;\n  createdAt: Date;\n};\n\nexport default function DrillsPage() {\n  const { user, hasPermission } = useAuth();\n  const { toast } = useToast();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  const form = useForm<z.infer<typeof insertDrillSchema>>({\n    resolver: zodResolver(insertDrillSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      type: \"evacuation\",\n      scheduledDate: new Date(),\n    },\n  });\n\n  const { data: allDrills = [], isLoading } = useQuery<Drill[]>({\n    queryKey: [\"/api/drills\"],\n  });\n\n  const { data: upcomingDrills = [] } = useQuery<Drill[]>({\n    queryKey: [\"/api/drills/upcoming\"],\n  });\n\n  const createDrillMutation = useMutation({\n    mutationFn: (data: z.infer<typeof insertDrillSchema>) =>\n      apiRequest(\"POST\", \"/api/drills\", {\n        ...data,\n        headers: { \"x-user-id\": user?.id || \"\" }\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/drills\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/drills/upcoming\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Simulação agendada\",\n        description: \"A simulação foi criada com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao criar simulação.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof insertDrillSchema>) => {\n    createDrillMutation.mutate(data);\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"fire\":\n        return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\n      case \"earthquake\":\n        return <AlertTriangle className=\"h-4 w-4 text-orange-500\" />;\n      case \"evacuation\":\n        return <AlertTriangle className=\"h-4 w-4 text-blue-500\" />;\n      default:\n        return <AlertTriangle className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case \"fire\":\n        return \"Incêndio\";\n      case \"earthquake\":\n        return \"Terremoto\";\n      case \"evacuation\":\n        return \"Evacuação\";\n      default:\n        return \"Outro\";\n    }\n  };\n\n  const isPastDrill = (date: Date) => new Date(date) < new Date();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Simulações de Emergência</h1>\n        <p className=\"text-muted-foreground\">\n          Planejamento e execução de exercícios de segurança escolar.\n        </p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Próximas Simulações</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{upcomingDrills.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Agendadas\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total de Simulações</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{allDrills.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Registradas no sistema\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-xl font-semibold\">Simulações</h2>\n        {hasPermission([\"staff\", \"admin\"]) && (\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-create-drill\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Agendar Simulação\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[425px]\">\n              <DialogHeader>\n                <DialogTitle>Agendar Nova Simulação</DialogTitle>\n                <DialogDescription>\n                  Crie uma nova simulação de emergência para treinar a equipe e alunos.\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Título da Simulação</FormLabel>\n                        <FormControl>\n                          <Input \n                            data-testid=\"input-drill-title\"\n                            placeholder=\"Ex: Simulação de Evacuação - Bloco A\" \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"type\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Tipo de Simulação</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-drill-type\">\n                              <SelectValue placeholder=\"Selecione o tipo\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"evacuation\">Evacuação</SelectItem>\n                            <SelectItem value=\"fire\">Incêndio</SelectItem>\n                            <SelectItem value=\"earthquake\">Terremoto</SelectItem>\n                            <SelectItem value=\"security\">Segurança</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"scheduledDate\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-col\">\n                        <FormLabel>Data e Hora</FormLabel>\n                        <Popover>\n                          <PopoverTrigger asChild>\n                            <FormControl>\n                              <Button\n                                variant={\"outline\"}\n                                data-testid=\"button-drill-date\"\n                                className={cn(\n                                  \"w-full pl-3 text-left font-normal\",\n                                  !field.value && \"text-muted-foreground\"\n                                )}\n                              >\n                                {field.value ? (\n                                  format(field.value, \"PPP 'às' HH:mm\", { locale: ptBR })\n                                ) : (\n                                  <span>Selecione a data</span>\n                                )}\n                                <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                              </Button>\n                            </FormControl>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                            <Calendar\n                              mode=\"single\"\n                              selected={field.value}\n                              onSelect={field.onChange}\n                              disabled={(date) =>\n                                date < new Date() || date < new Date(\"1900-01-01\")\n                              }\n                              initialFocus\n                            />\n                          </PopoverContent>\n                        </Popover>\n                        <FormDescription>\n                          Agende para uma data futura\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Descrição (Opcional)</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            data-testid=\"input-drill-description\"\n                            placeholder=\"Descreva os objetivos e procedimentos da simulação\"\n                            {...field}\n                            value={field.value || \"\"}\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Detalhes sobre a simulação e instruções especiais\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex gap-2\">\n                    <Button \n                      type=\"submit\" \n                      data-testid=\"button-submit-drill\"\n                      disabled={createDrillMutation.isPending}\n                    >\n                      {createDrillMutation.isPending ? \"Agendando...\" : \"Agendar\"}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => setIsCreateDialogOpen(false)}\n                    >\n                      Cancelar\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Próximas Simulações</CardTitle>\n          <CardDescription>\n            Simulações agendadas para os próximos dias\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {upcomingDrills.length === 0 ? (\n            <div className=\"text-center text-muted-foreground py-8\">\n              <Clock className=\"mx-auto h-12 w-12 mb-4 opacity-50\" />\n              <p>Nenhuma simulação agendada</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {upcomingDrills.map((drill: Drill) => (\n                <div \n                  key={drill.id} \n                  className=\"flex items-center justify-between p-4 border rounded-lg\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    {getTypeIcon(drill.type)}\n                    <div>\n                      <h4 className=\"font-medium\">{drill.title}</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {format(new Date(drill.scheduledDate), \"PPP 'às' HH:mm\", { locale: ptBR })}\n                      </p>\n                    </div>\n                  </div>\n                  <Badge \n                    variant=\"outline\"\n                    data-testid={`type-drill-${drill.id}`}\n                  >\n                    {getTypeLabel(drill.type)}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Histórico de Simulações</CardTitle>\n          <CardDescription>\n            Todas as simulações registradas no sistema\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Título</TableHead>\n                <TableHead>Tipo</TableHead>\n                <TableHead>Data Agendada</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Descrição</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {allDrills.map((drill: Drill) => (\n                <TableRow key={drill.id}>\n                  <TableCell className=\"font-medium\">{drill.title}</TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      {getTypeIcon(drill.type)}\n                      <span>{getTypeLabel(drill.type)}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {format(new Date(drill.scheduledDate), \"dd/MM/yyyy HH:mm\")}\n                  </TableCell>\n                  <TableCell>\n                    <Badge \n                      variant={isPastDrill(drill.scheduledDate) ? \"secondary\" : \"default\"}\n                      data-testid={`status-drill-${drill.id}`}\n                    >\n                      {isPastDrill(drill.scheduledDate) ? \"Realizada\" : \"Agendada\"}\n                    </Badge>\n                  </TableCell>\n                  <TableCell className=\"max-w-xs truncate\">\n                    {drill.description || \"-\"}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15738},"client/src/pages/EmergencyPage.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertEmergencyAlertSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { AlertTriangle, Shield, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\n\ntype EmergencyAlert = {\n  id: string;\n  message: string;\n  location: string | null;\n  triggeredBy: string;\n  isResolved: boolean;\n  resolvedBy: string | null;\n  resolvedAt: Date | null;\n  createdAt: Date;\n};\n\nexport default function EmergencyPage() {\n  const { user, hasPermission } = useAuth();\n  const { toast } = useToast();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  const form = useForm<z.infer<typeof insertEmergencyAlertSchema>>({\n    resolver: zodResolver(insertEmergencyAlertSchema),\n    defaultValues: {\n      message: \"\",\n      location: \"\",\n    },\n  });\n\n  const { data: activeAlerts = [], isLoading } = useQuery<EmergencyAlert[]>({\n    queryKey: [\"/api/emergency-alerts\"],\n  });\n\n  const createAlertMutation = useMutation({\n    mutationFn: (data: z.infer<typeof insertEmergencyAlertSchema>) =>\n      apiRequest(\"POST\", \"/api/emergency-alerts\", {\n        ...data,\n        headers: { \"x-user-id\": user?.id || \"\" }\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/emergency-alerts\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Alerta de emergência criado\",\n        description: \"O alerta foi enviado para toda a escola.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao criar alerta de emergência.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resolveAlertMutation = useMutation({\n    mutationFn: (alertId: string) =>\n      apiRequest(\"PATCH\", `/api/emergency-alerts/${alertId}/resolve`, {\n        headers: { \"x-user-id\": user?.id || \"\" }\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/emergency-alerts\"] });\n      toast({\n        title: \"Alerta resolvido\",\n        description: \"O alerta de emergência foi marcado como resolvido.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof insertEmergencyAlertSchema>) => {\n    createAlertMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Emergências</h1>\n        <p className=\"text-muted-foreground\">\n          Sistema de alertas e gerenciamento de emergências escolares.\n        </p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Alertas Ativos</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">\n              {activeAlerts.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Situações em andamento\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Sistema</CardTitle>\n            <Shield className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {activeAlerts.length === 0 ? \"OK\" : \"ALERTA\"}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Status do sistema\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {activeAlerts.length > 0 && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n          <AlertTitle className=\"text-red-800\">Alertas de Emergência Ativos</AlertTitle>\n          <AlertDescription className=\"text-red-700\">\n            Existem {activeAlerts.length} alerta(s) de emergência ativo(s) que requerem atenção imediata.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-xl font-semibold\">Alertas de Emergência</h2>\n        {hasPermission([\"staff\", \"admin\"]) && (\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button \n                variant=\"destructive\" \n                data-testid=\"button-create-emergency\"\n              >\n                <AlertTriangle className=\"mr-2 h-4 w-4\" />\n                Novo Alerta de Emergência\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[425px]\">\n              <DialogHeader>\n                <DialogTitle className=\"text-red-600\">Criar Alerta de Emergência</DialogTitle>\n                <DialogDescription>\n                  Este alerta será enviado imediatamente para toda a escola. Use apenas para situações reais de emergência.\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"message\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Mensagem de Emergência</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            data-testid=\"input-emergency-message\"\n                            placeholder=\"Descreva a situação de emergência\" \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Seja claro e objetivo sobre a natureza da emergência.\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"location\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Localização (Opcional)</FormLabel>\n                        <FormControl>\n                          <Input \n                            data-testid=\"input-emergency-location\"\n                            placeholder=\"Ex: Bloco A, Sala 205\" \n                            {...field}\n                            value={field.value || \"\"} \n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Especifique onde ocorreu a emergência, se aplicável.\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <Alert className=\"border-red-200 bg-red-50\">\n                    <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                    <AlertDescription className=\"text-red-700\">\n                      Confirme que esta é uma situação real de emergência antes de continuar.\n                    </AlertDescription>\n                  </Alert>\n                  <div className=\"flex gap-2\">\n                    <Button \n                      type=\"submit\" \n                      variant=\"destructive\"\n                      data-testid=\"button-submit-emergency\"\n                      disabled={createAlertMutation.isPending}\n                    >\n                      {createAlertMutation.isPending ? \"Enviando...\" : \"Enviar Alerta\"}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => setIsCreateDialogOpen(false)}\n                    >\n                      Cancelar\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n\n      <div className=\"space-y-4\">\n        {activeAlerts.length === 0 ? (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <CheckCircle className=\"h-16 w-16 text-green-500 mb-4\" />\n              <h3 className=\"text-lg font-semibold text-green-700 mb-2\">\n                Nenhuma Emergência Ativa\n              </h3>\n              <p className=\"text-muted-foreground text-center\">\n                O sistema está funcionando normalmente. Não há alertas de emergência ativos no momento.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          activeAlerts.map((alert: EmergencyAlert) => (\n            <Card key={alert.id} className=\"border-red-200\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <AlertCircle className=\"h-5 w-5 text-red-600\" />\n                      <CardTitle className=\"text-red-700\">Alerta de Emergência</CardTitle>\n                      <Badge variant=\"destructive\" data-testid={`status-alert-${alert.id}`}>\n                        Ativo\n                      </Badge>\n                    </div>\n                    <CardDescription className=\"text-gray-600\">\n                      Criado em {format(new Date(alert.createdAt), \"dd/MM/yyyy 'às' HH:mm\")}\n                      {alert.location && ` • ${alert.location}`}\n                    </CardDescription>\n                  </div>\n                  {hasPermission([\"staff\", \"admin\"]) && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      data-testid={`button-resolve-${alert.id}`}\n                      onClick={() => resolveAlertMutation.mutate(alert.id)}\n                      disabled={resolveAlertMutation.isPending}\n                    >\n                      <CheckCircle className=\"mr-1 h-3 w-3\" />\n                      Resolver\n                    </Button>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-800 font-medium\">{alert.message}</p>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Instruções de Emergência</CardTitle>\n          <CardDescription>\n            Procedimentos padrão em caso de emergência\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div>\n              <h4 className=\"font-semibold mb-2 flex items-center\">\n                <AlertTriangle className=\"mr-2 h-4 w-4 text-red-500\" />\n                Incêndio\n              </h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• Ativar o alarme de incêndio</li>\n                <li>• Evacuar o prédio pela rota mais próxima</li>\n                <li>• Dirigir-se ao ponto de encontro</li>\n                <li>• Aguardar instruções do corpo de bombeiros</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-2 flex items-center\">\n                <Shield className=\"mr-2 h-4 w-4 text-blue-500\" />\n                Segurança\n              </h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• Trancar portas e janelas</li>\n                <li>• Manter silêncio</li>\n                <li>• Aguardar instruções da equipe</li>\n                <li>• Não sair até receber autorização</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13342},"client/src/pages/VisitorsPage.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertVisitorSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { UserPlus, LogOut, Users, Clock } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\n\ntype Visitor = {\n  id: string;\n  name: string;\n  document: string;\n  purpose: string;\n  entryTime: Date;\n  exitTime: Date | null;\n  registeredBy: string;\n};\n\nexport default function VisitorsPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n\n  const form = useForm<z.infer<typeof insertVisitorSchema>>({\n    resolver: zodResolver(insertVisitorSchema),\n    defaultValues: {\n      name: \"\",\n      document: \"\",\n      purpose: \"\",\n    },\n  });\n\n  const { data: visitors = [], isLoading } = useQuery<Visitor[]>({\n    queryKey: [\"/api/visitors\"],\n  });\n\n  const { data: activeVisitors = [] } = useQuery<Visitor[]>({\n    queryKey: [\"/api/visitors/active\"],\n  });\n\n  const addVisitorMutation = useMutation({\n    mutationFn: (data: z.infer<typeof insertVisitorSchema>) =>\n      apiRequest(\"POST\", \"/api/visitors\", {\n        ...data,\n        headers: { \"x-user-id\": user?.id || \"\" }\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/visitors\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/visitors/active\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Visitante registrado\",\n        description: \"O visitante foi registrado com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao registrar visitante.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const checkoutMutation = useMutation({\n    mutationFn: (visitorId: string) =>\n      apiRequest(\"PATCH\", `/api/visitors/${visitorId}/checkout`, {\n        headers: { \"x-user-id\": user?.id || \"\" }\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/visitors\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/visitors/active\"] });\n      toast({\n        title: \"Check-out realizado\",\n        description: \"O visitante foi registrado como saído.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof insertVisitorSchema>) => {\n    addVisitorMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Gestão de Visitantes</h1>\n        <p className=\"text-muted-foreground\">\n          Controle de entrada e saída de visitantes na escola.\n        </p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Visitantes Ativos</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{activeVisitors.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Atualmente na escola\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Hoje</CardTitle>\n            <UserPlus className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {visitors.filter((v: Visitor) => \n                new Date(v.entryTime).toDateString() === new Date().toDateString()\n              ).length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Visitantes registrados hoje\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-xl font-semibold\">Visitantes Ativos</h2>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-visitor\">\n              <UserPlus className=\"mr-2 h-4 w-4\" />\n              Registrar Visitante\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>Registrar Novo Visitante</DialogTitle>\n              <DialogDescription>\n                Preencha as informações do visitante para realizar o check-in.\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome Completo</FormLabel>\n                      <FormControl>\n                        <Input \n                          data-testid=\"input-visitor-name\"\n                          placeholder=\"Nome do visitante\" \n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"document\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Documento</FormLabel>\n                      <FormControl>\n                        <Input \n                          data-testid=\"input-visitor-document\"\n                          placeholder=\"CPF, RG ou outro documento\" \n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"purpose\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Propósito da Visita</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          data-testid=\"input-visitor-purpose\"\n                          placeholder=\"Descreva o motivo da visita\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Ex: Reunião com professor, entrega de documentos, etc.\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex gap-2\">\n                  <Button \n                    type=\"submit\" \n                    data-testid=\"button-submit-visitor\"\n                    disabled={addVisitorMutation.isPending}\n                  >\n                    {addVisitorMutation.isPending ? \"Registrando...\" : \"Registrar\"}\n                  </Button>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsAddDialogOpen(false)}\n                  >\n                    Cancelar\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Visitantes Ativos na Escola</CardTitle>\n          <CardDescription>\n            Visitantes que realizaram check-in e ainda não saíram\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {activeVisitors.length === 0 ? (\n            <div className=\"text-center text-muted-foreground py-8\">\n              <Users className=\"mx-auto h-12 w-12 mb-4 opacity-50\" />\n              <p>Nenhum visitante ativo no momento</p>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Nome</TableHead>\n                  <TableHead>Documento</TableHead>\n                  <TableHead>Propósito</TableHead>\n                  <TableHead>Entrada</TableHead>\n                  <TableHead>Ações</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {activeVisitors.map((visitor: Visitor) => (\n                  <TableRow key={visitor.id}>\n                    <TableCell className=\"font-medium\">{visitor.name}</TableCell>\n                    <TableCell>{visitor.document}</TableCell>\n                    <TableCell>{visitor.purpose}</TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <Clock className=\"mr-1 h-3 w-3\" />\n                        {format(new Date(visitor.entryTime), \"HH:mm\")}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid={`button-checkout-${visitor.id}`}\n                        onClick={() => checkoutMutation.mutate(visitor.id)}\n                        disabled={checkoutMutation.isPending}\n                      >\n                        <LogOut className=\"mr-1 h-3 w-3\" />\n                        Check-out\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Histórico de Visitantes</CardTitle>\n          <CardDescription>\n            Todos os visitantes registrados\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Nome</TableHead>\n                <TableHead>Documento</TableHead>\n                <TableHead>Propósito</TableHead>\n                <TableHead>Entrada</TableHead>\n                <TableHead>Saída</TableHead>\n                <TableHead>Status</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {visitors.map((visitor: Visitor) => (\n                <TableRow key={visitor.id}>\n                  <TableCell className=\"font-medium\">{visitor.name}</TableCell>\n                  <TableCell>{visitor.document}</TableCell>\n                  <TableCell>{visitor.purpose}</TableCell>\n                  <TableCell>\n                    {format(new Date(visitor.entryTime), \"dd/MM/yyyy HH:mm\")}\n                  </TableCell>\n                  <TableCell>\n                    {visitor.exitTime \n                      ? format(new Date(visitor.exitTime), \"dd/MM/yyyy HH:mm\")\n                      : \"-\"\n                    }\n                  </TableCell>\n                  <TableCell>\n                    <Badge \n                      variant={visitor.exitTime ? \"secondary\" : \"default\"}\n                      data-testid={`status-visitor-${visitor.id}`}\n                    >\n                      {visitor.exitTime ? \"Saiu\" : \"Na escola\"}\n                    </Badge>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12799},"INSTRUCOES_COMPILACAO_APK.md":{"content":"# Sistema de Segurança Escolar - Instruções para Compilar APK\n\nEste documento fornece instruções detalhadas para compilar o aplicativo Python + Kivy em um arquivo APK para Android.\n\n## Pré-requisitos\n\n### 1. Sistema Linux (Ubuntu/Debian recomendado)\nO Buildozer funciona melhor em sistemas Linux. Para Windows, use WSL2.\n\n⚠️ **IMPORTANTE**: O Buildozer não funciona em ambientes restritos como Replit, GitHub Codespaces, etc. devido a limitações de PTRACE. Use uma máquina Linux local ou uma VM para compilação.\n\n### 2. Instalar Dependências do Sistema\n```bash\nsudo apt update\nsudo apt install -y git zip unzip openjdk-11-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev libssl-dev\n```\n\n### 3. Instalar Buildozer\n```bash\npip3 install --user buildozer\n```\n\n### 4. Instalar Cython\n```bash\npip3 install --user cython==0.29.33\n```\n\n## Configuração do Firebase (APENAS para versão Desktop)\n\n⚠️ **IMPORTANTE**: A versão Android (main_android.py) usa dados locais e NÃO precisa de configuração Firebase.\n\nPara a versão desktop (main.py) com Firebase:\n\n### 1. Crie o arquivo `.env` na raiz do projeto:\n```bash\nFIREBASE_PROJECT_ID=seu-projeto-id\nFIREBASE_APP_ID=seu-app-id  \nFIREBASE_API_KEY=sua-api-key\n```\n\n### 2. Adicione o arquivo `google-services.json` na pasta do projeto\n- Baixe do Console Firebase > Configurações do Projeto > Seus apps\n- Coloque na raiz do projeto\n\n**Para Android**: Pule esta seção - não é necessária!\n\n## Compilação do APK\n\n### 1. Clone/baixe o projeto\n```bash\ngit clone <seu-repositorio>\ncd sistema-seguranca-escolar\n```\n\n### 2. Inicializar o buildozer (apenas primeira vez se buildozer.spec não existir)\n```bash\nbuildozer init\n```\n\n### 3. Compilar o APK\n```bash\nbuildozer android debug\n```\n\n**Nota**: O buildozer usa as dependências definidas em `buildozer.spec`, não em `pyproject.toml`.\n\nO processo pode demorar 30-60 minutos na primeira execução, pois baixa todas as dependências.\n\n### 4. APK será gerado em:\n```\nbin/escolasegura-1.0-arm64-v8a-debug.apk\n```\n\n## Instalação no Dispositivo Android\n\n### 1. Habilitar \"Instalação de fontes desconhecidas\" no Android\n- Vá em Configurações > Segurança > Fontes desconhecidas\n\n### 2. Transferir o APK para o dispositivo\n```bash\nadb install bin/escolasegura-1.0-arm64-v8a-debug.apk\n```\n\nOu copie manualmente o arquivo APK para o dispositivo e instale.\n\n## Correções Aplicadas\n\n✅ **Dependências corrigidas**: Removidas libs problemáticas do Firebase\n✅ **App Android otimizado**: Criado main_android.py para compilação móvel\n✅ **Configuração buildozer.spec atualizada**: Dependências compatíveis com Android\n\n## Solução de Problemas Comuns\n\n### 1. Erro de Java/SDK\n```bash\n# Instalar OpenJDK 11\nsudo apt install openjdk-11-jdk\nexport JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64\n```\n\n### 2. Erro de NDK/SDK\n```bash\n# Limpar e recriar\nbuildozer android clean\nrm -rf .buildozer\nbuildozer android debug\n```\n\n### 3. Erro de permissões\n```bash\nchmod +x buildozer\n```\n\n### 4. Erro de dependências Python\n```bash\n# Instalar dependências localmente (apenas as compatíveis com Android)\npip3 install kivy kivymd pillow plyer requests python-dateutil\n```\n\n### 5. Erro de espaço em disco\n- O processo precisa de pelo menos 10GB livres\n- Limpe o cache: `rm -rf ~/.buildozer`\n\n### 6. Erro PTRACE (ptrace::getregs: ESRCH)\n❌ **Este erro NÃO pode ser corrigido em ambientes restritos** como:\n- Replit, GitHub Codespaces, Docker containers\n- Windows WSL com restrições de segurança\n- Ambientes virtualizados sem privilégios\n\n✅ **Solução obrigatória**: Compilar em máquina Linux física:\n```bash\n# Use Ubuntu 20.04+ ou Debian 11+ com:\n# - Python 3.9+\n# - OpenJDK 11\n# - Android SDK/NDK configurados manualmente\n# - Pelo menos 10GB de espaço livre\n```\n\n**Ambiente testado recomendado:**\n- Ubuntu 22.04 LTS\n- Python 3.11\n- OpenJDK 11\n- 16GB RAM (mínimo 8GB)\n\n## Customizações\n\n### Alterar ícone do app\n1. Crie um ícone 512x512 em PNG\n2. Salve como `icon.png` na raiz do projeto\n3. Descomente a linha no `buildozer.spec`:\n```ini\nicon.filename = %(source.dir)s/icon.png\n```\n\n### Alterar splash screen\n1. Crie uma imagem 1280x720 em PNG\n2. Salve como `presplash.png` na raiz do projeto  \n3. Descomente a linha no `buildozer.spec`:\n```ini\npresplash.filename = %(source.dir)s/presplash.png\n```\n\n### Compilar APK de produção (release)\n```bash\nbuildozer android release\n```\n\nO APK de release precisa ser assinado digitalmente para publicação.\n\n## Estrutura de Arquivos\n\n### Para compilação Android:\n```\nsistema-seguranca-escolar/\n├── main_android.py        # Aplicativo principal (Android)\n├── buildozer.spec         # Configuração do buildozer\n├── icon.png              # Ícone do app (opcional)\n├── presplash.png         # Splash screen (opcional)\n└── bin/                  # APKs compilados\n```\n\n### Para versão desktop (com Firebase):\n```\nsistema-seguranca-escolar/\n├── main.py               # Aplicativo principal (Desktop)\n├── .env                  # Variáveis de ambiente (não versionar)\n├── google-services.json  # Config Firebase (não versionar)  \n└── [outros arquivos...]\n```\n\n## Funcionalidades do App\n\n### Versão Android (main_android.py)\n✅ **Sistema de Login/Cadastro** - Dados locais (sem Firebase)\n✅ **Controle de Permissões** - Por tipo de usuário\n✅ **Denúncias** - Anônimas ou identificadas\n✅ **Avisos** - Lista de avisos da escola\n✅ **Controle de Visitantes** - Registro entrada/saída\n✅ **Botão de Emergência** - Alerta rápido\n✅ **Interface Otimizada** - Para dispositivos móveis\n\n### Versão Completa (main.py - apenas para desktop)\n✅ **Todas as funcionalidades Android** +\n✅ **Firebase Auth** - Autenticação online\n✅ **Push Notifications** - Avisos em tempo real\n✅ **Campanhas Educativas** - Gerenciamento avançado\n✅ **Painel de Vigilância** - Simulação de câmeras\n✅ **Relatórios Avançados** - Analytics e estatísticas\n\n## Tipos de Usuário e Permissões\n\n### 👨‍🎓 Aluno\n- Fazer denúncias\n- Ver avisos\n- Usar botão de emergência\n- Consultar campanhas educativas\n- Ver plano de evacuação\n- Ver calendário de simulados\n\n### 👨‍🏫 Funcionário  \n- Tudo do aluno +\n- Registrar visitantes\n- Adicionar ocorrências no diário\n- Atualizar checklist de segurança\n\n### 👨‍💼 Direção\n- Tudo dos outros +\n- Criar avisos urgentes\n- Ver todas as denúncias  \n- Cadastrar campanhas educativas\n- Banir/desbanir usuários\n- Gerar relatórios\n- Agendar simulados\n\n## Suporte\n\nPara problemas técnicos:\n1. Verifique os logs: `buildozer android debug -v`\n2. Consulte a documentação oficial do Buildozer\n3. Limpe o cache e recompile se necessário\n\n## Próximos Passos\n\n- Implementar notificações push reais\n- Adicionar streaming de câmeras real  \n- Criar dashboard web administrativo\n- Implementar backup automático dos dados\n- Adicionar relatórios em PDF","size_bytes":7002},"main.py":{"content":"\"\"\"\nSistema de Segurança Escolar\nAplicativo desenvolvido em Python + Kivy com Firebase\nFuncionalidades: Autenticação, Denúncias, Avisos, Vigilância, etc.\n\"\"\"\n\nimport os\n# Configurações para ambiente Replit com VNC\nif not os.environ.get('DISPLAY'):\n    os.environ['DISPLAY'] = ':0'\n\n# Configurar Kivy para usar renderização por software\nos.environ['KIVY_GL_BACKEND'] = 'mock'\nos.environ['KIVY_WINDOW'] = 'sdl2'\nos.environ['MESA_GL_VERSION_OVERRIDE'] = '3.3'\nos.environ['MESA_GLSL_VERSION_OVERRIDE'] = '330'\n\n# Adicionar configurações para evitar problemas de OpenGL - imports opcionais\ntry:\n    import kivy\n    kivy.require('2.1.0')\n    from kivy.config import Config\n    Config.set('graphics', 'multisamples', '0')\n    Config.set('graphics', 'vsync', '0')\n    Config.set('graphics', 'depth', '0')\n    Config.set('graphics', 'stencil', '0')\n    Config.set('graphics', 'double', '0')\n    Config.set('input', 'mouse', 'mouse,multitouch_on_demand')\n\n    from kivy.app import App\n    from kivy.uix.screenmanager import ScreenManager, Screen\n    from kivy.uix.boxlayout import BoxLayout\n    from kivy.uix.label import Label\n    from kivy.uix.button import Button\n    from kivy.uix.textinput import TextInput\n    from kivy.uix.spinner import Spinner\n    from kivy.uix.popup import Popup\n    from kivy.uix.image import Image\n    from kivy.clock import Clock\n    from kivymd.app import MDApp\n    from kivymd.uix.screen import MDScreen\n    from kivymd.uix.boxlayout import MDBoxLayout\n    from kivymd.uix.button import MDRaisedButton, MDIconButton\n    from kivymd.uix.textfield import MDTextField\n    from kivymd.uix.card import MDCard\n    from kivymd.uix.list import MDList, OneLineListItem\n    from kivymd.uix.selectioncontrol import MDSwitch\n    from kivymd.uix.label import MDLabel\n    from kivymd.uix.navigationdrawer import MDNavigationDrawer\n    from kivymd.uix.toolbar import MDTopAppBar\n    from kivymd.uix.dialog import MDDialog\n    from kivymd.uix.button import MDFlatButton\n    from kivymd.uix.tab import MDTabsBase, MDTabs\n    from kivymd.uix.floatlayout import MDFloatLayout\n    \n    KIVY_AVAILABLE = True\nexcept ImportError:\n    # Fallbacks para quando Kivy não está disponível\n    kivy = None\n    Config = None\n    App = object\n    ScreenManager = Screen = BoxLayout = Label = Button = object\n    TextInput = Spinner = Popup = Image = Clock = object\n    MDApp = MDScreen = MDBoxLayout = object\n    MDRaisedButton = MDIconButton = MDTextField = object\n    MDCard = MDList = OneLineListItem = MDSwitch = object\n    MDLabel = MDNavigationDrawer = MDTopAppBar = object\n    MDDialog = MDFlatButton = MDTabsBase = MDTabs = object\n    MDFloatLayout = object\n    \n    KIVY_AVAILABLE = False\n\ntry:\n    import firebase_admin\n    from firebase_admin import credentials, auth as firebase_auth, firestore, messaging\n    import pyrebase\n    FIREBASE_AVAILABLE = True\nexcept ImportError:\n    firebase_admin = None\n    credentials = firebase_auth = firestore = messaging = object\n    pyrebase = None\n    FIREBASE_AVAILABLE = False\n\nfrom datetime import datetime\nimport json\n\n\nclass FirebaseManager:\n    \"\"\"Gerenciador do Firebase para autenticação e banco de dados\"\"\"\n    \n    def __init__(self):\n        self.config = {\n            \"apiKey\": os.environ.get(\"FIREBASE_API_KEY\"),\n            \"authDomain\": f\"{os.environ.get('FIREBASE_PROJECT_ID')}.firebaseapp.com\",\n            \"projectId\": os.environ.get(\"FIREBASE_PROJECT_ID\"),\n            \"storageBucket\": f\"{os.environ.get('FIREBASE_PROJECT_ID')}.firebasestorage.app\",\n            \"messagingSenderId\": \"123456789\",\n            \"appId\": os.environ.get(\"FIREBASE_APP_ID\"),\n            \"databaseURL\": f\"https://{os.environ.get('FIREBASE_PROJECT_ID')}-default-rtdb.firebaseio.com/\"\n        }\n        \n        self.firebase = None\n        self.auth = None\n        self.db = None\n        self.current_user = None\n        \n        self.initialize_firebase()\n    \n    def initialize_firebase(self):\n        \"\"\"Inicializa o Firebase\"\"\"\n        try:\n            # Verificar se Firebase está disponível\n            if not FIREBASE_AVAILABLE:\n                print(\"🔧 Firebase não disponível - usando modo demonstração\")\n                self.auth = None\n                self.db = None\n                return\n            \n            # Verificar se temos configurações básicas\n            if not self.config.get(\"apiKey\") or self.config[\"apiKey\"] == \"None\":\n                print(\"🔧 Credenciais Firebase não configuradas - usando modo demonstração\")\n                self.auth = None\n                self.db = None\n                return\n                \n            # Inicializar Pyrebase para autenticação\n            self.firebase = pyrebase.initialize_app(self.config)\n            self.auth = self.firebase.auth()\n            \n            # Inicializar Firebase Admin para Firestore\n            if not firebase_admin._apps:\n                # Tentar usar arquivo de credenciais real primeiro\n                cred_file = \"firebase-service-account.json\"\n                if os.path.exists(cred_file):\n                    cred = credentials.Certificate(cred_file)\n                    firebase_admin.initialize_app(cred)\n                    print(\"Firebase Admin inicializado com credenciais do arquivo\")\n                else:\n                    # Usar credenciais das variáveis de ambiente se disponível\n                    service_account_key = os.environ.get(\"FIREBASE_SERVICE_ACCOUNT_KEY\")\n                    if service_account_key:\n                        import json\n                        cred_dict = json.loads(service_account_key)\n                        cred = credentials.Certificate(cred_dict)\n                        firebase_admin.initialize_app(cred)\n                        print(\"Firebase Admin inicializado com credenciais das variáveis de ambiente\")\n                    else:\n                        # Fallback para modo básico sem admin\n                        print(\"Firebase Admin não inicializado - usando apenas Auth básico\")\n                        self.db = None\n                        return\n            \n            self.db = firestore.client()\n            print(\"Firebase inicializado com sucesso!\")\n            \n        except Exception as e:\n            print(f\"Erro ao inicializar Firebase: {e}\")\n            # Para desenvolvimento, usar dados locais se Firebase falhar\n            self.auth = None\n            self.db = None\n    \n    def sign_up(self, email, password, user_data):\n        \"\"\"Cadastrar novo usuário\"\"\"\n        try:\n            if self.auth:\n                user = self.auth.create_user_with_email_and_password(email, password)\n                user_id = user['localId']\n                \n                # Salvar dados adicionais no Firestore\n                user_doc = {\n                    'uid': user_id,\n                    'email': email,\n                    'name': user_data.get('name', ''),\n                    'user_type': user_data.get('user_type', 'aluno'),\n                    'active': True,\n                    'created_at': datetime.now(),\n                    'last_login': None\n                }\n                \n                if self.db:\n                    self.db.collection('users').document(user_id).set(user_doc)\n                \n                return {'success': True, 'user': user, 'user_data': user_doc}\n            else:\n                # Modo offline para desenvolvimento\n                return {'success': False, 'error': 'Firebase não configurado'}\n                \n        except Exception as e:\n            return {'success': False, 'error': str(e)}\n    \n    def sign_in(self, email, password):\n        \"\"\"Fazer login\"\"\"\n        try:\n            if self.auth:\n                user = self.auth.sign_in_with_email_and_password(email, password)\n                user_id = user['localId']\n                \n                # Buscar dados do usuário no Firestore\n                if self.db:\n                    user_doc = self.db.collection('users').document(user_id).get()\n                    if user_doc.exists:\n                        user_data = user_doc.to_dict()\n                        \n                        # Verificar se usuário está ativo\n                        if user_data and not user_data.get('active', True):\n                            return {'success': False, 'error': 'Usuário banido do sistema'}\n                        \n                        # Atualizar último login\n                        self.db.collection('users').document(user_id).update({\n                            'last_login': datetime.now()\n                        })\n                        \n                        self.current_user = user_data\n                        return {'success': True, 'user': user, 'user_data': user_data}\n                    else:\n                        return {'success': False, 'error': 'Dados do usuário não encontrados'}\n                else:\n                    self.current_user = {'email': email, 'user_type': 'aluno'}\n                    return {'success': True, 'user': user, 'user_data': self.current_user}\n            else:\n                # Modo offline para desenvolvimento - login fake\n                if email == \"admin@escola.com\" and password == \"admin123\":\n                    self.current_user = {\n                        'email': email,\n                        'name': 'Administrador',\n                        'user_type': 'direcao',\n                        'active': True\n                    }\n                    return {'success': True, 'user': {'localId': 'admin123'}, 'user_data': self.current_user}\n                else:\n                    return {'success': False, 'error': 'Credenciais inválidas'}\n                    \n        except Exception as e:\n            return {'success': False, 'error': str(e)}\n    \n    def sign_out(self):\n        \"\"\"Fazer logout\"\"\"\n        self.current_user = None\n        return True\n    \n    def get_current_user(self):\n        \"\"\"Obter usuário atual\"\"\"\n        return self.current_user\n    \n    def has_permission(self, permission):\n        \"\"\"Verificar permissões do usuário\"\"\"\n        if not self.current_user:\n            return False\n            \n        user_type = self.current_user.get('user_type', 'aluno')\n        \n        permissions = {\n            'aluno': ['denunciar', 'ver_avisos', 'emergencia', 'ver_campanhas'],\n            'funcionario': ['denunciar', 'ver_avisos', 'emergencia', 'ver_campanhas', \n                          'registrar_visitantes', 'adicionar_ocorrencias'],\n            'direcao': ['denunciar', 'ver_avisos', 'emergencia', 'ver_campanhas',\n                       'registrar_visitantes', 'adicionar_ocorrencias', 'criar_avisos',\n                       'ver_denuncias', 'cadastrar_campanhas', 'banir_usuarios', 'gerar_relatorios']\n        }\n        \n        return permission in permissions.get(user_type, [])\n\n\n# Instância global do Firebase\nfirebase_manager = FirebaseManager()\n\n\nclass LoginScreen(MDScreen):\n    \"\"\"Tela de Login\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'login'\n        \n        # Layout principal\n        main_layout = MDBoxLayout(orientation='vertical', padding=20, spacing=20)\n        \n        # Logo/Título\n        title = MDLabel(\n            text='Sistema de Segurança Escolar',\n            halign='center',\n            theme_text_color='Primary',\n            font_style='H4'\n        )\n        main_layout.add_widget(title)\n        \n        # Card de login\n        self.login_card = MDCard(\n            orientation='vertical',\n            padding=30,\n            spacing=20,\n            size_hint=(0.8, None),\n            height='400dp',\n            pos_hint={'center_x': 0.5},\n            elevation=10\n        )\n        \n        # Campos de login\n        self.email_field = MDTextField(\n            hint_text='Email',\n            helper_text='Digite seu email institucional',\n            helper_text_mode='persistent',\n            icon_right='email'\n        )\n        \n        self.password_field = MDTextField(\n            hint_text='Senha',\n            helper_text='Digite sua senha',\n            helper_text_mode='persistent',\n            password=True,\n            icon_right='eye-off'\n        )\n        \n        # Botões\n        login_btn = MDRaisedButton(\n            text='ENTRAR',\n            size_hint_y=None,\n            height='50dp',\n            on_release=self.login\n        )\n        \n        register_btn = MDFlatButton(\n            text='CRIAR CONTA',\n            size_hint_y=None,\n            height='40dp',\n            on_release=self.show_register_form\n        )\n        \n        self.login_card.add_widget(self.email_field)\n        self.login_card.add_widget(self.password_field)\n        self.login_card.add_widget(login_btn)\n        self.login_card.add_widget(register_btn)\n        \n        main_layout.add_widget(self.login_card)\n        self.add_widget(main_layout)\n        \n        # Status label\n        self.status_label = MDLabel(\n            text='',\n            halign='center',\n            theme_text_color='Error'\n        )\n        main_layout.add_widget(self.status_label)\n    \n    def login(self, *args):\n        \"\"\"Realizar login\"\"\"\n        email = self.email_field.text.strip()\n        password = self.password_field.text\n        \n        if not email or not password:\n            self.show_message('Por favor, preencha todos os campos')\n            return\n        \n        # Tentar login\n        result = firebase_manager.sign_in(email, password)\n        \n        if result['success']:\n            self.show_message('Login realizado com sucesso!', is_error=False)\n            # Redirecionar para tela principal\n            self.manager.current = 'dashboard'\n        else:\n            self.show_message(f'Erro no login: {result[\"error\"]}')\n    \n    def show_register_form(self, *args):\n        \"\"\"Mostrar tela de cadastro\"\"\"\n        self.manager.current = 'register'\n    \n    def show_message(self, message, is_error=True):\n        \"\"\"Mostrar mensagem de status\"\"\"\n        self.status_label.text = message\n        if is_error:\n            self.status_label.theme_text_color = 'Error'\n        else:\n            self.status_label.theme_text_color = 'Primary'\n\n\nclass RegisterScreen(MDScreen):\n    \"\"\"Tela de Cadastro\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'register'\n        \n        # Layout principal\n        main_layout = MDBoxLayout(orientation='vertical', padding=20, spacing=20)\n        \n        # Título\n        title = MDLabel(\n            text='Criar Nova Conta',\n            halign='center',\n            theme_text_color='Primary',\n            font_style='H5'\n        )\n        main_layout.add_widget(title)\n        \n        # Card de cadastro\n        self.register_card = MDCard(\n            orientation='vertical',\n            padding=30,\n            spacing=15,\n            size_hint=(0.8, None),\n            height='500dp',\n            pos_hint={'center_x': 0.5},\n            elevation=10\n        )\n        \n        # Campos\n        self.name_field = MDTextField(\n            hint_text='Nome Completo',\n            icon_right='account'\n        )\n        \n        self.email_field = MDTextField(\n            hint_text='Email Institucional',\n            icon_right='email'\n        )\n        \n        self.password_field = MDTextField(\n            hint_text='Senha',\n            password=True,\n            icon_right='eye-off'\n        )\n        \n        self.confirm_password_field = MDTextField(\n            hint_text='Confirmar Senha',\n            password=True,\n            icon_right='eye-off'\n        )\n        \n        # Spinner para tipo de usuário\n        try:\n            from kivymd.uix.menu import MDDropdownMenu\n            from kivymd.uix.button import MDRectangleFlatButton\n        except ImportError:\n            MDDropdownMenu = MDRectangleFlatButton = object\n        \n        self.user_type_button = MDRectangleFlatButton(\n            text=\"Tipo de Usuário: Aluno\",\n            size_hint_y=None,\n            height='40dp'\n        )\n        \n        user_type_items = [\n            {\"text\": \"Aluno\", \"viewclass\": \"OneLineListItem\", \"on_release\": lambda x=\"aluno\": self.set_user_type(x)},\n            {\"text\": \"Funcionário\", \"viewclass\": \"OneLineListItem\", \"on_release\": lambda x=\"funcionario\": self.set_user_type(x)},\n            {\"text\": \"Direção\", \"viewclass\": \"OneLineListItem\", \"on_release\": lambda x=\"direcao\": self.set_user_type(x)}\n        ]\n        \n        self.user_type_menu = MDDropdownMenu(\n            caller=self.user_type_button,\n            items=user_type_items,\n            width_mult=4\n        )\n        \n        self.user_type_button.bind(on_release=self.user_type_menu.open)\n        self.selected_user_type = 'aluno'\n        \n        # Botões\n        register_btn = MDRaisedButton(\n            text='CADASTRAR',\n            size_hint_y=None,\n            height='50dp',\n            on_release=self.register\n        )\n        \n        back_btn = MDFlatButton(\n            text='VOLTAR',\n            size_hint_y=None,\n            height='40dp',\n            on_release=self.go_back\n        )\n        \n        self.register_card.add_widget(self.name_field)\n        self.register_card.add_widget(self.email_field)\n        self.register_card.add_widget(self.password_field)\n        self.register_card.add_widget(self.confirm_password_field)\n        self.register_card.add_widget(self.user_type_button)\n        self.register_card.add_widget(register_btn)\n        self.register_card.add_widget(back_btn)\n        \n        main_layout.add_widget(self.register_card)\n        self.add_widget(main_layout)\n        \n        # Status label\n        self.status_label = MDLabel(\n            text='',\n            halign='center',\n            theme_text_color='Error'\n        )\n        main_layout.add_widget(self.status_label)\n    \n    def set_user_type(self, user_type):\n        \"\"\"Definir tipo de usuário\"\"\"\n        self.selected_user_type = user_type\n        type_names = {\n            'aluno': 'Aluno',\n            'funcionario': 'Funcionário',\n            'direcao': 'Direção'\n        }\n        self.user_type_button.text = f\"Tipo de Usuário: {type_names[user_type]}\"\n        self.user_type_menu.dismiss()\n    \n    def register(self, *args):\n        \"\"\"Realizar cadastro\"\"\"\n        name = self.name_field.text.strip()\n        email = self.email_field.text.strip()\n        password = self.password_field.text\n        confirm_password = self.confirm_password_field.text\n        \n        # Validações\n        if not all([name, email, password, confirm_password]):\n            self.show_message('Por favor, preencha todos os campos')\n            return\n        \n        if password != confirm_password:\n            self.show_message('As senhas não coincidem')\n            return\n        \n        if len(password) < 6:\n            self.show_message('A senha deve ter pelo menos 6 caracteres')\n            return\n        \n        # Tentar cadastro\n        user_data = {\n            'name': name,\n            'user_type': self.selected_user_type\n        }\n        \n        result = firebase_manager.sign_up(email, password, user_data)\n        \n        if result['success']:\n            self.show_message('Cadastro realizado com sucesso!', is_error=False)\n            Clock.schedule_once(lambda dt: setattr(self.manager, 'current', 'login'), 2)\n        else:\n            self.show_message(f'Erro no cadastro: {result[\"error\"]}')\n    \n    def go_back(self, *args):\n        \"\"\"Voltar para tela de login\"\"\"\n        self.manager.current = 'login'\n    \n    def show_message(self, message, is_error=True):\n        \"\"\"Mostrar mensagem de status\"\"\"\n        self.status_label.text = message\n        if is_error:\n            self.status_label.theme_text_color = 'Error'\n        else:\n            self.status_label.theme_text_color = 'Primary'\n\n\nclass DashboardScreen(MDScreen):\n    \"\"\"Tela Principal (Dashboard)\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'dashboard'\n        self.build_dashboard()\n    \n    def build_dashboard(self):\n        \"\"\"Construir o dashboard\"\"\"\n        # Layout principal com navigation drawer\n        try:\n            from kivymd.uix.navigationdrawer import MDNavigationLayout, MDNavigationDrawer\n        except ImportError:\n            MDNavigationLayout = MDNavigationDrawer = object\n        \n        self.nav_layout = MDNavigationLayout()\n        \n        # Conteúdo principal\n        self.main_content = MDBoxLayout(orientation='vertical')\n        \n        # Toolbar\n        self.toolbar = MDTopAppBar(\n            title=\"Dashboard - Segurança Escolar\",\n            left_action_items=[[\"menu\", lambda x: self.nav_drawer.set_state(\"open\")]],\n            right_action_items=[[\"logout\", self.logout]]\n        )\n        self.main_content.add_widget(self.toolbar)\n        \n        # Área de conteúdo\n        self.content_area = MDBoxLayout(\n            orientation='vertical',\n            padding=10,\n            spacing=10\n        )\n        \n        # Cards de funcionalidades principais\n        self.create_main_cards()\n        \n        self.main_content.add_widget(self.content_area)\n        \n        # Navigation Drawer\n        self.nav_drawer = MDNavigationDrawer()\n        self.create_navigation_menu()\n        \n        self.nav_layout.add_widget(self.main_content)\n        self.nav_layout.add_widget(self.nav_drawer)\n        \n        self.add_widget(self.nav_layout)\n    \n    def create_main_cards(self):\n        \"\"\"Criar cards principais do dashboard\"\"\"\n        user = firebase_manager.get_current_user()\n        if not user:\n            return\n        \n        # Botão de Emergência (sempre visível)\n        emergency_card = MDCard(\n            MDBoxLayout(\n                MDLabel(\n                    text=\"🚨 EMERGÊNCIA\",\n                    halign=\"center\",\n                    font_style=\"H6\",\n                    theme_text_color=\"Error\"\n                ),\n                MDRaisedButton(\n                    text=\"ACIONAR EMERGÊNCIA\",\n                    theme_icon_color=\"Custom\",\n                    md_bg_color=\"red\",\n                    on_release=self.trigger_emergency\n                ),\n                orientation='vertical',\n                padding=15,\n                spacing=10\n            ),\n            size_hint=(1, None),\n            height='120dp',\n            elevation=5\n        )\n        self.content_area.add_widget(emergency_card)\n        \n        # Cards baseados em permissões\n        if firebase_manager.has_permission('denunciar'):\n            report_card = MDCard(\n                MDBoxLayout(\n                    MDLabel(text=\"📝 Denúncias\", font_style=\"H6\"),\n                    MDRaisedButton(\n                        text=\"Nova Denúncia\",\n                        on_release=self.open_reports\n                    ),\n                    orientation='vertical',\n                    padding=15,\n                    spacing=10\n                ),\n                size_hint=(1, None),\n                height='100dp'\n            )\n            self.content_area.add_widget(report_card)\n        \n        if firebase_manager.has_permission('ver_avisos'):\n            notices_card = MDCard(\n                MDBoxLayout(\n                    MDLabel(text=\"📢 Avisos\", font_style=\"H6\"),\n                    MDRaisedButton(\n                        text=\"Ver Avisos\",\n                        on_release=self.open_notices\n                    ),\n                    orientation='vertical',\n                    padding=15,\n                    spacing=10\n                ),\n                size_hint=(1, None),\n                height='100dp'\n            )\n            self.content_area.add_widget(notices_card)\n        \n        if firebase_manager.has_permission('registrar_visitantes'):\n            visitors_card = MDCard(\n                MDBoxLayout(\n                    MDLabel(text=\"👥 Visitantes\", font_style=\"H6\"),\n                    MDRaisedButton(\n                        text=\"Registrar Visitante\",\n                        on_release=self.open_visitors\n                    ),\n                    orientation='vertical',\n                    padding=15,\n                    spacing=10\n                ),\n                size_hint=(1, None),\n                height='100dp'\n            )\n            self.content_area.add_widget(visitors_card)\n    \n    def create_navigation_menu(self):\n        \"\"\"Criar menu de navegação lateral\"\"\"\n        menu_layout = MDBoxLayout(orientation='vertical', padding=10, spacing=5)\n        \n        # Header do menu\n        user = firebase_manager.get_current_user()\n        if user:\n            user_info = MDLabel(\n                text=f\"Olá, {user.get('name', user.get('email', 'Usuário'))}\",\n                font_style=\"Subtitle1\",\n                size_hint_y=None,\n                height='40dp'\n            )\n            menu_layout.add_widget(user_info)\n        \n        # Itens do menu baseados em permissões\n        menu_items = []\n        \n        if firebase_manager.has_permission('ver_avisos'):\n            menu_items.append((\"📢 Avisos\", self.open_notices))\n            \n        if firebase_manager.has_permission('denunciar'):\n            menu_items.append((\"📝 Denúncias\", self.open_reports))\n            \n        if firebase_manager.has_permission('registrar_visitantes'):\n            menu_items.append((\"👥 Visitantes\", self.open_visitors))\n            \n        if firebase_manager.has_permission('adicionar_ocorrencias'):\n            menu_items.append((\"📋 Ocorrências\", self.open_incidents))\n            \n        if firebase_manager.has_permission('ver_campanhas'):\n            menu_items.append((\"📚 Campanhas\", self.open_campaigns))\n            \n        menu_items.append((\"Simulados\", self.open_drills))\n        menu_items.append((\"Segurança\", self.open_security))\n        menu_items.append((\"Relatórios\", self.open_reports_admin))\n        menu_items.append((\"Configurações\", self.open_settings))\n        menu_items.append((\"Sair\", self.logout))\n        \n        # Mapeamento de ícones para cada item do menu\n        menu_icons = {\n            \"Avisos\": \"bullhorn\",\n            \"Denúncias\": \"file-document\", \n            \"Visitantes\": \"account-group\",\n            \"Ocorrências\": \"clipboard-list\",\n            \"Campanhas\": \"school\",\n            \"Simulados\": \"calendar-clock\",\n            \"Segurança\": \"shield-check\",\n            \"Relatórios\": \"chart-bar\",\n            \"Configurações\": \"cog\",\n            \"Sair\": \"logout\"\n        }\n        \n        for item_text, callback in menu_items:\n            # Layout horizontal para ícone + texto\n            item_layout = MDBoxLayout(\n                orientation='horizontal',\n                size_hint_y=None,\n                height='45dp',\n                spacing=10,\n                padding=[10, 5, 10, 5]\n            )\n            \n            # Ícone\n            icon = menu_icons.get(item_text, \"circle\")\n            icon_btn = MDIconButton(\n                icon=icon,\n                theme_icon_color=\"Primary\",\n                size_hint_x=None,\n                width='30dp'\n            )\n            \n            # Botão de texto\n            text_btn = MDFlatButton(\n                text=item_text,\n                size_hint_x=None,\n                width='150dp',\n                on_release=callback\n            )\n            \n            item_layout.add_widget(icon_btn)\n            item_layout.add_widget(text_btn)\n            menu_layout.add_widget(item_layout)\n        \n        self.nav_drawer.add_widget(menu_layout)\n    \n    def trigger_emergency(self, *args):\n        \"\"\"Acionar emergência\"\"\"\n        dialog = MDDialog(\n            title=\"Confirmação de Emergência\",\n            text=\"Você tem certeza que deseja acionar o alerta de emergência?\",\n            buttons=[\n                MDFlatButton(\n                    text=\"CANCELAR\",\n                    theme_text_color=\"Custom\",\n                    text_color=[1, 0, 0, 1],\n                    on_release=lambda x: dialog.dismiss()\n                ),\n                MDFlatButton(\n                    text=\"CONFIRMAR\",\n                    theme_text_color=\"Custom\",\n                    text_color=[0, 1, 0, 1],\n                    on_release=lambda x: self.send_emergency_alert(dialog)\n                ),\n            ],\n        )\n        dialog.open()\n    \n    def send_emergency_alert(self, dialog):\n        \"\"\"Enviar alerta de emergência\"\"\"\n        try:\n            # Aqui seria enviado o push notification\n            user = firebase_manager.get_current_user()\n            alert_data = {\n                'type': 'emergency',\n                'timestamp': datetime.now().isoformat(),\n                'user': user.get('name', 'Anônimo') if user else 'Anônimo',\n                'status': 'active'\n            }\n            \n            # Salvar no Firestore (se disponível)\n            if firebase_manager.db:\n                firebase_manager.db.collection('emergency_alerts').add(alert_data)\n            \n            dialog.dismiss()\n            \n            success_dialog = MDDialog(\n                title=\"Emergência Acionada!\",\n                text=\"O alerta foi enviado para a equipe de segurança.\",\n                buttons=[MDFlatButton(text=\"OK\", on_release=lambda x: success_dialog.dismiss())]\n            )\n            success_dialog.open()\n            \n        except Exception as e:\n            dialog.dismiss()\n            error_dialog = MDDialog(\n                title=\"Erro\",\n                text=f\"Não foi possível enviar o alerta: {str(e)}\",\n                buttons=[MDFlatButton(text=\"OK\", on_release=lambda x: error_dialog.dismiss())]\n            )\n            error_dialog.open()\n    \n    def open_reports(self, *args):\n        \"\"\"Abrir tela de denúncias\"\"\"\n        self.manager.current = 'reports'\n        self.nav_drawer.set_state(\"close\")\n    \n    def open_notices(self, *args):\n        \"\"\"Abrir tela de avisos\"\"\"\n        self.manager.current = 'notices'\n        self.nav_drawer.set_state(\"close\")\n    \n    def open_visitors(self, *args):\n        \"\"\"Abrir tela de visitantes\"\"\"\n        self.manager.current = 'visitors'\n        self.nav_drawer.set_state(\"close\")\n    \n    def open_incidents(self, *args):\n        \"\"\"Abrir tela de ocorrências\"\"\"\n        self.manager.current = 'incidents'\n        self.nav_drawer.set_state(\"close\")\n    \n    def open_campaigns(self, *args):\n        \"\"\"Abrir tela de campanhas\"\"\"\n        self.manager.current = 'campaigns'\n        self.nav_drawer.set_state(\"close\")\n    \n    def open_security(self, *args):\n        \"\"\"Abrir tela de segurança\"\"\"\n        self.manager.current = 'security'\n        self.nav_drawer.set_state(\"close\")\n    \n    def open_drills(self, *args):\n        \"\"\"Abrir tela de simulados\"\"\"\n        self.manager.current = 'drills'\n        self.nav_drawer.set_state(\"close\")\n    \n    def open_reports_admin(self, *args):\n        \"\"\"Abrir tela de relatórios administrativos\"\"\"\n        if firebase_manager.has_permission('gerar_relatorios'):\n            self.manager.current = 'admin_reports'\n            self.nav_drawer.set_state(\"close\")\n    \n    def open_settings(self, *args):\n        \"\"\"Abrir configurações\"\"\"\n        self.manager.current = 'settings'\n        self.nav_drawer.set_state(\"close\")\n    \n    def logout(self, *args):\n        \"\"\"Fazer logout\"\"\"\n        firebase_manager.sign_out()\n        self.manager.current = 'login'\n        self.nav_drawer.set_state(\"close\")\n\n\nclass ReportsScreen(MDScreen):\n    \"\"\"Tela de Denúncias\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'reports'\n        self.build_screen()\n    \n    def build_screen(self):\n        layout = MDBoxLayout(orientation='vertical')\n        \n        # Toolbar\n        toolbar = MDTopAppBar(\n            title=\"Denúncias\",\n            left_action_items=[[\"arrow-left\", lambda x: self.go_back()]]\n        )\n        layout.add_widget(toolbar)\n        \n        # Conteúdo\n        content = MDBoxLayout(orientation='vertical', padding=20, spacing=15)\n        \n        # Card de nova denúncia\n        new_report_card = MDCard(\n            orientation='vertical',\n            padding=20,\n            spacing=10,\n            size_hint=(1, None),\n            height='300dp'\n        )\n        \n        title_label = MDLabel(text=\"Nova Denúncia\", font_style=\"H6\")\n        \n        self.report_type = MDTextField(\n            hint_text=\"Tipo da denúncia (bullying, violência, etc.)\",\n            multiline=False\n        )\n        \n        self.report_description = MDTextField(\n            hint_text=\"Descrição detalhada da situação\",\n            multiline=True,\n            max_text_length=500\n        )\n        \n        # Switch para denúncia anônima\n        anonymous_layout = MDBoxLayout(size_hint_y=None, height='40dp')\n        anonymous_layout.add_widget(MDLabel(text=\"Denúncia Anônima\", size_hint_x=0.7))\n        self.anonymous_switch = MDSwitch(size_hint_x=0.3)\n        anonymous_layout.add_widget(self.anonymous_switch)\n        \n        submit_btn = MDRaisedButton(\n            text=\"ENVIAR DENÚNCIA\",\n            on_release=self.submit_report\n        )\n        \n        new_report_card.add_widget(title_label)\n        new_report_card.add_widget(self.report_type)\n        new_report_card.add_widget(self.report_description)\n        new_report_card.add_widget(anonymous_layout)\n        new_report_card.add_widget(submit_btn)\n        \n        content.add_widget(new_report_card)\n        \n        # Lista de denúncias (se for direção)\n        if firebase_manager.has_permission('ver_denuncias'):\n            reports_list_card = MDCard(\n                orientation='vertical',\n                padding=15,\n                spacing=10,\n                size_hint=(1, None),\n                height='200dp'\n            )\n            \n            reports_title = MDLabel(text=\"Denúncias Recebidas\", font_style=\"H6\")\n            reports_list_card.add_widget(reports_title)\n            \n            # Lista seria carregada do Firebase\n            sample_reports = [\n                \"Bullying no pátio - 15/09/2025\",\n                \"Vandalismo na biblioteca - 14/09/2025\", \n                \"Comportamento inadequado - 13/09/2025\"\n            ]\n            \n            for report in sample_reports:\n                item = OneLineListItem(text=report)\n                reports_list_card.add_widget(item)\n            \n            content.add_widget(reports_list_card)\n        \n        layout.add_widget(content)\n        self.add_widget(layout)\n    \n    def submit_report(self, *args):\n        report_type = self.report_type.text.strip()\n        description = self.report_description.text.strip()\n        is_anonymous = self.anonymous_switch.active\n        \n        if not report_type or not description:\n            self.show_dialog(\"Erro\", \"Preencha todos os campos obrigatórios\")\n            return\n        \n        user = firebase_manager.get_current_user()\n        \n        report_data = {\n            'type': report_type,\n            'description': description,\n            'anonymous': is_anonymous,\n            'reporter': None if is_anonymous else (user.get('name', 'Anônimo') if user else 'Anônimo'),\n            'reporter_email': None if is_anonymous else (user.get('email') if user else None),\n            'timestamp': datetime.now().isoformat(),\n            'status': 'pending'\n        }\n        \n        try:\n            # Salvar no Firestore\n            if firebase_manager.db:\n                firebase_manager.db.collection('reports').add(report_data)\n            \n            # Limpar campos\n            self.report_type.text = \"\"\n            self.report_description.text = \"\"\n            self.anonymous_switch.active = False\n            \n            self.show_dialog(\"Sucesso\", \"Denúncia enviada com sucesso!\")\n            \n        except Exception as e:\n            self.show_dialog(\"Erro\", f\"Não foi possível enviar a denúncia: {str(e)}\")\n    \n    def show_dialog(self, title, text):\n        dialog = MDDialog(\n            title=title,\n            text=text,\n            buttons=[MDFlatButton(text=\"OK\", on_release=lambda x: dialog.dismiss())]\n        )\n        dialog.open()\n    \n    def go_back(self):\n        self.manager.current = 'dashboard'\n\n\nclass NoticesScreen(MDScreen):\n    \"\"\"Tela de Avisos\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'notices'\n        self.build_screen()\n    \n    def build_screen(self):\n        layout = MDBoxLayout(orientation='vertical')\n        \n        # Toolbar\n        toolbar = MDTopAppBar(\n            title=\"Avisos\",\n            left_action_items=[[\"arrow-left\", lambda x: self.go_back()]]\n        )\n        layout.add_widget(toolbar)\n        \n        content = MDBoxLayout(orientation='vertical', padding=20, spacing=15)\n        \n        # Se for direção, mostrar formulário para criar aviso\n        if firebase_manager.has_permission('criar_avisos'):\n            create_notice_card = MDCard(\n                orientation='vertical',\n                padding=20,\n                spacing=10,\n                size_hint=(1, None),\n                height='250dp'\n            )\n            \n            create_title = MDLabel(text=\"Criar Novo Aviso\", font_style=\"H6\")\n            \n            self.notice_title = MDTextField(hint_text=\"Título do aviso\")\n            self.notice_content = MDTextField(\n                hint_text=\"Conteúdo do aviso\",\n                multiline=True\n            )\n            \n            # Switch para aviso urgente\n            urgent_layout = MDBoxLayout(size_hint_y=None, height='40dp')\n            urgent_layout.add_widget(MDLabel(text=\"Aviso Urgente\", size_hint_x=0.7))\n            self.urgent_switch = MDSwitch(size_hint_x=0.3)\n            urgent_layout.add_widget(self.urgent_switch)\n            \n            create_btn = MDRaisedButton(\n                text=\"PUBLICAR AVISO\",\n                on_release=self.create_notice\n            )\n            \n            create_notice_card.add_widget(create_title)\n            create_notice_card.add_widget(self.notice_title)\n            create_notice_card.add_widget(self.notice_content)\n            create_notice_card.add_widget(urgent_layout)\n            create_notice_card.add_widget(create_btn)\n            \n            content.add_widget(create_notice_card)\n        \n        # Lista de avisos\n        notices_card = MDCard(\n            orientation='vertical',\n            padding=15,\n            spacing=10,\n            size_hint=(1, None),\n            height='300dp'\n        )\n        \n        notices_title = MDLabel(text=\"Avisos Recentes\", font_style=\"H6\")\n        notices_card.add_widget(notices_title)\n        \n        # Avisos de exemplo\n        sample_notices = [\n            {\"text\": \"URGENTE: Simulado de evacuação amanhã às 10h\", \"icon\": \"alert-circle\", \"color\": \"red\"},\n            {\"text\": \"Reunião de pais - 25/09/2025\", \"icon\": \"information-outline\", \"color\": \"blue\"},\n            {\"text\": \"Obras no refeitório - funcionamento reduzido\", \"icon\": \"tools\", \"color\": \"orange\"},\n            {\"text\": \"Nova campanha contra o bullying\", \"icon\": \"school\", \"color\": \"green\"}\n        ]\n        \n        for notice in sample_notices:\n            notice_layout = MDBoxLayout(\n                size_hint_y=None,\n                height='60dp',\n                spacing=10,\n                padding=[10, 5, 10, 5]\n            )\n            \n            # Ícone do aviso\n            notice_icon = MDIconButton(\n                icon=notice[\"icon\"],\n                theme_icon_color=\"Custom\",\n                icon_color=notice[\"color\"],\n                size_hint_x=None,\n                width='40dp'\n            )\n            \n            # Texto do aviso\n            notice_label = MDLabel(text=notice[\"text\"])\n            \n            notice_layout.add_widget(notice_icon)\n            notice_layout.add_widget(notice_label)\n            notices_card.add_widget(notice_layout)\n        \n        content.add_widget(notices_card)\n        layout.add_widget(content)\n        self.add_widget(layout)\n    \n    def create_notice(self, *args):\n        title = self.notice_title.text.strip()\n        content = self.notice_content.text.strip()\n        is_urgent = self.urgent_switch.active\n        \n        if not title or not content:\n            self.show_dialog(\"Erro\", \"Preencha todos os campos\")\n            return\n        \n        user = firebase_manager.get_current_user()\n        \n        notice_data = {\n            'title': title,\n            'content': content,\n            'urgent': is_urgent,\n            'author': user.get('name', 'Administração') if user else 'Administração',\n            'timestamp': datetime.now().isoformat(),\n            'active': True\n        }\n        \n        try:\n            if firebase_manager.db:\n                firebase_manager.db.collection('notices').add(notice_data)\n            \n            # Se for urgente, enviar push notification\n            if is_urgent:\n                # Aqui seria implementado o envio de push notification\n                pass\n            \n            self.notice_title.text = \"\"\n            self.notice_content.text = \"\"\n            self.urgent_switch.active = False\n            \n            self.show_dialog(\"Sucesso\", \"Aviso publicado com sucesso!\")\n            \n        except Exception as e:\n            self.show_dialog(\"Erro\", f\"Erro ao publicar aviso: {str(e)}\")\n    \n    def show_dialog(self, title, text):\n        dialog = MDDialog(\n            title=title,\n            text=text,\n            buttons=[MDFlatButton(text=\"OK\", on_release=lambda x: dialog.dismiss())]\n        )\n        dialog.open()\n    \n    def go_back(self):\n        self.manager.current = 'dashboard'\n\n\nclass VisitorsScreen(MDScreen):\n    \"\"\"Tela de Controle de Visitantes\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'visitors'\n        self.build_screen()\n    \n    def build_screen(self):\n        layout = MDBoxLayout(orientation='vertical')\n        \n        toolbar = MDTopAppBar(\n            title=\"Controle de Visitantes\",\n            left_action_items=[[\"arrow-left\", lambda x: self.go_back()]]\n        )\n        layout.add_widget(toolbar)\n        \n        content = MDBoxLayout(orientation='vertical', padding=20, spacing=15)\n        \n        # Formulário de registro\n        register_card = MDCard(\n            orientation='vertical',\n            padding=20,\n            spacing=10,\n            size_hint=(1, None),\n            height='350dp'\n        )\n        \n        form_title = MDLabel(text=\"Registrar Visitante\", font_style=\"H6\")\n        \n        self.visitor_name = MDTextField(hint_text=\"Nome completo\")\n        self.visitor_doc = MDTextField(hint_text=\"Documento (CPF/RG)\")\n        self.visitor_purpose = MDTextField(hint_text=\"Motivo da visita\")\n        self.visitor_destination = MDTextField(hint_text=\"Local de destino na escola\")\n        \n        register_btn = MDRaisedButton(\n            text=\"REGISTRAR ENTRADA\",\n            on_release=self.register_visitor\n        )\n        \n        register_card.add_widget(form_title)\n        register_card.add_widget(self.visitor_name)\n        register_card.add_widget(self.visitor_doc)\n        register_card.add_widget(self.visitor_purpose)\n        register_card.add_widget(self.visitor_destination)\n        register_card.add_widget(register_btn)\n        \n        content.add_widget(register_card)\n        \n        # Lista de visitantes ativos\n        active_visitors_card = MDCard(\n            orientation='vertical',\n            padding=15,\n            spacing=10,\n            size_hint=(1, None),\n            height='200dp'\n        )\n        \n        active_title = MDLabel(text=\"Visitantes na Escola\", font_style=\"H6\")\n        active_visitors_card.add_widget(active_title)\n        \n        # Lista seria carregada do Firebase\n        sample_visitors = [\n            \"João Silva - CPF: 123.456.789-00 - 14:30\",\n            \"Maria Santos - RG: 12.345.678-9 - 15:15\"\n        ]\n        \n        for visitor in sample_visitors:\n            visitor_layout = MDBoxLayout(size_hint_y=None, height='40dp')\n            visitor_layout.add_widget(MDLabel(text=visitor, size_hint_x=0.8))\n            \n            checkout_btn = MDIconButton(\n                icon=\"logout\",\n                theme_icon_color=\"Custom\",\n                icon_color=\"red\",\n                on_release=lambda x, v=visitor: self.checkout_visitor(v)\n            )\n            visitor_layout.add_widget(checkout_btn)\n            active_visitors_card.add_widget(visitor_layout)\n        \n        content.add_widget(active_visitors_card)\n        layout.add_widget(content)\n        self.add_widget(layout)\n    \n    def register_visitor(self, *args):\n        name = self.visitor_name.text.strip()\n        document = self.visitor_doc.text.strip()\n        purpose = self.visitor_purpose.text.strip()\n        destination = self.visitor_destination.text.strip()\n        \n        if not all([name, document, purpose, destination]):\n            self.show_dialog(\"Erro\", \"Preencha todos os campos\")\n            return\n        \n        user = firebase_manager.get_current_user()\n        \n        visitor_data = {\n            'name': name,\n            'document': document,\n            'purpose': purpose,\n            'destination': destination,\n            'check_in': datetime.now().isoformat(),\n            'check_out': None,\n            'registered_by': user.get('name', 'Funcionário') if user else 'Funcionário',\n            'status': 'active'\n        }\n        \n        try:\n            if firebase_manager.db:\n                firebase_manager.db.collection('visitors').add(visitor_data)\n            \n            # Limpar campos\n            self.visitor_name.text = \"\"\n            self.visitor_doc.text = \"\"\n            self.visitor_purpose.text = \"\"\n            self.visitor_destination.text = \"\"\n            \n            self.show_dialog(\"Sucesso\", \"Visitante registrado com sucesso!\")\n            \n        except Exception as e:\n            self.show_dialog(\"Erro\", f\"Erro ao registrar visitante: {str(e)}\")\n    \n    def checkout_visitor(self, visitor_info):\n        # Implementar checkout do visitante\n        self.show_dialog(\"Saída\", f\"Registrando saída do visitante\")\n    \n    def show_dialog(self, title, text):\n        dialog = MDDialog(\n            title=title,\n            text=text,\n            buttons=[MDFlatButton(text=\"OK\", on_release=lambda x: dialog.dismiss())]\n        )\n        dialog.open()\n    \n    def go_back(self):\n        self.manager.current = 'dashboard'\n\n\nclass IncidentsScreen(MDScreen):\n    \"\"\"Tela de Diário de Ocorrências\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'incidents'\n        self.build_screen()\n    \n    def build_screen(self):\n        layout = MDBoxLayout(orientation='vertical')\n        \n        toolbar = MDTopAppBar(\n            title=\"Diário de Ocorrências\",\n            left_action_items=[[\"arrow-left\", lambda x: self.go_back()]]\n        )\n        layout.add_widget(toolbar)\n        \n        content = MDBoxLayout(orientation='vertical', padding=20, spacing=15)\n        \n        # Formulário de nova ocorrência\n        new_incident_card = MDCard(\n            orientation='vertical',\n            padding=20,\n            spacing=10,\n            size_hint=(1, None),\n            height='300dp'\n        )\n        \n        form_title = MDLabel(text=\"Nova Ocorrência\", font_style=\"H6\")\n        \n        self.incident_type = MDTextField(hint_text=\"Tipo de ocorrência\")\n        self.incident_location = MDTextField(hint_text=\"Local da ocorrência\")\n        self.incident_description = MDTextField(\n            hint_text=\"Descrição detalhada\",\n            multiline=True\n        )\n        \n        add_btn = MDRaisedButton(\n            text=\"REGISTRAR OCORRÊNCIA\",\n            on_release=self.add_incident\n        )\n        \n        new_incident_card.add_widget(form_title)\n        new_incident_card.add_widget(self.incident_type)\n        new_incident_card.add_widget(self.incident_location)\n        new_incident_card.add_widget(self.incident_description)\n        new_incident_card.add_widget(add_btn)\n        \n        content.add_widget(new_incident_card)\n        \n        # Lista de ocorrências recentes\n        incidents_card = MDCard(\n            orientation='vertical',\n            padding=15,\n            spacing=10,\n            size_hint=(1, None),\n            height='200dp'\n        )\n        \n        incidents_title = MDLabel(text=\"Ocorrências Recentes\", font_style=\"H6\")\n        incidents_card.add_widget(incidents_title)\n        \n        sample_incidents = [\n            \"Equipamento danificado - Lab. Informática - 15/09\",\n            \"Conflito entre alunos - Pátio - 14/09\",\n            \"Problema elétrico - Sala 201 - 13/09\"\n        ]\n        \n        for incident in sample_incidents:\n            item = OneLineListItem(text=incident)\n            incidents_card.add_widget(item)\n        \n        content.add_widget(incidents_card)\n        layout.add_widget(content)\n        self.add_widget(layout)\n    \n    def add_incident(self, *args):\n        incident_type = self.incident_type.text.strip()\n        location = self.incident_location.text.strip()\n        description = self.incident_description.text.strip()\n        \n        if not all([incident_type, location, description]):\n            self.show_dialog(\"Erro\", \"Preencha todos os campos\")\n            return\n        \n        user = firebase_manager.get_current_user()\n        \n        incident_data = {\n            'type': incident_type,\n            'location': location,\n            'description': description,\n            'timestamp': datetime.now().isoformat(),\n            'reported_by': user.get('name', 'Funcionário') if user else 'Funcionário',\n            'status': 'open'\n        }\n        \n        try:\n            if firebase_manager.db:\n                firebase_manager.db.collection('incidents').add(incident_data)\n            \n            # Limpar campos\n            self.incident_type.text = \"\"\n            self.incident_location.text = \"\"\n            self.incident_description.text = \"\"\n            \n            self.show_dialog(\"Sucesso\", \"Ocorrência registrada com sucesso!\")\n            \n        except Exception as e:\n            self.show_dialog(\"Erro\", f\"Erro ao registrar ocorrência: {str(e)}\")\n    \n    def show_dialog(self, title, text):\n        dialog = MDDialog(\n            title=title,\n            text=text,\n            buttons=[MDFlatButton(text=\"OK\", on_release=lambda x: dialog.dismiss())]\n        )\n        dialog.open()\n    \n    def go_back(self):\n        self.manager.current = 'dashboard'\n\n\nclass CampaignsScreen(MDScreen):\n    \"\"\"Tela de Campanhas Educativas\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'campaigns'\n        self.build_screen()\n    \n    def build_screen(self):\n        layout = MDBoxLayout(orientation='vertical')\n        \n        toolbar = MDTopAppBar(\n            title=\"Campanhas Educativas\",\n            left_action_items=[[\"arrow-left\", lambda x: self.go_back()]]\n        )\n        layout.add_widget(toolbar)\n        \n        content = MDBoxLayout(orientation='vertical', padding=20, spacing=15)\n        \n        # Se for direção, mostrar formulário para criar campanha\n        if firebase_manager.has_permission('cadastrar_campanhas'):\n            create_campaign_card = MDCard(\n                orientation='vertical',\n                padding=20,\n                spacing=10,\n                size_hint=(1, None),\n                height='300dp'\n            )\n            \n            form_title = MDLabel(text=\"Nova Campanha\", font_style=\"H6\")\n            \n            self.campaign_title = MDTextField(hint_text=\"Título da campanha\")\n            self.campaign_description = MDTextField(\n                hint_text=\"Descrição e objetivos\",\n                multiline=True\n            )\n            self.campaign_duration = MDTextField(hint_text=\"Duração (ex: 1 semana, 1 mês)\")\n            \n            create_btn = MDRaisedButton(\n                text=\"CRIAR CAMPANHA\",\n                on_release=self.create_campaign\n            )\n            \n            create_campaign_card.add_widget(form_title)\n            create_campaign_card.add_widget(self.campaign_title)\n            create_campaign_card.add_widget(self.campaign_description)\n            create_campaign_card.add_widget(self.campaign_duration)\n            create_campaign_card.add_widget(create_btn)\n            \n            content.add_widget(create_campaign_card)\n        \n        # Lista de campanhas ativas\n        campaigns_card = MDCard(\n            orientation='vertical',\n            padding=15,\n            spacing=10,\n            size_hint=(1, None),\n            height='300dp'\n        )\n        \n        campaigns_title = MDLabel(text=\"Campanhas Ativas\", font_style=\"H6\")\n        campaigns_card.add_widget(campaigns_title)\n        \n        sample_campaigns = [\n            {\"text\": \"Campanha Anti-Bullying - Setembro 2025\", \"icon\": \"shield-account\"},\n            {\"text\": \"Diga Não às Drogas - Mês todo\", \"icon\": \"close-circle-outline\"},\n            {\"text\": \"Respeito e Inclusão - Permanente\", \"icon\": \"account-heart\"},\n            {\"text\": \"Sustentabilidade na Escola - Outubro\", \"icon\": \"leaf\"}\n        ]\n        \n        for campaign in sample_campaigns:\n            campaign_layout = MDBoxLayout(\n                size_hint_y=None,\n                height='60dp',\n                spacing=10,\n                padding=[10, 5, 10, 5]\n            )\n            \n            # Ícone da campanha\n            campaign_icon = MDIconButton(\n                icon=campaign[\"icon\"],\n                theme_icon_color=\"Primary\",\n                size_hint_x=None,\n                width='40dp'\n            )\n            \n            # Texto da campanha\n            campaign_label = MDLabel(text=campaign[\"text\"])\n            \n            campaign_layout.add_widget(campaign_icon)\n            campaign_layout.add_widget(campaign_label)\n            campaigns_card.add_widget(campaign_layout)\n        \n        content.add_widget(campaigns_card)\n        layout.add_widget(content)\n        self.add_widget(layout)\n    \n    def create_campaign(self, *args):\n        title = self.campaign_title.text.strip()\n        description = self.campaign_description.text.strip()\n        duration = self.campaign_duration.text.strip()\n        \n        if not all([title, description, duration]):\n            self.show_dialog(\"Erro\", \"Preencha todos os campos\")\n            return\n        \n        user = firebase_manager.get_current_user()\n        \n        campaign_data = {\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'created_by': user.get('name', 'Direção') if user else 'Direção',\n            'created_at': datetime.now().isoformat(),\n            'status': 'active'\n        }\n        \n        try:\n            if firebase_manager.db:\n                firebase_manager.db.collection('campaigns').add(campaign_data)\n            \n            self.campaign_title.text = \"\"\n            self.campaign_description.text = \"\"\n            self.campaign_duration.text = \"\"\n            \n            self.show_dialog(\"Sucesso\", \"Campanha criada com sucesso!\")\n            \n        except Exception as e:\n            self.show_dialog(\"Erro\", f\"Erro ao criar campanha: {str(e)}\")\n    \n    def show_dialog(self, title, text):\n        dialog = MDDialog(\n            title=title,\n            text=text,\n            buttons=[MDFlatButton(text=\"OK\", on_release=lambda x: dialog.dismiss())]\n        )\n        dialog.open()\n    \n    def go_back(self):\n        self.manager.current = 'dashboard'\n\n\nclass SecurityScreen(MDScreen):\n    \"\"\"Tela de Segurança (Painel, Checklist, Evacuação)\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'security'\n        self.build_screen()\n    \n    def build_screen(self):\n        try:\n            from kivymd.uix.tab import MDTabs, MDTabsBase\n            from kivymd.uix.floatlayout import MDFloatLayout\n        except ImportError:\n            MDTabs = MDTabsBase = MDFloatLayout = object\n        \n        layout = MDBoxLayout(orientation='vertical')\n        \n        toolbar = MDTopAppBar(\n            title=\"Segurança\",\n            left_action_items=[[\"arrow-left\", lambda x: self.go_back()]]\n        )\n        layout.add_widget(toolbar)\n        \n        # Usar cards simples ao invés de tabs para evitar problemas de API\n        content = MDBoxLayout(orientation='vertical', padding=20, spacing=15)\n        \n        # Botões para navegar entre seções\n        nav_layout = MDBoxLayout(size_hint_y=None, height='50dp', spacing=10)\n        \n        surveillance_btn = MDRaisedButton(\n            text=\"Vigilância\",\n            icon=\"cctv\",\n            size_hint_x=0.33,\n            on_release=lambda x: self.show_surveillance()\n        )\n        checklist_btn = MDRaisedButton(\n            text=\"Checklist\", \n            icon=\"checkbox-marked-circle\",\n            size_hint_x=0.33,\n            on_release=lambda x: self.show_checklist()\n        )\n        evacuation_btn = MDRaisedButton(\n            text=\"Evacuação\",\n            icon=\"exit-run\",\n            size_hint_x=0.33,\n            on_release=lambda x: self.show_evacuation()\n        )\n        \n        nav_layout.add_widget(surveillance_btn)\n        nav_layout.add_widget(checklist_btn)\n        nav_layout.add_widget(evacuation_btn)\n        \n        content.add_widget(nav_layout)\n        \n        # Área de conteúdo principal\n        self.main_content_area = MDBoxLayout(orientation='vertical')\n        \n        # Mostrar vigilância por padrão\n        self.main_content_area.add_widget(self.create_surveillance_content())\n        \n        content.add_widget(self.main_content_area)\n        \n        layout.add_widget(content)\n        self.add_widget(layout)\n    \n    def show_surveillance(self):\n        \"\"\"Mostrar conteúdo de vigilância\"\"\"\n        self.main_content_area.clear_widgets()\n        self.main_content_area.add_widget(self.create_surveillance_content())\n    \n    def show_checklist(self):\n        \"\"\"Mostrar conteúdo de checklist\"\"\"\n        self.main_content_area.clear_widgets()\n        self.main_content_area.add_widget(self.create_checklist_content())\n    \n    def show_evacuation(self):\n        \"\"\"Mostrar conteúdo de evacuação\"\"\"\n        self.main_content_area.clear_widgets()\n        self.main_content_area.add_widget(self.create_evacuation_content())\n    \n    def create_surveillance_content(self):\n        content = MDBoxLayout(orientation='vertical', padding=20, spacing=15)\n        \n        title = MDLabel(text=\"Painel de Vigilância\", font_style=\"H6\")\n        content.add_widget(title)\n        \n        # Simulação de câmeras\n        cameras = [\n            {\"name\": \"Câmera 01 - Entrada Principal\", \"status\": \"Online\"},\n            {\"name\": \"Câmera 02 - Pátio\", \"status\": \"Online\"}, \n            {\"name\": \"Câmera 03 - Corredor A\", \"status\": \"Offline\"},\n            {\"name\": \"Câmera 04 - Biblioteca\", \"status\": \"Online\"},\n            {\"name\": \"Câmera 05 - Quadra\", \"status\": \"Online\"}\n        ]\n        \n        for camera in cameras:\n            camera_card = MDCard(\n                size_hint=(1, None),\n                height='60dp',\n                padding=10\n            )\n            \n            camera_layout = MDBoxLayout(spacing=10)\n            \n            # Ícone da câmera\n            status_color = \"green\" if camera[\"status\"] == \"Online\" else \"red\"\n            camera_icon = MDIconButton(\n                icon=\"cctv\",\n                theme_icon_color=\"Custom\",\n                icon_color=status_color,\n                size_hint_x=None,\n                width='40dp'\n            )\n            \n            # Nome e status\n            info_layout = MDBoxLayout(orientation='vertical', spacing=2)\n            name_label = MDLabel(text=camera[\"name\"], font_style=\"Body1\")\n            status_label = MDLabel(\n                text=camera[\"status\"], \n                font_style=\"Caption\",\n                theme_text_color=\"Custom\",\n                text_color=[0, 0.7, 0, 1] if camera[\"status\"] == \"Online\" else [0.7, 0, 0, 1]\n            )\n            info_layout.add_widget(name_label)\n            info_layout.add_widget(status_label)\n            \n            # Botão de visualizar\n            view_btn = MDIconButton(\n                icon=\"video-outline\",\n                theme_icon_color=\"Primary\",\n                size_hint_x=None,\n                width='40dp',\n                on_release=lambda x, cam=camera: self.view_camera(cam)\n            )\n            \n            camera_layout.add_widget(camera_icon)\n            camera_layout.add_widget(info_layout)\n            camera_layout.add_widget(view_btn)\n            \n            camera_card.add_widget(camera_layout)\n            content.add_widget(camera_card)\n        \n        return content\n    \n    def create_checklist_content(self):\n        content = MDBoxLayout(orientation='vertical', padding=20, spacing=15)\n        \n        title = MDLabel(text=\"Checklist de Segurança\", font_style=\"H6\")\n        content.add_widget(title)\n        \n        checklist_items = [\n            \"Portas de emergência desbloqueadas\",\n            \"Extintores carregados e acessíveis\",\n            \"Iluminação de emergência funcionando\",\n            \"Alarmes testados\",\n            \"Rotas de evacuação sinalizadas\",\n            \"Equipamentos de segurança funcionando\"\n        ]\n        \n        for item in checklist_items:\n            item_layout = MDBoxLayout(size_hint_y=None, height='50dp')\n            item_layout.add_widget(MDLabel(text=item, size_hint_x=0.7))\n            \n            checkbox = MDSwitch(size_hint_x=0.3)\n            item_layout.add_widget(checkbox)\n            \n            content.add_widget(item_layout)\n        \n        if firebase_manager.has_permission('adicionar_ocorrencias'):\n            save_btn = MDRaisedButton(\n                text=\"SALVAR CHECKLIST\",\n                on_release=self.save_checklist\n            )\n            content.add_widget(save_btn)\n        \n        return content\n    \n    def create_evacuation_content(self):\n        content = MDBoxLayout(orientation='vertical', padding=20, spacing=15)\n        \n        title = MDLabel(text=\"Plano de Evacuação\", font_style=\"H6\")\n        content.add_widget(title)\n        \n        instructions = [\n            \"🚨 EM CASO DE EMERGÊNCIA:\",\n            \"\",\n            \"1. Mantenha a calma\",\n            \"2. Siga as rotas sinalizadas\",\n            \"3. Não use elevadores\",\n            \"4. Ajude quem precisar\",\n            \"5. Dirija-se ao ponto de encontro\",\n            \"\",\n            \"📍 PONTO DE ENCONTRO:\",\n            \"Quadra esportiva externa\",\n            \"\",\n            \"📞 CONTATOS DE EMERGÊNCIA:\",\n            \"Bombeiros: 193\",\n            \"Polícia: 190\",\n            \"SAMU: 192\",\n            \"Direção: (11) 99999-9999\"\n        ]\n        \n        for instruction in instructions:\n            if instruction.startswith((\"🚨\", \"📍\", \"📞\")):\n                label = MDLabel(text=instruction, font_style=\"Subtitle1\", theme_text_color=\"Primary\")\n            elif instruction == \"\":\n                label = MDLabel(text=\"\", size_hint_y=None, height='10dp')\n            else:\n                label = MDLabel(text=instruction)\n            \n            content.add_widget(label)\n        \n        return content\n    \n    def view_camera(self, camera_info):\n        self.show_dialog(\"Visualização\", f\"Abrindo {camera_info}\")\n    \n    def save_checklist(self, *args):\n        self.show_dialog(\"Sucesso\", \"Checklist salvo com sucesso!\")\n    \n    def show_dialog(self, title, text):\n        dialog = MDDialog(\n            title=title,\n            text=text,\n            buttons=[MDFlatButton(text=\"OK\", on_release=lambda x: dialog.dismiss())]\n        )\n        dialog.open()\n    \n    def go_back(self):\n        self.manager.current = 'dashboard'\n\n\nclass SettingsScreen(MDScreen):\n    \"\"\"Tela de Configurações e Sistema de Banimento\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'settings'\n        self.build_screen()\n    \n    def build_screen(self):\n        layout = MDBoxLayout(orientation='vertical')\n        \n        toolbar = MDTopAppBar(\n            title=\"Configurações\",\n            left_action_items=[[\"arrow-left\", lambda x: self.go_back()]]\n        )\n        layout.add_widget(toolbar)\n        \n        content = MDBoxLayout(orientation='vertical', padding=20, spacing=15)\n        \n        # Se for direção, mostrar sistema de banimento\n        if firebase_manager.has_permission('banir_usuarios'):\n            ban_system_card = MDCard(\n                orientation='vertical',\n                padding=20,\n                spacing=10,\n                size_hint=(1, None),\n                height='300dp'\n            )\n            \n            ban_title = MDLabel(text=\"Sistema de Banimento\", font_style=\"H6\")\n            \n            # Lista de usuários para banir/desbanir\n            users_list = [\n                {\"name\": \"João Silva\", \"email\": \"joao@escola.com\", \"active\": True},\n                {\"name\": \"Maria Santos\", \"email\": \"maria@escola.com\", \"active\": False},\n                {\"name\": \"Pedro Lima\", \"email\": \"pedro@escola.com\", \"active\": True}\n            ]\n            \n            ban_system_card.add_widget(ban_title)\n            \n            for user in users_list:\n                user_layout = MDBoxLayout(size_hint_y=None, height='40dp')\n                \n                status_text = \"Ativo\" if user[\"active\"] else \"BANIDO\"\n                status_color = \"Primary\" if user[\"active\"] else \"Error\"\n                \n                user_info = f\"{user['name']} - {status_text}\"\n                user_layout.add_widget(MDLabel(text=user_info, size_hint_x=0.6))\n                \n                action_text = \"Banir\" if user[\"active\"] else \"Reativar\"\n                action_color = \"red\" if user[\"active\"] else \"green\"\n                \n                action_btn = MDRaisedButton(\n                    text=action_text,\n                    size_hint_x=0.4,\n                    md_bg_color=action_color,\n                    on_release=lambda x, u=user: self.toggle_user_ban(u)\n                )\n                user_layout.add_widget(action_btn)\n                \n                ban_system_card.add_widget(user_layout)\n            \n            content.add_widget(ban_system_card)\n        \n        # Configurações gerais\n        general_settings_card = MDCard(\n            orientation='vertical',\n            padding=20,\n            spacing=10,\n            size_hint=(1, None),\n            height='200dp'\n        )\n        \n        settings_title = MDLabel(text=\"Configurações Gerais\", font_style=\"H6\")\n        general_settings_card.add_widget(settings_title)\n        \n        # Notificações\n        notif_layout = MDBoxLayout(size_hint_y=None, height='40dp')\n        notif_layout.add_widget(MDLabel(text=\"Receber Notificações\", size_hint_x=0.7))\n        notif_switch = MDSwitch(size_hint_x=0.3, active=True)\n        notif_layout.add_widget(notif_switch)\n        general_settings_card.add_widget(notif_layout)\n        \n        # Modo escuro\n        dark_layout = MDBoxLayout(size_hint_y=None, height='40dp')\n        dark_layout.add_widget(MDLabel(text=\"Modo Escuro\", size_hint_x=0.7))\n        dark_switch = MDSwitch(size_hint_x=0.3)\n        dark_layout.add_widget(dark_switch)\n        general_settings_card.add_widget(dark_layout)\n        \n        content.add_widget(general_settings_card)\n        layout.add_widget(content)\n        self.add_widget(layout)\n    \n    def toggle_user_ban(self, user):\n        action = \"reativar\" if not user[\"active\"] else \"banir\"\n        \n        dialog = MDDialog(\n            title=\"Confirmação\",\n            text=f\"Você tem certeza que deseja {action} o usuário {user['name']}?\",\n            buttons=[\n                MDFlatButton(text=\"CANCELAR\", on_release=lambda x: dialog.dismiss()),\n                MDFlatButton(\n                    text=\"CONFIRMAR\",\n                    on_release=lambda x: self.confirm_user_ban(dialog, user, not user[\"active\"])\n                )\n            ]\n        )\n        dialog.open()\n    \n    def confirm_user_ban(self, dialog, user, new_status):\n        try:\n            # Atualizar no Firebase\n            if firebase_manager.db:\n                # Buscar usuário pelo email e atualizar status\n                users_ref = firebase_manager.db.collection('users').where('email', '==', user['email'])\n                docs = users_ref.get()\n                \n                for doc in docs:\n                    doc.reference.update({'active': new_status})\n            \n            user[\"active\"] = new_status\n            dialog.dismiss()\n            \n            action_text = \"reativado\" if new_status else \"banido\"\n            self.show_dialog(\"Sucesso\", f\"Usuário {action_text} com sucesso!\")\n            \n        except Exception as e:\n            dialog.dismiss()\n            self.show_dialog(\"Erro\", f\"Erro ao alterar status do usuário: {str(e)}\")\n    \n    def show_dialog(self, title, text):\n        dialog = MDDialog(\n            title=title,\n            text=text,\n            buttons=[MDFlatButton(text=\"OK\", on_release=lambda x: dialog.dismiss())]\n        )\n        dialog.open()\n    \n    def go_back(self):\n        self.manager.current = 'dashboard'\n\n\nclass DrillsScreen(MDScreen):\n    \"\"\"Tela de Calendário de Simulados\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'drills'\n        self.build_screen()\n    \n    def build_screen(self):\n        layout = MDBoxLayout(orientation='vertical')\n        \n        toolbar = MDTopAppBar(\n            title=\"Calendário de Simulados\",\n            left_action_items=[[\"arrow-left\", lambda x: self.go_back()]]\n        )\n        layout.add_widget(toolbar)\n        \n        content = MDBoxLayout(orientation='vertical', padding=20, spacing=15)\n        \n        # Se for direção, mostrar formulário para criar simulado\n        if firebase_manager.has_permission('cadastrar_campanhas'):  # Direção pode criar simulados\n            create_drill_card = MDCard(\n                orientation='vertical',\n                padding=20,\n                spacing=10,\n                size_hint=(1, None),\n                height='350dp'\n            )\n            \n            form_title = MDLabel(text=\"Agendar Novo Simulado\", font_style=\"H6\")\n            \n            self.drill_type = MDTextField(hint_text=\"Tipo de simulado (incêndio, evacuação, terremoto)\")\n            self.drill_date = MDTextField(hint_text=\"Data (DD/MM/AAAA)\")\n            self.drill_time = MDTextField(hint_text=\"Horário (HH:MM)\")\n            self.drill_location = MDTextField(hint_text=\"Local/Setor\")\n            self.drill_description = MDTextField(\n                hint_text=\"Instruções e observações\",\n                multiline=True\n            )\n            \n            create_btn = MDRaisedButton(\n                text=\"AGENDAR SIMULADO\",\n                on_release=self.create_drill\n            )\n            \n            create_drill_card.add_widget(form_title)\n            create_drill_card.add_widget(self.drill_type)\n            create_drill_card.add_widget(self.drill_date)\n            create_drill_card.add_widget(self.drill_time)\n            create_drill_card.add_widget(self.drill_location)\n            create_drill_card.add_widget(self.drill_description)\n            create_drill_card.add_widget(create_btn)\n            \n            content.add_widget(create_drill_card)\n        \n        # Calendário de simulados agendados\n        calendar_card = MDCard(\n            orientation='vertical',\n            padding=15,\n            spacing=10,\n            size_hint=(1, None),\n            height='300dp'\n        )\n        \n        calendar_title = MDLabel(text=\"Simulados Agendados\", font_style=\"H6\")\n        calendar_card.add_widget(calendar_title)\n        \n        # Simulados de exemplo\n        sample_drills = [\n            {\"type\": \"Simulado de Incêndio\", \"date\": \"25/09/2025 às 10:00\", \"location\": \"Todo colégio\", \"icon\": \"fire\"},\n            {\"type\": \"Simulado de Terremoto\", \"date\": \"02/10/2025 às 14:30\", \"location\": \"Prédio A\", \"icon\": \"earth\"},\n            {\"type\": \"Evacuação Geral\", \"date\": \"15/10/2025 às 09:15\", \"location\": \"Todas as unidades\", \"icon\": \"exit-run\"},\n            {\"type\": \"Simulado Elétrico\", \"date\": \"20/10/2025 às 16:00\", \"location\": \"Laboratórios\", \"icon\": \"flash\"}\n        ]\n        \n        for drill in sample_drills:\n            drill_card = MDCard(\n                size_hint=(1, None),\n                height='80dp',\n                padding=10,\n                spacing=10\n            )\n            \n            drill_layout = MDBoxLayout(spacing=10)\n            \n            # Ícone do tipo de simulado\n            drill_icon = MDIconButton(\n                icon=drill[\"icon\"],\n                theme_icon_color=\"Primary\",\n                size_hint_x=None,\n                width='40dp'\n            )\n            \n            # Informações do simulado\n            info_layout = MDBoxLayout(orientation='vertical', spacing=2)\n            type_label = MDLabel(text=drill[\"type\"], font_style=\"Body1\")\n            date_label = MDLabel(text=f'{drill[\"date\"]} - {drill[\"location\"]}', font_style=\"Caption\")\n            info_layout.add_widget(type_label)\n            info_layout.add_widget(date_label)\n            \n            drill_layout.add_widget(drill_icon)\n            drill_layout.add_widget(info_layout)\n            \n            # Botão de editar (se tiver permissão)\n            if firebase_manager.has_permission('cadastrar_campanhas'):\n                edit_btn = MDIconButton(\n                    icon=\"pencil\",\n                    theme_icon_color=\"Custom\",\n                    icon_color=\"blue\",\n                    size_hint_x=None,\n                    width='40dp',\n                    on_release=lambda x, d=drill: self.edit_drill(d)\n                )\n                drill_layout.add_widget(edit_btn)\n            \n            drill_card.add_widget(drill_layout)\n            calendar_card.add_widget(drill_card)\n        \n        content.add_widget(calendar_card)\n        layout.add_widget(content)\n        self.add_widget(layout)\n    \n    def create_drill(self, *args):\n        drill_type = self.drill_type.text.strip()\n        date = self.drill_date.text.strip()\n        time = self.drill_time.text.strip()\n        location = self.drill_location.text.strip()\n        description = self.drill_description.text.strip()\n        \n        if not all([drill_type, date, time, location]):\n            self.show_dialog(\"Erro\", \"Preencha todos os campos obrigatórios\")\n            return\n        \n        user = firebase_manager.get_current_user()\n        \n        drill_data = {\n            'type': drill_type,\n            'date': date,\n            'time': time,\n            'location': location,\n            'description': description,\n            'created_by': user.get('name', 'Direção') if user else 'Direção',\n            'created_at': datetime.now().isoformat(),\n            'status': 'scheduled'\n        }\n        \n        try:\n            if firebase_manager.db:\n                firebase_manager.db.collection('drills').add(drill_data)\n            \n            # Limpar campos\n            self.drill_type.text = \"\"\n            self.drill_date.text = \"\"\n            self.drill_time.text = \"\"\n            self.drill_location.text = \"\"\n            self.drill_description.text = \"\"\n            \n            self.show_dialog(\"Sucesso\", \"Simulado agendado com sucesso!\")\n            \n        except Exception as e:\n            self.show_dialog(\"Erro\", f\"Erro ao agendar simulado: {str(e)}\")\n    \n    def edit_drill(self, drill_info):\n        self.show_dialog(\"Editar\", f\"Editando: {drill_info}\")\n    \n    def show_dialog(self, title, text):\n        dialog = MDDialog(\n            title=title,\n            text=text,\n            buttons=[MDFlatButton(text=\"OK\", on_release=lambda x: dialog.dismiss())]\n        )\n        dialog.open()\n    \n    def go_back(self):\n        self.manager.current = 'dashboard'\n\n\nclass SchoolSecurityApp(MDApp):\n    \"\"\"Aplicativo Principal\"\"\"\n    \n    def build(self):\n        self.title = \"Sistema de Segurança Escolar\"\n        self.theme_cls.theme_style = \"Light\"\n        self.theme_cls.primary_palette = \"Blue\"\n        \n        # Screen Manager\n        sm = ScreenManager()\n        \n        # Adicionar todas as telas\n        sm.add_widget(LoginScreen())\n        sm.add_widget(RegisterScreen())\n        sm.add_widget(DashboardScreen())\n        sm.add_widget(ReportsScreen())\n        sm.add_widget(NoticesScreen())\n        sm.add_widget(VisitorsScreen())\n        sm.add_widget(IncidentsScreen())\n        sm.add_widget(CampaignsScreen())\n        sm.add_widget(DrillsScreen())\n        sm.add_widget(SecurityScreen())\n        sm.add_widget(SettingsScreen())\n        \n        return sm\n\n\nif __name__ == '__main__':\n    # Só executar se Kivy estiver disponível e RUN_KIVY=1\n    if KIVY_AVAILABLE and os.getenv('RUN_KIVY') == '1':\n        SchoolSecurityApp().run()\n    else:\n        print(\"Sistema de Segurança Escolar - Versão Desktop\")\n        print(\"Para executar a interface gráfica:\")\n        print(\"  1. Instale as dependências: pip install kivy kivymd firebase-admin pyrebase4\")\n        print(\"  2. Execute com: RUN_KIVY=1 python main.py\")\n        print(\"Ou use: python terminal_app.py para versão terminal\")","size_bytes":77861},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"buildozer>=1.5.0\",\n    \"cython>=3.1.4\",\n    \"firebase-admin>=7.1.0\",\n    \"kivy>=2.3.1\",\n    \"kivymd>=1.2.0\",\n    \"pillow>=11.3.0\",\n    \"plyer>=2.1.0\",\n    \"pyrebase>=3.0.18\",\n    \"pyrebase4>=4.8.0\",\n    \"python-dateutil>=2.9.0.post0\",\n    \"requests>=2.32.5\",\n]\n","size_bytes":408},"main_android.py":{"content":"\"\"\"\nSistema de Segurança Escolar - Versão Android\nAplicativo desenvolvido em Python + Kivy para dispositivos móveis Android\n\"\"\"\n\nimport os\nfrom datetime import datetime\nimport json\n\n# Configurações básicas para Android - imports opcionais para compatibilidade\ntry:\n    from kivy.config import Config\n    Config.set('graphics', 'resizable', False)\n    Config.set('graphics', 'width', '360')\n    Config.set('graphics', 'height', '640')\n\n    from kivy.app import App\n    from kivy.uix.screenmanager import ScreenManager, Screen\n    from kivy.uix.boxlayout import BoxLayout\n    from kivy.uix.label import Label\n    from kivy.uix.button import Button\n    from kivy.uix.textinput import TextInput\n    from kivy.uix.spinner import Spinner\n    from kivy.uix.popup import Popup\n    from kivy.clock import Clock\n\n    from kivymd.app import MDApp\n    from kivymd.uix.screen import MDScreen\n    from kivymd.uix.boxlayout import MDBoxLayout\n    from kivymd.uix.button import MDRaisedButton, MDIconButton, MDFlatButton\n    from kivymd.uix.textfield import MDTextField\n    from kivymd.uix.card import MDCard\n    from kivymd.uix.list import MDList, OneLineListItem\n    from kivymd.uix.label import MDLabel\n    from kivymd.uix.toolbar import MDTopAppBar\n    from kivymd.uix.dialog import MDDialog\n    \n    KIVY_AVAILABLE = True\nexcept ImportError:\n    # Fallbacks para quando Kivy não está disponível (ex: Replit)\n    Config = None\n    App = object\n    ScreenManager = Screen = BoxLayout = Label = Button = object\n    TextInput = Spinner = Popup = Clock = object\n    MDApp = MDScreen = MDBoxLayout = object\n    MDRaisedButton = MDIconButton = MDFlatButton = object\n    MDTextField = MDCard = MDList = OneLineListItem = object\n    MDLabel = MDTopAppBar = MDDialog = object\n    \n    KIVY_AVAILABLE = False\n\n\nclass LocalDataManager:\n    \"\"\"Gerenciador de dados locais (substituto temporário do Firebase)\"\"\"\n    \n    def __init__(self):\n        self.current_user = None\n        self.data_file = \"local_data.json\"\n        self.load_data()\n    \n    def load_data(self):\n        \"\"\"Carregar dados do arquivo local\"\"\"\n        try:\n            if os.path.exists(self.data_file):\n                with open(self.data_file, 'r') as f:\n                    self.data = json.load(f)\n            else:\n                self.data = {\n                    'users': {\n                        'admin@escola.com': {\n                            'password': 'admin123',\n                            'name': 'Administrador',\n                            'user_type': 'direcao',\n                            'active': True\n                        },\n                        'aluno@escola.com': {\n                            'password': '123456',\n                            'name': 'Aluno Exemplo',\n                            'user_type': 'aluno',\n                            'active': True\n                        },\n                        'funcionario@escola.com': {\n                            'password': 'func123',\n                            'name': 'Funcionário Exemplo',\n                            'user_type': 'funcionario',\n                            'active': True\n                        }\n                    },\n                    'reports': [],\n                    'notices': [\n                        {\n                            'title': 'Simulado de Evacuação',\n                            'content': 'Simulado será realizado na próxima quinta-feira às 10h.',\n                            'date': '2025-09-20',\n                            'priority': 'Alta'\n                        },\n                        {\n                            'title': 'Novos Horários',\n                            'content': 'Portões funcionam de 7h às 18h.',\n                            'date': '2025-09-18',\n                            'priority': 'Média'\n                        }\n                    ],\n                    'visitors': [],\n                    'incidents': []\n                }\n                self.save_data()\n        except Exception as e:\n            print(f\"Erro ao carregar dados: {e}\")\n    \n    def save_data(self):\n        \"\"\"Salvar dados no arquivo local\"\"\"\n        try:\n            with open(self.data_file, 'w') as f:\n                json.dump(self.data, f, indent=2, default=str)\n        except Exception as e:\n            print(f\"Erro ao salvar dados: {e}\")\n    \n    def sign_in(self, email, password):\n        \"\"\"Fazer login\"\"\"\n        try:\n            if email in self.data['users']:\n                user = self.data['users'][email]\n                if user['password'] == password and user.get('active', True):\n                    self.current_user = {\n                        'email': email,\n                        'name': user['name'],\n                        'user_type': user['user_type'],\n                        'active': user['active']\n                    }\n                    return {'success': True, 'user_data': self.current_user}\n                else:\n                    return {'success': False, 'error': 'Credenciais inválidas ou usuário inativo'}\n            else:\n                return {'success': False, 'error': 'Usuário não encontrado'}\n        except Exception as e:\n            return {'success': False, 'error': str(e)}\n    \n    def sign_up(self, email, password, user_data):\n        \"\"\"Cadastrar novo usuário\"\"\"\n        try:\n            if email not in self.data['users']:\n                self.data['users'][email] = {\n                    'password': password,\n                    'name': user_data.get('name', ''),\n                    'user_type': user_data.get('user_type', 'aluno'),\n                    'active': True,\n                    'created_at': datetime.now().isoformat()\n                }\n                self.save_data()\n                return {'success': True}\n            else:\n                return {'success': False, 'error': 'Usuário já existe'}\n        except Exception as e:\n            return {'success': False, 'error': str(e)}\n    \n    def get_current_user(self):\n        \"\"\"Obter usuário atual\"\"\"\n        return self.current_user\n    \n    def sign_out(self):\n        \"\"\"Fazer logout\"\"\"\n        self.current_user = None\n    \n    def has_permission(self, permission):\n        \"\"\"Verificar permissões do usuário\"\"\"\n        if not self.current_user:\n            return False\n            \n        user_type = self.current_user.get('user_type', 'aluno')\n        \n        permissions = {\n            'aluno': ['denunciar', 'ver_avisos', 'emergencia'],\n            'funcionario': ['denunciar', 'ver_avisos', 'emergencia', 'registrar_visitantes', 'adicionar_ocorrencias'],\n            'direcao': ['denunciar', 'ver_avisos', 'emergencia', 'registrar_visitantes', \n                       'adicionar_ocorrencias', 'criar_avisos', 'ver_denuncias', 'gerar_relatorios']\n        }\n        \n        return permission in permissions.get(user_type, [])\n    \n    def add_report(self, report_data):\n        \"\"\"Adicionar denúncia\"\"\"\n        try:\n            report_data['id'] = f\"R{datetime.now().strftime('%Y%m%d%H%M%S')}\"\n            report_data['date'] = datetime.now().isoformat()\n            report_data['status'] = 'Pendente'\n            self.data['reports'].append(report_data)\n            self.save_data()\n            return True\n        except Exception as e:\n            print(f\"Erro ao adicionar denúncia: {e}\")\n            return False\n    \n    def get_reports(self):\n        \"\"\"Obter denúncias\"\"\"\n        return self.data.get('reports', [])\n    \n    def get_notices(self):\n        \"\"\"Obter avisos\"\"\"\n        return self.data.get('notices', [])\n\n\n# Instância global do gerenciador de dados\ndata_manager = LocalDataManager()\n\n\nclass LoginScreen(MDScreen):\n    \"\"\"Tela de Login\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'login'\n        \n        # Layout principal\n        main_layout = MDBoxLayout(orientation='vertical', padding=20, spacing=20)\n        \n        # Logo/Título\n        title = MDLabel(\n            text='🏫 Sistema de Segurança Escolar',\n            halign='center',\n            theme_text_color='Primary',\n            font_style='H5',\n            size_hint_y=None,\n            height='80dp'\n        )\n        main_layout.add_widget(title)\n        \n        # Card de login\n        login_card = MDCard(\n            orientation='vertical',\n            padding=20,\n            spacing=15,\n            size_hint=(0.9, None),\n            height='350dp',\n            pos_hint={'center_x': 0.5},\n            elevation=5\n        )\n        \n        # Campos de login\n        self.email_field = MDTextField(\n            hint_text='Email',\n            helper_text='Digite seu email',\n            helper_text_mode='persistent',\n            size_hint_y=None,\n            height='60dp'\n        )\n        \n        self.password_field = MDTextField(\n            hint_text='Senha',\n            helper_text='Digite sua senha',\n            helper_text_mode='persistent',\n            password=True,\n            size_hint_y=None,\n            height='60dp'\n        )\n        \n        # Botões\n        login_btn = MDRaisedButton(\n            text='ENTRAR',\n            size_hint_y=None,\n            height='50dp',\n            on_release=self.login,\n            pos_hint={'center_x': 0.5}\n        )\n        \n        register_btn = MDFlatButton(\n            text='CRIAR CONTA',\n            size_hint_y=None,\n            height='40dp',\n            on_release=self.show_register_form,\n            pos_hint={'center_x': 0.5}\n        )\n        \n        # Status label\n        self.status_label = MDLabel(\n            text='Contas de teste:\\nadmin@escola.com / admin123\\naluno@escola.com / 123456',\n            halign='center',\n            theme_text_color='Hint',\n            size_hint_y=None,\n            height='60dp'\n        )\n        \n        login_card.add_widget(self.email_field)\n        login_card.add_widget(self.password_field)\n        login_card.add_widget(login_btn)\n        login_card.add_widget(register_btn)\n        login_card.add_widget(self.status_label)\n        \n        main_layout.add_widget(login_card)\n        self.add_widget(main_layout)\n    \n    def login(self, *args):\n        \"\"\"Realizar login\"\"\"\n        email = self.email_field.text.strip()\n        password = self.password_field.text\n        \n        if not email or not password:\n            self.show_message('Por favor, preencha todos os campos')\n            return\n        \n        result = data_manager.sign_in(email, password)\n        \n        if result['success']:\n            self.show_message('Login realizado com sucesso!', is_error=False)\n            Clock.schedule_once(lambda dt: setattr(self.manager, 'current', 'dashboard'), 1)\n        else:\n            self.show_message(f'Erro: {result[\"error\"]}')\n    \n    def show_register_form(self, *args):\n        \"\"\"Mostrar tela de cadastro\"\"\"\n        self.manager.current = 'register'\n    \n    def show_message(self, message, is_error=True):\n        \"\"\"Mostrar mensagem de status\"\"\"\n        self.status_label.text = message\n        if is_error:\n            self.status_label.theme_text_color = 'Error'\n        else:\n            self.status_label.theme_text_color = 'Primary'\n\n\nclass RegisterScreen(MDScreen):\n    \"\"\"Tela de Cadastro\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'register'\n        \n        main_layout = MDBoxLayout(orientation='vertical', padding=20, spacing=15)\n        \n        # Título\n        title = MDLabel(\n            text='Criar Nova Conta',\n            halign='center',\n            theme_text_color='Primary',\n            font_style='H6',\n            size_hint_y=None,\n            height='50dp'\n        )\n        main_layout.add_widget(title)\n        \n        # Campos\n        self.name_field = MDTextField(hint_text='Nome Completo', size_hint_y=None, height='60dp')\n        self.email_field = MDTextField(hint_text='Email', size_hint_y=None, height='60dp')\n        self.password_field = MDTextField(hint_text='Senha', password=True, size_hint_y=None, height='60dp')\n        self.confirm_password_field = MDTextField(hint_text='Confirmar Senha', password=True, size_hint_y=None, height='60dp')\n        \n        # Tipo de usuário\n        self.user_type_spinner = Spinner(\n            text='Tipo: Aluno',\n            values=['Tipo: Aluno', 'Tipo: Funcionário', 'Tipo: Direção'],\n            size_hint_y=None,\n            height='50dp'\n        )\n        \n        # Botões\n        register_btn = MDRaisedButton(\n            text='CADASTRAR',\n            size_hint_y=None,\n            height='50dp',\n            on_release=self.register,\n            pos_hint={'center_x': 0.5}\n        )\n        \n        back_btn = MDFlatButton(\n            text='VOLTAR',\n            size_hint_y=None,\n            height='40dp',\n            on_release=self.go_back,\n            pos_hint={'center_x': 0.5}\n        )\n        \n        self.status_label = MDLabel(\n            text='',\n            halign='center',\n            theme_text_color='Error',\n            size_hint_y=None,\n            height='40dp'\n        )\n        \n        main_layout.add_widget(self.name_field)\n        main_layout.add_widget(self.email_field)\n        main_layout.add_widget(self.password_field)\n        main_layout.add_widget(self.confirm_password_field)\n        main_layout.add_widget(self.user_type_spinner)\n        main_layout.add_widget(register_btn)\n        main_layout.add_widget(back_btn)\n        main_layout.add_widget(self.status_label)\n        \n        self.add_widget(main_layout)\n    \n    def register(self, *args):\n        \"\"\"Realizar cadastro\"\"\"\n        name = self.name_field.text.strip()\n        email = self.email_field.text.strip()\n        password = self.password_field.text\n        confirm_password = self.confirm_password_field.text\n        \n        if not all([name, email, password, confirm_password]):\n            self.show_message('Preencha todos os campos')\n            return\n        \n        if password != confirm_password:\n            self.show_message('Senhas não coincidem')\n            return\n        \n        # Mapear tipo de usuário\n        user_type_map = {\n            'Tipo: Aluno': 'aluno',\n            'Tipo: Funcionário': 'funcionario',\n            'Tipo: Direção': 'direcao'\n        }\n        user_type = user_type_map.get(self.user_type_spinner.text, 'aluno')\n        \n        user_data = {'name': name, 'user_type': user_type}\n        result = data_manager.sign_up(email, password, user_data)\n        \n        if result['success']:\n            self.show_message('Cadastro realizado com sucesso!', is_error=False)\n            Clock.schedule_once(lambda dt: setattr(self.manager, 'current', 'login'), 2)\n        else:\n            self.show_message(f'Erro: {result[\"error\"]}')\n    \n    def go_back(self, *args):\n        \"\"\"Voltar para login\"\"\"\n        self.manager.current = 'login'\n    \n    def show_message(self, message, is_error=True):\n        \"\"\"Mostrar mensagem\"\"\"\n        self.status_label.text = message\n        if is_error:\n            self.status_label.theme_text_color = 'Error'\n        else:\n            self.status_label.theme_text_color = 'Primary'\n\n\nclass DashboardScreen(MDScreen):\n    \"\"\"Dashboard Principal\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'dashboard'\n        \n        main_layout = MDBoxLayout(orientation='vertical')\n        \n        # Toolbar\n        toolbar = MDTopAppBar(\n            title=\"Segurança Escolar\",\n            right_action_items=[[\"logout\", lambda x: self.logout()]]\n        )\n        main_layout.add_widget(toolbar)\n        \n        # Scroll view com cards\n        scroll_content = MDBoxLayout(orientation='vertical', spacing=10, padding=10)\n        scroll_content.bind(minimum_height=scroll_content.setter('height'))\n        \n        user = data_manager.get_current_user()\n        if user:\n            # Welcome card\n            welcome_card = self.create_info_card(f\"Bem-vindo, {user['name']}\", f\"Tipo: {user['user_type'].title()}\")\n            scroll_content.add_widget(welcome_card)\n        \n        # Emergency button (always visible)\n        emergency_card = self.create_action_card(\"🚨 EMERGÊNCIA\", \"Acionar em caso de emergência\", self.emergency_action)\n        scroll_content.add_widget(emergency_card)\n        \n        # Permission-based cards\n        if data_manager.has_permission('denunciar'):\n            report_card = self.create_action_card(\"📝 Denúncias\", \"Fazer nova denúncia\", self.open_reports)\n            scroll_content.add_widget(report_card)\n        \n        if data_manager.has_permission('ver_avisos'):\n            notices_card = self.create_action_card(\"📢 Avisos\", \"Ver avisos da escola\", self.open_notices)\n            scroll_content.add_widget(notices_card)\n        \n        if data_manager.has_permission('registrar_visitantes'):\n            visitors_card = self.create_action_card(\"👥 Visitantes\", \"Registrar visitante\", self.open_visitors)\n            scroll_content.add_widget(visitors_card)\n        \n        if data_manager.has_permission('ver_denuncias'):\n            admin_card = self.create_action_card(\"📊 Relatórios\", \"Ver denúncias e relatórios\", self.open_admin)\n            scroll_content.add_widget(admin_card)\n        \n        try:\n            from kivy.uix.scrollview import ScrollView\n        except ImportError:\n            ScrollView = object\n        scroll = ScrollView()\n        scroll.add_widget(scroll_content)\n        main_layout.add_widget(scroll)\n        \n        self.add_widget(main_layout)\n    \n    def create_info_card(self, title, subtitle):\n        \"\"\"Criar card informativo\"\"\"\n        card = MDCard(\n            MDBoxLayout(\n                MDLabel(text=title, font_style=\"H6\", size_hint_y=None, height='30dp'),\n                MDLabel(text=subtitle, theme_text_color=\"Hint\", size_hint_y=None, height='25dp'),\n                orientation='vertical',\n                padding=15,\n                spacing=5\n            ),\n            size_hint_y=None,\n            height='80dp',\n            elevation=2\n        )\n        return card\n    \n    def create_action_card(self, title, subtitle, action):\n        \"\"\"Criar card de ação\"\"\"\n        card = MDCard(\n            MDBoxLayout(\n                MDBoxLayout(\n                    MDLabel(text=title, font_style=\"H6\", size_hint_y=None, height='30dp'),\n                    MDLabel(text=subtitle, theme_text_color=\"Hint\", size_hint_y=None, height='25dp'),\n                    orientation='vertical',\n                    size_hint_x=0.7\n                ),\n                MDRaisedButton(\n                    text=\"ABRIR\",\n                    size_hint_x=0.3,\n                    size_hint_y=None,\n                    height='40dp',\n                    on_release=action\n                ),\n                padding=15,\n                spacing=10\n            ),\n            size_hint_y=None,\n            height='80dp',\n            elevation=2\n        )\n        return card\n    \n    def emergency_action(self, *args):\n        \"\"\"Ação de emergência\"\"\"\n        dialog = MDDialog(\n            title=\"🚨 EMERGÊNCIA ACIONADA\",\n            text=\"Emergência foi registrada!\\n\\nEm situação real:\\n• Polícia: 190\\n• SAMU: 192\\n• Bombeiros: 193\",\n            buttons=[MDFlatButton(text=\"OK\", on_release=lambda x: dialog.dismiss())]\n        )\n        dialog.open()\n    \n    def open_reports(self, *args):\n        \"\"\"Abrir tela de denúncias\"\"\"\n        self.manager.current = 'reports'\n    \n    def open_notices(self, *args):\n        \"\"\"Abrir avisos\"\"\"\n        self.manager.current = 'notices'\n    \n    def open_visitors(self, *args):\n        \"\"\"Abrir visitantes\"\"\"\n        self.manager.current = 'visitors'\n    \n    def open_admin(self, *args):\n        \"\"\"Abrir área administrativa\"\"\"\n        self.manager.current = 'admin'\n    \n    def logout(self, *args):\n        \"\"\"Fazer logout\"\"\"\n        data_manager.sign_out()\n        self.manager.current = 'login'\n\n\nclass ReportsScreen(MDScreen):\n    \"\"\"Tela de Denúncias\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'reports'\n        \n        main_layout = MDBoxLayout(orientation='vertical')\n        \n        # Toolbar\n        toolbar = MDTopAppBar(\n            title=\"Nova Denúncia\",\n            left_action_items=[[\"arrow-left\", lambda x: setattr(self.manager, 'current', 'dashboard')]]\n        )\n        main_layout.add_widget(toolbar)\n        \n        # Form\n        form_layout = MDBoxLayout(orientation='vertical', padding=20, spacing=15)\n        \n        self.incident_type = Spinner(\n            text='Tipo de Incidente',\n            values=['Bullying', 'Drogas', 'Vandalismo', 'Ameaça', 'Outro'],\n            size_hint_y=None,\n            height='50dp'\n        )\n        \n        self.location_field = MDTextField(\n            hint_text='Local do incidente',\n            size_hint_y=None,\n            height='60dp'\n        )\n        \n        self.description_field = MDTextField(\n            hint_text='Descrição detalhada',\n            multiline=True,\n            size_hint_y=None,\n            height='100dp'\n        )\n        \n        self.anonymous_checkbox = BoxLayout(size_hint_y=None, height='40dp')\n        self.anonymous_checkbox.add_widget(Label(text='Denúncia anônima?', size_hint_x=0.8))\n        \n        try:\n            from kivymd.uix.selectioncontrol import MDCheckbox\n        except ImportError:\n            MDCheckbox = object\n        self.is_anonymous = MDCheckbox(size_hint_x=0.2)\n        self.anonymous_checkbox.add_widget(self.is_anonymous)\n        \n        submit_btn = MDRaisedButton(\n            text='ENVIAR DENÚNCIA',\n            size_hint_y=None,\n            height='50dp',\n            on_release=self.submit_report,\n            pos_hint={'center_x': 0.5}\n        )\n        \n        self.status_label = MDLabel(\n            text='',\n            halign='center',\n            size_hint_y=None,\n            height='40dp'\n        )\n        \n        form_layout.add_widget(self.incident_type)\n        form_layout.add_widget(self.location_field)\n        form_layout.add_widget(self.description_field)\n        form_layout.add_widget(self.anonymous_checkbox)\n        form_layout.add_widget(submit_btn)\n        form_layout.add_widget(self.status_label)\n        \n        main_layout.add_widget(form_layout)\n        self.add_widget(main_layout)\n    \n    def submit_report(self, *args):\n        \"\"\"Enviar denúncia\"\"\"\n        if not self.location_field.text.strip() or not self.description_field.text.strip():\n            self.status_label.text = \"Por favor, preencha todos os campos obrigatórios\"\n            self.status_label.theme_text_color = \"Error\"\n            return\n        \n        report_data = {\n            'type': self.incident_type.text,\n            'location': self.location_field.text.strip(),\n            'description': self.description_field.text.strip(),\n            'anonymous': self.is_anonymous.active,\n            'reporter': None if self.is_anonymous.active else data_manager.get_current_user()\n        }\n        \n        if data_manager.add_report(report_data):\n            self.status_label.text = \"Denúncia enviada com sucesso!\"\n            self.status_label.theme_text_color = \"Primary\"\n            \n            # Limpar campos\n            self.location_field.text = \"\"\n            self.description_field.text = \"\"\n            self.is_anonymous.active = False\n            \n            Clock.schedule_once(lambda dt: setattr(self.manager, 'current', 'dashboard'), 2)\n        else:\n            self.status_label.text = \"Erro ao enviar denúncia\"\n            self.status_label.theme_text_color = \"Error\"\n\n\nclass NoticesScreen(MDScreen):\n    \"\"\"Tela de Avisos\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'notices'\n        \n        main_layout = MDBoxLayout(orientation='vertical')\n        \n        # Toolbar\n        toolbar = MDTopAppBar(\n            title=\"Avisos da Escola\",\n            left_action_items=[[\"arrow-left\", lambda x: setattr(self.manager, 'current', 'dashboard')]]\n        )\n        main_layout.add_widget(toolbar)\n        \n        # Lista de avisos\n        notices_layout = MDBoxLayout(orientation='vertical', padding=10, spacing=10)\n        \n        notices = data_manager.get_notices()\n        \n        for notice in notices:\n            priority_colors = {\"Alta\": \"red\", \"Média\": \"orange\", \"Baixa\": \"green\"}\n            priority_color = priority_colors.get(notice.get('priority', 'Baixa'), 'gray')\n            \n            card = MDCard(\n                MDBoxLayout(\n                    MDLabel(\n                        text=f\"[color={priority_color}]●[/color] {notice['title']}\",\n                        markup=True,\n                        font_style=\"H6\",\n                        size_hint_y=None,\n                        height='30dp'\n                    ),\n                    MDLabel(\n                        text=f\"📅 {notice['date']}\",\n                        theme_text_color=\"Hint\",\n                        size_hint_y=None,\n                        height='25dp'\n                    ),\n                    MDLabel(\n                        text=notice['content'],\n                        size_hint_y=None,\n                        height='40dp'\n                    ),\n                    orientation='vertical',\n                    padding=15,\n                    spacing=5\n                ),\n                size_hint_y=None,\n                height='120dp',\n                elevation=2\n            )\n            notices_layout.add_widget(card)\n        \n        try:\n            from kivy.uix.scrollview import ScrollView\n        except ImportError:\n            ScrollView = object\n        scroll = ScrollView()\n        scroll.add_widget(notices_layout)\n        main_layout.add_widget(scroll)\n        \n        self.add_widget(main_layout)\n\n\nclass VisitorsScreen(MDScreen):\n    \"\"\"Tela de Visitantes\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'visitors'\n        \n        main_layout = MDBoxLayout(orientation='vertical')\n        \n        # Toolbar\n        toolbar = MDTopAppBar(\n            title=\"Registrar Visitante\",\n            left_action_items=[[\"arrow-left\", lambda x: setattr(self.manager, 'current', 'dashboard')]]\n        )\n        main_layout.add_widget(toolbar)\n        \n        # Form\n        form_layout = MDBoxLayout(orientation='vertical', padding=20, spacing=15)\n        \n        self.name_field = MDTextField(hint_text='Nome do visitante', size_hint_y=None, height='60dp')\n        self.document_field = MDTextField(hint_text='RG/CPF', size_hint_y=None, height='60dp')\n        self.purpose_field = MDTextField(hint_text='Motivo da visita', size_hint_y=None, height='60dp')\n        self.contact_field = MDTextField(hint_text='Telefone de contato', size_hint_y=None, height='60dp')\n        \n        register_btn = MDRaisedButton(\n            text='REGISTRAR VISITANTE',\n            size_hint_y=None,\n            height='50dp',\n            on_release=self.register_visitor,\n            pos_hint={'center_x': 0.5}\n        )\n        \n        self.status_label = MDLabel(\n            text='',\n            halign='center',\n            size_hint_y=None,\n            height='40dp'\n        )\n        \n        form_layout.add_widget(self.name_field)\n        form_layout.add_widget(self.document_field)\n        form_layout.add_widget(self.purpose_field)\n        form_layout.add_widget(self.contact_field)\n        form_layout.add_widget(register_btn)\n        form_layout.add_widget(self.status_label)\n        \n        main_layout.add_widget(form_layout)\n        self.add_widget(main_layout)\n    \n    def register_visitor(self, *args):\n        \"\"\"Registrar visitante\"\"\"\n        if not all([self.name_field.text.strip(), self.document_field.text.strip(), self.purpose_field.text.strip()]):\n            self.status_label.text = \"Preencha todos os campos obrigatórios\"\n            self.status_label.theme_text_color = \"Error\"\n            return\n        \n        visitor_id = f\"V{datetime.now().strftime('%Y%m%d%H%M%S')}\"\n        \n        self.status_label.text = f\"Visitante registrado!\\nID: {visitor_id}\\nEntrada: {datetime.now().strftime('%H:%M')}\"\n        self.status_label.theme_text_color = \"Primary\"\n        \n        # Limpar campos\n        self.name_field.text = \"\"\n        self.document_field.text = \"\"\n        self.purpose_field.text = \"\"\n        self.contact_field.text = \"\"\n\n\nclass AdminScreen(MDScreen):\n    \"\"\"Tela Administrativa\"\"\"\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name = 'admin'\n        \n        main_layout = MDBoxLayout(orientation='vertical')\n        \n        # Toolbar\n        toolbar = MDTopAppBar(\n            title=\"Área Administrativa\",\n            left_action_items=[[\"arrow-left\", lambda x: setattr(self.manager, 'current', 'dashboard')]]\n        )\n        main_layout.add_widget(toolbar)\n        \n        # Stats cards\n        stats_layout = MDBoxLayout(orientation='vertical', padding=10, spacing=10)\n        \n        reports = data_manager.get_reports()\n        total_reports = len(reports)\n        \n        stats_card = MDCard(\n            MDBoxLayout(\n                MDLabel(text=\"📊 Estatísticas\", font_style=\"H6\", size_hint_y=None, height='30dp'),\n                MDLabel(text=f\"Total de denúncias: {total_reports}\", size_hint_y=None, height='25dp'),\n                MDLabel(text=f\"Avisos ativos: {len(data_manager.get_notices())}\", size_hint_y=None, height='25dp'),\n                MDLabel(text=f\"Status: Sistema operacional\", size_hint_y=None, height='25dp'),\n                orientation='vertical',\n                padding=15,\n                spacing=5\n            ),\n            size_hint_y=None,\n            height='130dp',\n            elevation=2\n        )\n        stats_layout.add_widget(stats_card)\n        \n        # Lista de denúncias recentes\n        if reports:\n            recent_reports_title = MDLabel(\n                text=\"Denúncias Recentes:\",\n                font_style=\"H6\",\n                size_hint_y=None,\n                height='40dp'\n            )\n            stats_layout.add_widget(recent_reports_title)\n            \n            for report in reports[-3:]:  # Últimas 3 denúncias\n                report_card = MDCard(\n                    MDBoxLayout(\n                        MDLabel(text=f\"🆔 {report.get('id', 'N/A')}\", font_style=\"Subtitle1\", size_hint_y=None, height='25dp'),\n                        MDLabel(text=f\"📝 {report.get('type', 'N/A')}\", size_hint_y=None, height='25dp'),\n                        MDLabel(text=f\"📍 {report.get('location', 'N/A')}\", size_hint_y=None, height='25dp'),\n                        MDLabel(text=f\"📅 {report.get('date', 'N/A')[:16]}\", theme_text_color=\"Hint\", size_hint_y=None, height='25dp'),\n                        orientation='vertical',\n                        padding=15,\n                        spacing=3\n                    ),\n                    size_hint_y=None,\n                    height='120dp',\n                    elevation=2\n                )\n                stats_layout.add_widget(report_card)\n        \n        try:\n            from kivy.uix.scrollview import ScrollView\n        except ImportError:\n            ScrollView = object\n        scroll = ScrollView()\n        scroll.add_widget(stats_layout)\n        main_layout.add_widget(scroll)\n        \n        self.add_widget(main_layout)\n\n\nclass SchoolSecurityApp(MDApp):\n    \"\"\"Aplicativo Principal - Versão Android\"\"\"\n    \n    def build(self):\n        self.title = \"Sistema de Segurança Escolar\"\n        self.theme_cls.theme_style = \"Light\"\n        self.theme_cls.primary_palette = \"Blue\"\n        \n        # Screen Manager\n        sm = ScreenManager()\n        \n        # Adicionar todas as telas\n        sm.add_widget(LoginScreen())\n        sm.add_widget(RegisterScreen())\n        sm.add_widget(DashboardScreen())\n        sm.add_widget(ReportsScreen())\n        sm.add_widget(NoticesScreen())\n        sm.add_widget(VisitorsScreen())\n        sm.add_widget(AdminScreen())\n        \n        return sm\n\n\nif __name__ == '__main__':\n    # Só executar se Kivy estiver disponível e RUN_KIVY=1\n    if KIVY_AVAILABLE and os.getenv('RUN_KIVY') == '1':\n        SchoolSecurityApp().run()\n    else:\n        print(\"Sistema de Segurança Escolar - Versão Android\")\n        print(\"Para executar a interface gráfica:\")\n        print(\"  1. Instale as dependências: pip install kivy kivymd\")\n        print(\"  2. Execute com: RUN_KIVY=1 python main_android.py\")\n        print(\"Ou use: python terminal_app.py para versão terminal\")","size_bytes":32703},"terminal_app.py":{"content":"\"\"\"\nSistema de Segurança Escolar - Versão Terminal\nAplicativo simplificado para funcionar no ambiente Replit\n\"\"\"\n\nimport os\nimport json\nfrom datetime import datetime\n# Firebase removido temporariamente devido a problemas de compatibilidade\n\nclass FirebaseManager:\n    \"\"\"Gerenciador do Firebase para autenticação e banco de dados\"\"\"\n    \n    def __init__(self):\n        self.config = {\n            \"apiKey\": os.environ.get(\"FIREBASE_API_KEY\", \"demo-key\"),\n            \"authDomain\": f\"{os.environ.get('FIREBASE_PROJECT_ID', 'demo-project')}.firebaseapp.com\",\n            \"projectId\": os.environ.get(\"FIREBASE_PROJECT_ID\", \"demo-project\"),\n            \"storageBucket\": f\"{os.environ.get('FIREBASE_PROJECT_ID', 'demo-project')}.firebasestorage.app\",\n            \"messagingSenderId\": \"123456789\",\n            \"appId\": os.environ.get(\"FIREBASE_APP_ID\", \"demo-app-id\"),\n            \"databaseURL\": f\"https://{os.environ.get('FIREBASE_PROJECT_ID', 'demo-project')}-default-rtdb.firebaseio.com/\"\n        }\n        \n        self.firebase = None\n        self.auth = None\n        self.db = None\n        self.current_user = None\n        \n        self.initialize_firebase()\n    \n    def initialize_firebase(self):\n        \"\"\"Inicializa o Firebase\"\"\"\n        try:\n            # Para demonstração, usar dados locais\n            print(\"🔧 Inicializando Firebase...\")\n            print(\"🔧 Modo demonstração - Firebase não configurado\")\n            self.auth = None\n            self.db = None\n            \n        except Exception as e:\n            print(f\"⚠️  Erro ao inicializar Firebase: {e}\")\n    \n    def sign_in(self, email, password):\n        \"\"\"Fazer login (modo demonstração)\"\"\"\n        try:\n            # Login fake para demonstração\n            if email == \"admin@escola.com\" and password == \"admin123\":\n                self.current_user = {\n                    'email': email,\n                    'name': 'Administrador',\n                    'user_type': 'direcao',\n                    'active': True\n                }\n                return {'success': True, 'user': {'localId': 'admin123'}, 'user_data': self.current_user}\n            elif email == \"aluno@escola.com\" and password == \"123456\":\n                self.current_user = {\n                    'email': email,\n                    'name': 'Aluno Exemplo',\n                    'user_type': 'aluno',\n                    'active': True\n                }\n                return {'success': True, 'user': {'localId': 'aluno123'}, 'user_data': self.current_user}\n            else:\n                return {'success': False, 'error': 'Credenciais inválidas'}\n                \n        except Exception as e:\n            return {'success': False, 'error': str(e)}\n    \n    def get_current_user(self):\n        \"\"\"Obter usuário atual\"\"\"\n        return self.current_user\n    \n    def has_permission(self, permission):\n        \"\"\"Verificar permissões do usuário\"\"\"\n        if not self.current_user:\n            return False\n            \n        user_type = self.current_user.get('user_type', 'aluno')\n        \n        permissions = {\n            'aluno': ['denunciar', 'ver_avisos', 'emergencia', 'ver_campanhas'],\n            'funcionario': ['denunciar', 'ver_avisos', 'emergencia', 'ver_campanhas', \n                          'registrar_visitantes', 'adicionar_ocorrencias'],\n            'direcao': ['denunciar', 'ver_avisos', 'emergencia', 'ver_campanhas',\n                       'registrar_visitantes', 'adicionar_ocorrencias', 'criar_avisos',\n                       'ver_denuncias', 'cadastrar_campanhas', 'banir_usuarios', 'gerar_relatorios']\n        }\n        \n        return permission in permissions.get(user_type, [])\n\n# Instância global do Firebase\nfirebase_manager = FirebaseManager()\n\nclass SchoolSecurityTerminalApp:\n    \"\"\"Aplicativo Principal em modo Terminal\"\"\"\n    \n    def __init__(self):\n        self.running = True\n        \n    def clear_screen(self):\n        \"\"\"Limpar tela\"\"\"\n        os.system('clear' if os.name == 'posix' else 'cls')\n    \n    def print_header(self):\n        \"\"\"Imprimir cabeçalho\"\"\"\n        print(\"=\" * 60)\n        print(\"🏫 SISTEMA DE SEGURANÇA ESCOLAR\")\n        print(\"=\" * 60)\n        user = firebase_manager.get_current_user()\n        if user:\n            print(f\"👤 Usuário: {user['name']} ({user['user_type']})\")\n        print(\"=\" * 60)\n    \n    def login_screen(self):\n        \"\"\"Tela de login\"\"\"\n        self.clear_screen()\n        self.print_header()\n        print(\"\\n🔐 LOGIN\")\n        print(\"-\" * 20)\n        \n        print(\"\\n📋 Contas de demonstração:\")\n        print(\"   Admin: admin@escola.com / admin123\")\n        print(\"   Aluno: aluno@escola.com / 123456\")\n        \n        print(\"\\n\")\n        email = input(\"📧 Email: \").strip()\n        password = input(\"🔒 Senha: \").strip()\n        \n        if not email or not password:\n            print(\"\\n❌ Por favor, preencha todos os campos\")\n            input(\"\\nPressione Enter para continuar...\")\n            return False\n        \n        result = firebase_manager.sign_in(email, password)\n        \n        if result['success']:\n            print(\"\\n✅ Login realizado com sucesso!\")\n            input(\"\\nPressione Enter para continuar...\")\n            return True\n        else:\n            print(f\"\\n❌ Erro no login: {result['error']}\")\n            input(\"\\nPressione Enter para continuar...\")\n            return False\n    \n    def main_menu(self):\n        \"\"\"Menu principal\"\"\"\n        while True:\n            self.clear_screen()\n            self.print_header()\n            \n            print(\"\\n📋 MENU PRINCIPAL\")\n            print(\"-\" * 20)\n            \n            options = []\n            \n            # Opções sempre disponíveis\n            options.append((\"🚨 Emergência\", self.emergency_menu))\n            \n            if firebase_manager.has_permission('denunciar'):\n                options.append((\"📝 Nova Denúncia\", self.report_incident))\n            \n            if firebase_manager.has_permission('ver_avisos'):\n                options.append((\"📢 Ver Avisos\", self.view_notices))\n            \n            if firebase_manager.has_permission('registrar_visitantes'):\n                options.append((\"👥 Registrar Visitante\", self.register_visitor))\n            \n            if firebase_manager.has_permission('ver_denuncias'):\n                options.append((\"📊 Ver Denúncias\", self.view_reports))\n            \n            if firebase_manager.has_permission('gerar_relatorios'):\n                options.append((\"📈 Relatórios\", self.generate_reports))\n            \n            # Opção de sair\n            options.append((\"🚪 Logout\", None))\n            \n            # Mostrar opções\n            for i, (text, _) in enumerate(options, 1):\n                print(f\"{i}. {text}\")\n            \n            print(\"\\n\")\n            try:\n                choice = int(input(\"Escolha uma opção: \"))\n                if 1 <= choice <= len(options):\n                    if choice == len(options):  # Logout\n                        print(\"\\n👋 Fazendo logout...\")\n                        return\n                    else:\n                        options[choice-1][1]()  # Chamar função\n                else:\n                    print(\"\\n❌ Opção inválida!\")\n                    input(\"Pressione Enter para continuar...\")\n            except ValueError:\n                print(\"\\n❌ Por favor, digite um número válido!\")\n                input(\"Pressione Enter para continuar...\")\n    \n    def emergency_menu(self):\n        \"\"\"Menu de emergência\"\"\"\n        self.clear_screen()\n        self.print_header()\n        \n        print(\"\\n🚨 EMERGÊNCIA\")\n        print(\"-\" * 20)\n        print(\"⚠️  ATENÇÃO: Este é um sistema de demonstração!\")\n        print(\"⚠️  Em emergência real, contate imediatamente:\")\n        print(\"   📞 Polícia: 190\")\n        print(\"   🚑 SAMU: 192\")\n        print(\"   🚒 Bombeiros: 193\")\n        \n        print(\"\\n📋 Tipos de emergência:\")\n        print(\"1. 🔥 Incêndio\")\n        print(\"2. 🩸 Acidente/Ferimento\")\n        print(\"3. 🔫 Ameaça/Violência\")\n        print(\"4. 💊 Emergência Médica\")\n        print(\"5. 🌪️  Desastre Natural\")\n        print(\"6. ⬅️  Voltar\")\n        \n        print(\"\\n\")\n        try:\n            choice = int(input(\"Tipo de emergência: \"))\n            if 1 <= choice <= 5:\n                print(f\"\\n🚨 Emergência registrada: Tipo {choice}\")\n                print(\"✅ Notificações enviadas para:\")\n                print(\"   - Direção da escola\")\n                print(\"   - Equipe de segurança\")\n                print(\"   - Autoridades locais\")\n                print(\"\\n⏰ Aguarde instruções!\")\n            elif choice == 6:\n                return\n            else:\n                print(\"❌ Opção inválida!\")\n        except ValueError:\n            print(\"❌ Por favor, digite um número válido!\")\n        \n        input(\"\\nPressione Enter para voltar ao menu...\")\n    \n    def report_incident(self):\n        \"\"\"Reportar incidente/denúncia\"\"\"\n        self.clear_screen()\n        self.print_header()\n        \n        print(\"\\n📝 NOVA DENÚNCIA\")\n        print(\"-\" * 20)\n        \n        print(\"\\n📋 Tipo de ocorrência:\")\n        print(\"1. 🤜 Bullying/Agressão\")\n        print(\"2. 💊 Uso de substâncias\")\n        print(\"3. 📱 Cyberbullying\")\n        print(\"4. 🔫 Porte de armas\")\n        print(\"5. 🚫 Vandalismo\")\n        print(\"6. 👤 Comportamento suspeito\")\n        print(\"7. ℹ️  Outro\")\n        \n        try:\n            incident_type = int(input(\"\\nTipo: \"))\n            location = input(\"📍 Local: \").strip()\n            description = input(\"📄 Descrição: \").strip()\n            anonymous = input(\"🕵️  Denúncia anônima? (s/N): \").strip().lower() == 's'\n            \n            print(f\"\\n✅ Denúncia registrada!\")\n            print(f\"   📅 Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}\")\n            print(f\"   📍 Local: {location}\")\n            print(f\"   🕵️  Anônima: {'Sim' if anonymous else 'Não'}\")\n            print(f\"   🆔 Protocolo: #{datetime.now().strftime('%Y%m%d%H%M%S')}\")\n            \n        except ValueError:\n            print(\"❌ Entrada inválida!\")\n        \n        input(\"\\nPressione Enter para voltar ao menu...\")\n    \n    def view_notices(self):\n        \"\"\"Ver avisos\"\"\"\n        self.clear_screen()\n        self.print_header()\n        \n        print(\"\\n📢 AVISOS\")\n        print(\"-\" * 20)\n        \n        # Avisos de exemplo\n        notices = [\n            {\n                'title': 'Simulado de Evacuação',\n                'content': 'Simulado de evacuação será realizado na próxima quinta-feira às 10h.',\n                'date': '2025-09-18',\n                'priority': 'Alta'\n            },\n            {\n                'title': 'Portões de Entrada',\n                'content': 'Novos horários de funcionamento dos portões: 7h às 18h.',\n                'date': '2025-09-15',\n                'priority': 'Média'\n            },\n            {\n                'title': 'Visitantes',\n                'content': 'Todos os visitantes devem se cadastrar na recepção.',\n                'date': '2025-09-10',\n                'priority': 'Baixa'\n            }\n        ]\n        \n        for i, notice in enumerate(notices, 1):\n            priority_emoji = {\"Alta\": \"🔴\", \"Média\": \"🟡\", \"Baixa\": \"🟢\"}\n            print(f\"\\n{i}. {priority_emoji[notice['priority']]} {notice['title']}\")\n            print(f\"   📅 {notice['date']}\")\n            print(f\"   📄 {notice['content']}\")\n        \n        input(\"\\nPressione Enter para voltar ao menu...\")\n    \n    def register_visitor(self):\n        \"\"\"Registrar visitante\"\"\"\n        self.clear_screen()\n        self.print_header()\n        \n        print(\"\\n👥 REGISTRAR VISITANTE\")\n        print(\"-\" * 25)\n        \n        name = input(\"👤 Nome: \").strip()\n        document = input(\"🆔 RG/CPF: \").strip()\n        purpose = input(\"🎯 Motivo da visita: \").strip()\n        contact = input(\"📞 Contato: \").strip()\n        \n        if name and document and purpose:\n            visitor_id = f\"V{datetime.now().strftime('%Y%m%d%H%M%S')}\"\n            print(f\"\\n✅ Visitante registrado!\")\n            print(f\"   🆔 ID: {visitor_id}\")\n            print(f\"   👤 Nome: {name}\")\n            print(f\"   📅 Entrada: {datetime.now().strftime('%d/%m/%Y %H:%M')}\")\n            print(f\"   🎯 Motivo: {purpose}\")\n        else:\n            print(\"\\n❌ Informações incompletas!\")\n        \n        input(\"\\nPressione Enter para voltar ao menu...\")\n    \n    def view_reports(self):\n        \"\"\"Ver denúncias (apenas direção)\"\"\"\n        self.clear_screen()\n        self.print_header()\n        \n        print(\"\\n📊 DENÚNCIAS RECEBIDAS\")\n        print(\"-\" * 25)\n        \n        reports = [\n            {\n                'id': '#202509201001',\n                'type': 'Bullying/Agressão',\n                'location': 'Pátio',\n                'date': '2025-09-20 10:15',\n                'status': 'Em análise',\n                'anonymous': True\n            },\n            {\n                'id': '#202509190815',\n                'type': 'Comportamento suspeito',\n                'location': 'Portão principal',\n                'date': '2025-09-19 08:30',\n                'status': 'Resolvido',\n                'anonymous': False\n            }\n        ]\n        \n        for report in reports:\n            status_emoji = {\"Em análise\": \"🔄\", \"Resolvido\": \"✅\", \"Pendente\": \"⏳\"}\n            print(f\"\\n🆔 {report['id']}\")\n            print(f\"   📝 Tipo: {report['type']}\")\n            print(f\"   📍 Local: {report['location']}\")\n            print(f\"   📅 Data: {report['date']}\")\n            print(f\"   {status_emoji[report['status']]} Status: {report['status']}\")\n            print(f\"   🕵️  Anônima: {'Sim' if report['anonymous'] else 'Não'}\")\n        \n        input(\"\\nPressione Enter para voltar ao menu...\")\n    \n    def generate_reports(self):\n        \"\"\"Gerar relatórios\"\"\"\n        self.clear_screen()\n        self.print_header()\n        \n        print(\"\\n📈 RELATÓRIOS\")\n        print(\"-\" * 15)\n        \n        print(\"\\n📊 Estatísticas do mês:\")\n        print(\"   📝 Total de denúncias: 15\")\n        print(\"   🚨 Emergências: 2\")\n        print(\"   👥 Visitantes registrados: 47\")\n        print(\"   🔄 Casos em análise: 3\")\n        print(\"   ✅ Casos resolvidos: 12\")\n        \n        print(\"\\n📋 Tipos de incidentes mais comuns:\")\n        print(\"   1. 🤜 Bullying/Agressão (40%)\")\n        print(\"   2. 👤 Comportamento suspeito (25%)\")\n        print(\"   3. 🚫 Vandalismo (20%)\")\n        print(\"   4. 📱 Cyberbullying (15%)\")\n        \n        input(\"\\nPressione Enter para voltar ao menu...\")\n    \n    def run(self):\n        \"\"\"Executar aplicativo\"\"\"\n        print(\"🚀 Iniciando Sistema de Segurança Escolar...\")\n        print(\"⏳ Aguarde...\")\n        \n        while self.running:\n            if not firebase_manager.get_current_user():\n                if not self.login_screen():\n                    continue\n            \n            self.main_menu()\n            firebase_manager.current_user = None\n\nif __name__ == '__main__':\n    app = SchoolSecurityTerminalApp()\n    app.run()","size_bytes":15331}},"version":1}