"""
Sistema de Seguran√ßa Escolar - Vers√£o Android (Corrigida)
Aplicativo desenvolvido em Python + Kivy para dispositivos m√≥veis Android
"""

import os
import json
from datetime import datetime

# Imports do Kivy e KivyMD com fallbacks
try:
    from kivy.app import App
    from kivy.uix.screenmanager import ScreenManager, Screen
    from kivy.uix.boxlayout import BoxLayout
    from kivy.uix.label import Label
    from kivy.uix.button import Button
    from kivy.uix.textinput import TextInput
    from kivy.uix.spinner import Spinner
    from kivy.uix.scrollview import ScrollView
    from kivy.clock import Clock

    from kivymd.app import MDApp
    from kivymd.uix.screen import MDScreen
    from kivymd.uix.boxlayout import MDBoxLayout
    from kivymd.uix.button import MDRaisedButton, MDFlatButton
    from kivymd.uix.textfield import MDTextField
    from kivymd.uix.card import MDCard
    from kivymd.uix.label import MDLabel
    from kivymd.uix.toolbar import MDTopAppBar
    from kivymd.uix.dialog import MDDialog
    from kivymd.uix.selectioncontrol import MDCheckbox
    
    KIVY_AVAILABLE = True
except ImportError:
    # Fallbacks para desenvolvimento no Replit
    print("‚ö†Ô∏è Kivy n√£o dispon√≠vel - modo desenvolvimento")
    
    class MockWidget:
        def __init__(self, **kwargs):
            for key, value in kwargs.items():
                setattr(self, key, value)
        def add_widget(self, widget): pass
        def dismiss(self): pass
        def open(self): pass
        
    class MockClock:
        @staticmethod
        def schedule_once(func, delay): pass
    
    # Mock classes
    App = MDApp = MockWidget
    ScreenManager = Screen = MDScreen = MockWidget
    BoxLayout = MDBoxLayout = MockWidget
    Label = MDLabel = Button = MockWidget
    TextInput = MDTextField = Spinner = MockWidget
    ScrollView = MockWidget
    MDRaisedButton = MDFlatButton = MockWidget
    MDCard = MDTopAppBar = MDDialog = MockWidget
    MDCheckbox = MockWidget
    Clock = MockClock
    
    KIVY_AVAILABLE = False


class LocalDataManager:
    """Gerenciador de dados locais"""
    
    def __init__(self):
        self.current_user = None
        self.data_file = "local_data.json"
        self.load_data()
    
    def load_data(self):
        """Carregar dados do arquivo local"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    self.data = json.load(f)
            else:
                self.data = {
                    'users': {
                        'admin@escola.com': {
                            'password': 'admin123',
                            'name': 'Administrador',
                            'user_type': 'direcao',
                            'active': True
                        },
                        'aluno@escola.com': {
                            'password': '123456',
                            'name': 'Aluno Exemplo',
                            'user_type': 'aluno',
                            'active': True
                        }
                    },
                    'reports': [],
                    'notices': [
                        {
                            'title': 'Simulado de Evacua√ß√£o',
                            'content': 'Simulado ser√° realizado na pr√≥xima quinta-feira √†s 10h.',
                            'date': '2025-09-20',
                            'priority': 'Alta'
                        }
                    ],
                    'visitors': [],
                    'incidents': []
                }
                self.save_data()
        except Exception as e:
            print(f"Erro ao carregar dados: {e}")
    
    def save_data(self):
        """Salvar dados no arquivo local"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"Erro ao salvar dados: {e}")
    
    def sign_in(self, email, password):
        """Fazer login"""
        try:
            if email in self.data['users']:
                user = self.data['users'][email]
                if user['password'] == password and user.get('active', True):
                    self.current_user = {
                        'email': email,
                        'name': user['name'],
                        'user_type': user['user_type'],
                        'active': user['active']
                    }
                    return {'success': True, 'user': self.current_user}
            return {'success': False, 'error': 'Credenciais inv√°lidas'}
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def get_current_user(self):
        """Obter usu√°rio atual"""
        return self.current_user
    
    def sign_out(self):
        """Fazer logout"""
        self.current_user = None
    
    def has_permission(self, permission):
        """Verificar permiss√µes do usu√°rio"""
        if not self.current_user:
            return False
            
        user_type = self.current_user.get('user_type', 'aluno')
        
        permissions = {
            'aluno': ['denunciar', 'ver_avisos', 'emergencia'],
            'funcionario': ['denunciar', 'ver_avisos', 'emergencia', 'registrar_visitantes'],
            'direcao': ['denunciar', 'ver_avisos', 'emergencia', 'registrar_visitantes', 
                       'ver_denuncias', 'gerar_relatorios']
        }
        
        return permission in permissions.get(user_type, [])
    
    def add_report(self, report_data):
        """Adicionar den√∫ncia"""
        try:
            report_data['id'] = f"R{datetime.now().strftime('%Y%m%d%H%M%S')}"
            report_data['date'] = datetime.now().isoformat()
            report_data['status'] = 'Pendente'
            self.data['reports'].append(report_data)
            self.save_data()
            return True
        except Exception as e:
            print(f"Erro ao adicionar den√∫ncia: {e}")
            return False
    
    def get_reports(self):
        """Obter den√∫ncias"""
        return self.data.get('reports', [])
    
    def get_notices(self):
        """Obter avisos"""
        return self.data.get('notices', [])


# Inst√¢ncia global do gerenciador de dados
data_manager = LocalDataManager()


class LoginScreen(MDScreen):
    """Tela de Login"""
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.name = 'login'
        
        main_layout = MDBoxLayout(orientation='vertical', padding=20, spacing=20)
        
        # T√≠tulo
        title = MDLabel(
            text='üè´ Sistema de Seguran√ßa Escolar',
            halign='center',
            font_style='H5',
            size_hint_y=None,
            height='80dp'
        )
        main_layout.add_widget(title)
        
        # Card de login
        login_card = MDCard(
            orientation='vertical',
            padding=20,
            spacing=15,
            size_hint=(0.9, None),
            height='300dp',
            pos_hint={'center_x': 0.5}
        )
        
        # Campos de login
        self.email_field = MDTextField(
            hint_text='Email',
            size_hint_y=None,
            height='60dp'
        )
        
        self.password_field = MDTextField(
            hint_text='Senha',
            password=True,
            size_hint_y=None,
            height='60dp'
        )
        
        # Bot√£o de login
        login_btn = MDRaisedButton(
            text='ENTRAR',
            size_hint_y=None,
            height='50dp',
            on_release=self.login,
            pos_hint={'center_x': 0.5}
        )
        
        # Status label
        self.status_label = MDLabel(
            text='Contas de teste:\nadmin@escola.com / admin123\naluno@escola.com / 123456',
            halign='center',
            size_hint_y=None,
            height='60dp'
        )
        
        login_card.add_widget(self.email_field)
        login_card.add_widget(self.password_field)
        login_card.add_widget(login_btn)
        login_card.add_widget(self.status_label)
        
        main_layout.add_widget(login_card)
        self.add_widget(main_layout)
    
    def login(self, *args):
        """Realizar login"""
        email = self.email_field.text.strip()
        password = self.password_field.text
        
        if not email or not password:
            self.status_label.text = 'Por favor, preencha todos os campos'
            return
        
        result = data_manager.sign_in(email, password)
        
        if result['success']:
            self.status_label.text = 'Login realizado com sucesso!'
            Clock.schedule_once(lambda dt: setattr(self.manager, 'current', 'dashboard'), 1)
        else:
            self.status_label.text = f'Erro: {result["error"]}'


class DashboardScreen(MDScreen):
    """Tela Principal (Dashboard)"""
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.name = 'dashboard'
        
        main_layout = MDBoxLayout(orientation='vertical')
        
        # Toolbar
        toolbar = MDTopAppBar(
            title="Dashboard",
            right_action_items=[["logout", self.logout]]
        )
        main_layout.add_widget(toolbar)
        
        # Scroll com conte√∫do
        scroll_content = MDBoxLayout(orientation='vertical', padding=10, spacing=10)
        
        # Informa√ß√µes do usu√°rio
        user = data_manager.get_current_user()
        if user:
            user_info = self.create_info_card(f"üë§ {user['name']}", f"Tipo: {user['user_type']}")
            scroll_content.add_widget(user_info)
        
        # Bot√£o de emerg√™ncia sempre dispon√≠vel
        emergency_card = self.create_action_card("üö® EMERG√äNCIA", "Acionar em situa√ß√µes de risco", self.emergency_action)
        scroll_content.add_widget(emergency_card)
        
        # Funcionalidades baseadas em permiss√µes
        if data_manager.has_permission('denunciar'):
            reports_card = self.create_action_card("üìù Den√∫ncias", "Fazer nova den√∫ncia", self.open_reports)
            scroll_content.add_widget(reports_card)
        
        if data_manager.has_permission('ver_avisos'):
            notices_card = self.create_action_card("üì¢ Avisos", "Ver avisos da escola", self.open_notices)
            scroll_content.add_widget(notices_card)
        
        if data_manager.has_permission('registrar_visitantes'):
            visitors_card = self.create_action_card("üë• Visitantes", "Registrar visitante", self.open_visitors)
            scroll_content.add_widget(visitors_card)
        
        if data_manager.has_permission('ver_denuncias'):
            admin_card = self.create_action_card("üìä Relat√≥rios", "Ver den√∫ncias e relat√≥rios", self.open_admin)
            scroll_content.add_widget(admin_card)
        
        scroll = ScrollView()
        scroll.add_widget(scroll_content)
        main_layout.add_widget(scroll)
        
        self.add_widget(main_layout)
    
    def create_info_card(self, title, subtitle):
        """Criar card informativo"""
        card = MDCard(
            MDBoxLayout(
                MDLabel(text=title, font_style="H6", size_hint_y=None, height='30dp'),
                MDLabel(text=subtitle, size_hint_y=None, height='25dp'),
                orientation='vertical',
                padding=15,
                spacing=5
            ),
            size_hint_y=None,
            height='80dp'
        )
        return card
    
    def create_action_card(self, title, subtitle, action):
        """Criar card de a√ß√£o"""
        card = MDCard(
            MDBoxLayout(
                MDBoxLayout(
                    MDLabel(text=title, font_style="H6", size_hint_y=None, height='30dp'),
                    MDLabel(text=subtitle, size_hint_y=None, height='25dp'),
                    orientation='vertical',
                    size_hint_x=0.7
                ),
                MDRaisedButton(
                    text="ABRIR",
                    size_hint_x=0.3,
                    size_hint_y=None,
                    height='40dp',
                    on_release=action
                ),
                padding=15,
                spacing=10
            ),
            size_hint_y=None,
            height='80dp'
        )
        return card
    
    def emergency_action(self, *args):
        """A√ß√£o de emerg√™ncia"""
        dialog = MDDialog(
            title="üö® EMERG√äNCIA ACIONADA",
            text="Emerg√™ncia foi registrada!\n\nEm situa√ß√£o real:\n‚Ä¢ Pol√≠cia: 190\n‚Ä¢ SAMU: 192\n‚Ä¢ Bombeiros: 193",
            buttons=[MDFlatButton(text="OK", on_release=lambda x: dialog.dismiss())]
        )
        dialog.open()
    
    def open_reports(self, *args):
        """Abrir tela de den√∫ncias"""
        self.manager.current = 'reports'
    
    def open_notices(self, *args):
        """Abrir avisos"""
        self.manager.current = 'notices'
    
    def open_visitors(self, *args):
        """Abrir visitantes"""
        self.manager.current = 'visitors'
    
    def open_admin(self, *args):
        """Abrir √°rea administrativa"""
        self.manager.current = 'admin'
    
    def logout(self, *args):
        """Fazer logout"""
        data_manager.sign_out()
        self.manager.current = 'login'


class ReportsScreen(MDScreen):
    """Tela de Den√∫ncias"""
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.name = 'reports'
        
        main_layout = MDBoxLayout(orientation='vertical')
        
        # Toolbar
        toolbar = MDTopAppBar(
            title="Nova Den√∫ncia",
            left_action_items=[["arrow-left", lambda x: setattr(self.manager, 'current', 'dashboard')]]
        )
        main_layout.add_widget(toolbar)
        
        # Form
        form_layout = MDBoxLayout(orientation='vertical', padding=20, spacing=15)
        
        self.incident_type = Spinner(
            text='Tipo de Incidente',
            values=['Bullying', 'Drogas', 'Vandalismo', 'Amea√ßa', 'Outro'],
            size_hint_y=None,
            height='50dp'
        )
        
        self.location_field = MDTextField(
            hint_text='Local do incidente',
            size_hint_y=None,
            height='60dp'
        )
        
        self.description_field = MDTextField(
            hint_text='Descri√ß√£o detalhada',
            multiline=True,
            size_hint_y=None,
            height='100dp'
        )
        
        # Checkbox an√¥nimo
        checkbox_layout = BoxLayout(size_hint_y=None, height='40dp')
        checkbox_layout.add_widget(Label(text='Den√∫ncia an√¥nima?', size_hint_x=0.8))
        self.is_anonymous = MDCheckbox(size_hint_x=0.2)
        checkbox_layout.add_widget(self.is_anonymous)
        
        submit_btn = MDRaisedButton(
            text='ENVIAR DEN√öNCIA',
            size_hint_y=None,
            height='50dp',
            on_release=self.submit_report,
            pos_hint={'center_x': 0.5}
        )
        
        self.status_label = MDLabel(
            text='',
            halign='center',
            size_hint_y=None,
            height='40dp'
        )
        
        form_layout.add_widget(self.incident_type)
        form_layout.add_widget(self.location_field)
        form_layout.add_widget(self.description_field)
        form_layout.add_widget(checkbox_layout)
        form_layout.add_widget(submit_btn)
        form_layout.add_widget(self.status_label)
        
        main_layout.add_widget(form_layout)
        self.add_widget(main_layout)
    
    def submit_report(self, *args):
        """Enviar den√∫ncia"""
        if not self.location_field.text.strip() or not self.description_field.text.strip():
            self.status_label.text = "Por favor, preencha todos os campos obrigat√≥rios"
            return
        
        report_data = {
            'type': self.incident_type.text,
            'location': self.location_field.text.strip(),
            'description': self.description_field.text.strip(),
            'anonymous': self.is_anonymous.active,
            'reporter': None if self.is_anonymous.active else data_manager.get_current_user()
        }
        
        if data_manager.add_report(report_data):
            self.status_label.text = "Den√∫ncia enviada com sucesso!"
            
            # Limpar campos
            self.location_field.text = ""
            self.description_field.text = ""
            self.is_anonymous.active = False
            
            Clock.schedule_once(lambda dt: setattr(self.manager, 'current', 'dashboard'), 2)
        else:
            self.status_label.text = "Erro ao enviar den√∫ncia"


class NoticesScreen(MDScreen):
    """Tela de Avisos"""
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.name = 'notices'
        
        main_layout = MDBoxLayout(orientation='vertical')
        
        # Toolbar
        toolbar = MDTopAppBar(
            title="Avisos da Escola",
            left_action_items=[["arrow-left", lambda x: setattr(self.manager, 'current', 'dashboard')]]
        )
        main_layout.add_widget(toolbar)
        
        # Lista de avisos
        notices_layout = MDBoxLayout(orientation='vertical', padding=10, spacing=10)
        
        notices = data_manager.get_notices()
        
        for notice in notices:
            card = MDCard(
                MDBoxLayout(
                    MDLabel(text=notice['title'], font_style="H6", size_hint_y=None, height='30dp'),
                    MDLabel(text=f"üìÖ {notice['date']}", size_hint_y=None, height='25dp'),
                    MDLabel(text=notice['content'], size_hint_y=None, height='40dp'),
                    orientation='vertical',
                    padding=15,
                    spacing=5
                ),
                size_hint_y=None,
                height='120dp'
            )
            notices_layout.add_widget(card)
        
        scroll = ScrollView()
        scroll.add_widget(notices_layout)
        main_layout.add_widget(scroll)
        
        self.add_widget(main_layout)


class VisitorsScreen(MDScreen):
    """Tela de Visitantes"""
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.name = 'visitors'
        
        main_layout = MDBoxLayout(orientation='vertical')
        
        # Toolbar
        toolbar = MDTopAppBar(
            title="Registrar Visitante",
            left_action_items=[["arrow-left", lambda x: setattr(self.manager, 'current', 'dashboard')]]
        )
        main_layout.add_widget(toolbar)
        
        # Form
        form_layout = MDBoxLayout(orientation='vertical', padding=20, spacing=15)
        
        self.name_field = MDTextField(hint_text='Nome do visitante', size_hint_y=None, height='60dp')
        self.document_field = MDTextField(hint_text='RG/CPF', size_hint_y=None, height='60dp')
        self.purpose_field = MDTextField(hint_text='Motivo da visita', size_hint_y=None, height='60dp')
        
        register_btn = MDRaisedButton(
            text='REGISTRAR VISITANTE',
            size_hint_y=None,
            height='50dp',
            on_release=self.register_visitor,
            pos_hint={'center_x': 0.5}
        )
        
        self.status_label = MDLabel(
            text='',
            halign='center',
            size_hint_y=None,
            height='40dp'
        )
        
        form_layout.add_widget(self.name_field)
        form_layout.add_widget(self.document_field)
        form_layout.add_widget(self.purpose_field)
        form_layout.add_widget(register_btn)
        form_layout.add_widget(self.status_label)
        
        main_layout.add_widget(form_layout)
        self.add_widget(main_layout)
    
    def register_visitor(self, *args):
        """Registrar visitante"""
        if not all([self.name_field.text.strip(), self.document_field.text.strip(), self.purpose_field.text.strip()]):
            self.status_label.text = "Preencha todos os campos obrigat√≥rios"
            return
        
        visitor_id = f"V{datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        self.status_label.text = f"Visitante registrado!\nID: {visitor_id}\nEntrada: {datetime.now().strftime('%H:%M')}"
        
        # Limpar campos
        self.name_field.text = ""
        self.document_field.text = ""
        self.purpose_field.text = ""


class AdminScreen(MDScreen):
    """Tela Administrativa"""
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.name = 'admin'
        
        main_layout = MDBoxLayout(orientation='vertical')
        
        # Toolbar
        toolbar = MDTopAppBar(
            title="√Årea Administrativa",
            left_action_items=[["arrow-left", lambda x: setattr(self.manager, 'current', 'dashboard')]]
        )
        main_layout.add_widget(toolbar)
        
        # Stats
        stats_layout = MDBoxLayout(orientation='vertical', padding=10, spacing=10)
        
        reports = data_manager.get_reports()
        total_reports = len(reports)
        
        stats_card = MDCard(
            MDBoxLayout(
                MDLabel(text="üìä Estat√≠sticas", font_style="H6", size_hint_y=None, height='30dp'),
                MDLabel(text=f"Total de den√∫ncias: {total_reports}", size_hint_y=None, height='25dp'),
                MDLabel(text=f"Avisos ativos: {len(data_manager.get_notices())}", size_hint_y=None, height='25dp'),
                orientation='vertical',
                padding=15,
                spacing=5
            ),
            size_hint_y=None,
            height='100dp'
        )
        stats_layout.add_widget(stats_card)
        
        scroll = ScrollView()
        scroll.add_widget(stats_layout)
        main_layout.add_widget(scroll)
        
        self.add_widget(main_layout)


class SchoolSecurityApp(MDApp):
    """Aplicativo Principal - Vers√£o Android"""
    
    def build(self):
        self.title = "Sistema de Seguran√ßa Escolar"
        self.theme_cls.theme_style = "Light"
        self.theme_cls.primary_palette = "Blue"
        
        # Screen Manager
        sm = ScreenManager()
        
        # Adicionar todas as telas
        sm.add_widget(LoginScreen())
        sm.add_widget(DashboardScreen())
        sm.add_widget(ReportsScreen())
        sm.add_widget(NoticesScreen())
        sm.add_widget(VisitorsScreen())
        sm.add_widget(AdminScreen())
        
        return sm


if __name__ == '__main__':
    if KIVY_AVAILABLE:
        SchoolSecurityApp().run()
    else:
        print("=" * 60)
        print("üè´ SISTEMA DE SEGURAN√áA ESCOLAR - VERS√ÉO ANDROID")
        print("=" * 60)
        print("")
        print("üì± Este √© o aplicativo Android corrigido!")
        print("   ‚Ä¢ Para testar localmente: instale kivy e kivymd")
        print("   ‚Ä¢ Para Android: compile com buildozer")
        print("")
        print("üîß Para compilar:")
        print("   1. rm -rf .buildozer")
        print("   2. buildozer android debug")
        print("")
        print("‚úÖ Corre√ß√µes aplicadas:")
        print("   ‚Ä¢ Imports corrigidos")  
        print("   ‚Ä¢ Fallbacks problem√°ticos removidos")
        print("   ‚Ä¢ Compat√≠vel com Android 15")
        print("   ‚Ä¢ Vers√£o otimizada e est√°vel")
        print("")
        print("üöÄ O APK deve funcionar normalmente no seu dispositivo!")